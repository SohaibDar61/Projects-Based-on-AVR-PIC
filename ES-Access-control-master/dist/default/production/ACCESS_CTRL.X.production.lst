

Microchip MPLAB XC8 Assembler V2.05 build -831301201 
                                                                                               Wed Sep 18 18:54:50 2019

Microchip MPLAB XC8 C Compiler v2.05 (Free license) build 20181220022703 Og1 
     1                           	processor	16F877A
     2                           	opt	pw 120
     3                           	opt	flic
     4                           	psect	idataBANK0,global,class=CODE,delta=2
     5                           	psect	idataBANK1,global,class=CODE,delta=2
     6                           	psect	nvBANK0,global,class=BANK0,space=1,delta=1
     7                           	psect	strings,global,class=STRING,delta=2
     8                           	psect	cinit,global,class=CODE,merge=1,delta=2
     9                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
    10                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1
    11                           	psect	dataBANK1,global,class=BANK1,space=1,delta=1
    12                           	psect	inittext,global,class=CODE,delta=2
    13                           	psect	clrtext,global,class=CODE,delta=2
    14                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
    15                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    16                           	psect	maintext,global,class=CODE,split=1,delta=2
    17                           	psect	text1,local,class=CODE,merge=1,delta=2
    18                           	psect	text2,local,class=CODE,merge=1,delta=2
    19                           	psect	text3,local,class=CODE,merge=1,delta=2
    20                           	psect	text4,local,class=CODE,merge=1,delta=2
    21                           	psect	text5,local,class=CODE,merge=1,delta=2
    22                           	psect	text6,local,class=CODE,merge=1,delta=2
    23                           	psect	text7,local,class=CODE,merge=1,delta=2
    24                           	psect	text8,local,class=CODE,merge=1,delta=2
    25                           	psect	text9,local,class=CODE,merge=1,delta=2
    26                           	psect	text10,local,class=CODE,merge=1,delta=2
    27                           	psect	text11,local,class=CODE,merge=1,delta=2
    28                           	psect	text12,local,class=CODE,merge=1,delta=2
    29                           	psect	text13,local,class=CODE,merge=1,delta=2
    30                           	psect	text14,local,class=CODE,merge=1,delta=2
    31                           	psect	text15,local,class=CODE,merge=1,delta=2
    32                           	psect	text16,local,class=CODE,merge=1,delta=2,group=1
    33                           	psect	text17,local,class=CODE,merge=1,delta=2,group=1
    34                           	psect	text18,local,class=CODE,merge=1,delta=2
    35                           	psect	text19,local,class=CODE,merge=1,delta=2
    36                           	psect	text20,local,class=CODE,merge=1,delta=2
    37                           	psect	text21,local,class=CODE,merge=1,delta=2
    38                           	psect	text22,local,class=CODE,merge=1,delta=2
    39                           	psect	text23,local,class=CODE,merge=1,delta=2
    40                           	psect	text24,local,class=CODE,merge=1,delta=2
    41                           	psect	text25,local,class=CODE,merge=1,delta=2
    42                           	psect	text26,local,class=CODE,merge=1,delta=2
    43                           	psect	text27,local,class=CODE,merge=1,delta=2
    44                           	psect	text28,local,class=CODE,merge=1,delta=2
    45                           	dabs	1,0x7E,2
    46  0000                     
    47                           ; Version 2.05
    48                           ; Generated 20/12/2018 GMT
    49                           ; 
    50                           ; Copyright Â© 2018, Microchip Technology Inc. and its subsidiaries ("Microchip")
    51                           ; All rights reserved.
    52                           ; 
    53                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    54                           ; 
    55                           ; Redistribution and use in source and binary forms, with or without modification, are
    56                           ; permitted provided that the following conditions are met:
    57                           ; 
    58                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    59                           ;        conditions and the following disclaimer.
    60                           ; 
    61                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    62                           ;        of conditions and the following disclaimer in the documentation and/or other
    63                           ;        materials provided with the distribution.
    64                           ; 
    65                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    66                           ;        software without specific prior written permission.
    67                           ; 
    68                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    69                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    70                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    71                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    72                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    73                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    74                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    75                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    76                           ; 
    77                           ; 
    78                           ; Code-generator required, PIC16F877A Definitions
    79                           ; 
    80                           ; SFR Addresses
    81  0000                     	;# 
    82  0001                     	;# 
    83  0002                     	;# 
    84  0003                     	;# 
    85  0004                     	;# 
    86  0005                     	;# 
    87  0006                     	;# 
    88  0007                     	;# 
    89  0008                     	;# 
    90  0009                     	;# 
    91  000A                     	;# 
    92  000B                     	;# 
    93  000C                     	;# 
    94  000D                     	;# 
    95  000E                     	;# 
    96  000E                     	;# 
    97  000F                     	;# 
    98  0010                     	;# 
    99  0011                     	;# 
   100  0012                     	;# 
   101  0013                     	;# 
   102  0014                     	;# 
   103  0015                     	;# 
   104  0015                     	;# 
   105  0016                     	;# 
   106  0017                     	;# 
   107  0018                     	;# 
   108  0019                     	;# 
   109  001A                     	;# 
   110  001B                     	;# 
   111  001B                     	;# 
   112  001C                     	;# 
   113  001D                     	;# 
   114  001E                     	;# 
   115  001F                     	;# 
   116  0081                     	;# 
   117  0085                     	;# 
   118  0086                     	;# 
   119  0087                     	;# 
   120  0088                     	;# 
   121  0089                     	;# 
   122  008C                     	;# 
   123  008D                     	;# 
   124  008E                     	;# 
   125  0091                     	;# 
   126  0092                     	;# 
   127  0093                     	;# 
   128  0094                     	;# 
   129  0098                     	;# 
   130  0099                     	;# 
   131  009C                     	;# 
   132  009D                     	;# 
   133  009E                     	;# 
   134  009F                     	;# 
   135  010C                     	;# 
   136  010D                     	;# 
   137  010E                     	;# 
   138  010F                     	;# 
   139  018C                     	;# 
   140  018D                     	;# 
   141  0000                     	;# 
   142  0001                     	;# 
   143  0002                     	;# 
   144  0003                     	;# 
   145  0004                     	;# 
   146  0005                     	;# 
   147  0006                     	;# 
   148  0007                     	;# 
   149  0008                     	;# 
   150  0009                     	;# 
   151  000A                     	;# 
   152  000B                     	;# 
   153  000C                     	;# 
   154  000D                     	;# 
   155  000E                     	;# 
   156  000E                     	;# 
   157  000F                     	;# 
   158  0010                     	;# 
   159  0011                     	;# 
   160  0012                     	;# 
   161  0013                     	;# 
   162  0014                     	;# 
   163  0015                     	;# 
   164  0015                     	;# 
   165  0016                     	;# 
   166  0017                     	;# 
   167  0018                     	;# 
   168  0019                     	;# 
   169  001A                     	;# 
   170  001B                     	;# 
   171  001B                     	;# 
   172  001C                     	;# 
   173  001D                     	;# 
   174  001E                     	;# 
   175  001F                     	;# 
   176  0081                     	;# 
   177  0085                     	;# 
   178  0086                     	;# 
   179  0087                     	;# 
   180  0088                     	;# 
   181  0089                     	;# 
   182  008C                     	;# 
   183  008D                     	;# 
   184  008E                     	;# 
   185  0091                     	;# 
   186  0092                     	;# 
   187  0093                     	;# 
   188  0094                     	;# 
   189  0098                     	;# 
   190  0099                     	;# 
   191  009C                     	;# 
   192  009D                     	;# 
   193  009E                     	;# 
   194  009F                     	;# 
   195  010C                     	;# 
   196  010D                     	;# 
   197  010E                     	;# 
   198  010F                     	;# 
   199  018C                     	;# 
   200  018D                     	;# 
   201  0000                     	;# 
   202  0001                     	;# 
   203  0002                     	;# 
   204  0003                     	;# 
   205  0004                     	;# 
   206  0005                     	;# 
   207  0006                     	;# 
   208  0007                     	;# 
   209  0008                     	;# 
   210  0009                     	;# 
   211  000A                     	;# 
   212  000B                     	;# 
   213  000C                     	;# 
   214  000D                     	;# 
   215  000E                     	;# 
   216  000E                     	;# 
   217  000F                     	;# 
   218  0010                     	;# 
   219  0011                     	;# 
   220  0012                     	;# 
   221  0013                     	;# 
   222  0014                     	;# 
   223  0015                     	;# 
   224  0015                     	;# 
   225  0016                     	;# 
   226  0017                     	;# 
   227  0018                     	;# 
   228  0019                     	;# 
   229  001A                     	;# 
   230  001B                     	;# 
   231  001B                     	;# 
   232  001C                     	;# 
   233  001D                     	;# 
   234  001E                     	;# 
   235  001F                     	;# 
   236  0081                     	;# 
   237  0085                     	;# 
   238  0086                     	;# 
   239  0087                     	;# 
   240  0088                     	;# 
   241  0089                     	;# 
   242  008C                     	;# 
   243  008D                     	;# 
   244  008E                     	;# 
   245  0091                     	;# 
   246  0092                     	;# 
   247  0093                     	;# 
   248  0094                     	;# 
   249  0098                     	;# 
   250  0099                     	;# 
   251  009C                     	;# 
   252  009D                     	;# 
   253  009E                     	;# 
   254  009F                     	;# 
   255  010C                     	;# 
   256  010D                     	;# 
   257  010E                     	;# 
   258  010F                     	;# 
   259  018C                     	;# 
   260  018D                     	;# 
   261  0000                     	;# 
   262  0001                     	;# 
   263  0002                     	;# 
   264  0003                     	;# 
   265  0004                     	;# 
   266  0005                     	;# 
   267  0006                     	;# 
   268  0007                     	;# 
   269  0008                     	;# 
   270  0009                     	;# 
   271  000A                     	;# 
   272  000B                     	;# 
   273  000C                     	;# 
   274  000D                     	;# 
   275  000E                     	;# 
   276  000E                     	;# 
   277  000F                     	;# 
   278  0010                     	;# 
   279  0011                     	;# 
   280  0012                     	;# 
   281  0013                     	;# 
   282  0014                     	;# 
   283  0015                     	;# 
   284  0015                     	;# 
   285  0016                     	;# 
   286  0017                     	;# 
   287  0018                     	;# 
   288  0019                     	;# 
   289  001A                     	;# 
   290  001B                     	;# 
   291  001B                     	;# 
   292  001C                     	;# 
   293  001D                     	;# 
   294  001E                     	;# 
   295  001F                     	;# 
   296  0081                     	;# 
   297  0085                     	;# 
   298  0086                     	;# 
   299  0087                     	;# 
   300  0088                     	;# 
   301  0089                     	;# 
   302  008C                     	;# 
   303  008D                     	;# 
   304  008E                     	;# 
   305  0091                     	;# 
   306  0092                     	;# 
   307  0093                     	;# 
   308  0094                     	;# 
   309  0098                     	;# 
   310  0099                     	;# 
   311  009C                     	;# 
   312  009D                     	;# 
   313  009E                     	;# 
   314  009F                     	;# 
   315  010C                     	;# 
   316  010D                     	;# 
   317  010E                     	;# 
   318  010F                     	;# 
   319  018C                     	;# 
   320  018D                     	;# 
   321  0000                     	;# 
   322  0001                     	;# 
   323  0002                     	;# 
   324  0003                     	;# 
   325  0004                     	;# 
   326  0005                     	;# 
   327  0006                     	;# 
   328  0007                     	;# 
   329  0008                     	;# 
   330  0009                     	;# 
   331  000A                     	;# 
   332  000B                     	;# 
   333  000C                     	;# 
   334  000D                     	;# 
   335  000E                     	;# 
   336  000E                     	;# 
   337  000F                     	;# 
   338  0010                     	;# 
   339  0011                     	;# 
   340  0012                     	;# 
   341  0013                     	;# 
   342  0014                     	;# 
   343  0015                     	;# 
   344  0015                     	;# 
   345  0016                     	;# 
   346  0017                     	;# 
   347  0018                     	;# 
   348  0019                     	;# 
   349  001A                     	;# 
   350  001B                     	;# 
   351  001B                     	;# 
   352  001C                     	;# 
   353  001D                     	;# 
   354  001E                     	;# 
   355  001F                     	;# 
   356  0081                     	;# 
   357  0085                     	;# 
   358  0086                     	;# 
   359  0087                     	;# 
   360  0088                     	;# 
   361  0089                     	;# 
   362  008C                     	;# 
   363  008D                     	;# 
   364  008E                     	;# 
   365  0091                     	;# 
   366  0092                     	;# 
   367  0093                     	;# 
   368  0094                     	;# 
   369  0098                     	;# 
   370  0099                     	;# 
   371  009C                     	;# 
   372  009D                     	;# 
   373  009E                     	;# 
   374  009F                     	;# 
   375  010C                     	;# 
   376  010D                     	;# 
   377  010E                     	;# 
   378  010F                     	;# 
   379  018C                     	;# 
   380  018D                     	;# 
   381  0000                     	;# 
   382  0001                     	;# 
   383  0002                     	;# 
   384  0003                     	;# 
   385  0004                     	;# 
   386  0005                     	;# 
   387  0006                     	;# 
   388  0007                     	;# 
   389  0008                     	;# 
   390  0009                     	;# 
   391  000A                     	;# 
   392  000B                     	;# 
   393  000C                     	;# 
   394  000D                     	;# 
   395  000E                     	;# 
   396  000E                     	;# 
   397  000F                     	;# 
   398  0010                     	;# 
   399  0011                     	;# 
   400  0012                     	;# 
   401  0013                     	;# 
   402  0014                     	;# 
   403  0015                     	;# 
   404  0015                     	;# 
   405  0016                     	;# 
   406  0017                     	;# 
   407  0018                     	;# 
   408  0019                     	;# 
   409  001A                     	;# 
   410  001B                     	;# 
   411  001B                     	;# 
   412  001C                     	;# 
   413  001D                     	;# 
   414  001E                     	;# 
   415  001F                     	;# 
   416  0081                     	;# 
   417  0085                     	;# 
   418  0086                     	;# 
   419  0087                     	;# 
   420  0088                     	;# 
   421  0089                     	;# 
   422  008C                     	;# 
   423  008D                     	;# 
   424  008E                     	;# 
   425  0091                     	;# 
   426  0092                     	;# 
   427  0093                     	;# 
   428  0094                     	;# 
   429  0098                     	;# 
   430  0099                     	;# 
   431  009C                     	;# 
   432  009D                     	;# 
   433  009E                     	;# 
   434  009F                     	;# 
   435  010C                     	;# 
   436  010D                     	;# 
   437  010E                     	;# 
   438  010F                     	;# 
   439  018C                     	;# 
   440  018D                     	;# 
   441  0000                     	;# 
   442  0001                     	;# 
   443  0002                     	;# 
   444  0003                     	;# 
   445  0004                     	;# 
   446  0005                     	;# 
   447  0006                     	;# 
   448  0007                     	;# 
   449  0008                     	;# 
   450  0009                     	;# 
   451  000A                     	;# 
   452  000B                     	;# 
   453  000C                     	;# 
   454  000D                     	;# 
   455  000E                     	;# 
   456  000E                     	;# 
   457  000F                     	;# 
   458  0010                     	;# 
   459  0011                     	;# 
   460  0012                     	;# 
   461  0013                     	;# 
   462  0014                     	;# 
   463  0015                     	;# 
   464  0015                     	;# 
   465  0016                     	;# 
   466  0017                     	;# 
   467  0018                     	;# 
   468  0019                     	;# 
   469  001A                     	;# 
   470  001B                     	;# 
   471  001B                     	;# 
   472  001C                     	;# 
   473  001D                     	;# 
   474  001E                     	;# 
   475  001F                     	;# 
   476  0081                     	;# 
   477  0085                     	;# 
   478  0086                     	;# 
   479  0087                     	;# 
   480  0088                     	;# 
   481  0089                     	;# 
   482  008C                     	;# 
   483  008D                     	;# 
   484  008E                     	;# 
   485  0091                     	;# 
   486  0092                     	;# 
   487  0093                     	;# 
   488  0094                     	;# 
   489  0098                     	;# 
   490  0099                     	;# 
   491  009C                     	;# 
   492  009D                     	;# 
   493  009E                     	;# 
   494  009F                     	;# 
   495  010C                     	;# 
   496  010D                     	;# 
   497  010E                     	;# 
   498  010F                     	;# 
   499  018C                     	;# 
   500  018D                     	;# 
   501  0000                     	;# 
   502  0001                     	;# 
   503  0002                     	;# 
   504  0003                     	;# 
   505  0004                     	;# 
   506  0005                     	;# 
   507  0006                     	;# 
   508  0007                     	;# 
   509  0008                     	;# 
   510  0009                     	;# 
   511  000A                     	;# 
   512  000B                     	;# 
   513  000C                     	;# 
   514  000D                     	;# 
   515  000E                     	;# 
   516  000E                     	;# 
   517  000F                     	;# 
   518  0010                     	;# 
   519  0011                     	;# 
   520  0012                     	;# 
   521  0013                     	;# 
   522  0014                     	;# 
   523  0015                     	;# 
   524  0015                     	;# 
   525  0016                     	;# 
   526  0017                     	;# 
   527  0018                     	;# 
   528  0019                     	;# 
   529  001A                     	;# 
   530  001B                     	;# 
   531  001B                     	;# 
   532  001C                     	;# 
   533  001D                     	;# 
   534  001E                     	;# 
   535  001F                     	;# 
   536  0081                     	;# 
   537  0085                     	;# 
   538  0086                     	;# 
   539  0087                     	;# 
   540  0088                     	;# 
   541  0089                     	;# 
   542  008C                     	;# 
   543  008D                     	;# 
   544  008E                     	;# 
   545  0091                     	;# 
   546  0092                     	;# 
   547  0093                     	;# 
   548  0094                     	;# 
   549  0098                     	;# 
   550  0099                     	;# 
   551  009C                     	;# 
   552  009D                     	;# 
   553  009E                     	;# 
   554  009F                     	;# 
   555  010C                     	;# 
   556  010D                     	;# 
   557  010E                     	;# 
   558  010F                     	;# 
   559  018C                     	;# 
   560  018D                     	;# 
   561                           
   562                           	psect	idataBANK0
   563  0FFF                     __pidataBANK0:	
   564                           
   565                           ;initializer for LCD_update@Limit
   566  0FFF  3406               	retlw	6
   567                           
   568                           	psect	idataBANK1
   569  007A                     __pidataBANK1:	
   570                           
   571                           ;initializer for _KEYS
   572  007A  3437               	retlw	55
   573  007B  3438               	retlw	56
   574  007C  3439               	retlw	57
   575  007D  342F               	retlw	47
   576  007E  3434               	retlw	52
   577  007F  3435               	retlw	53
   578  0080  3436               	retlw	54
   579  0081  342A               	retlw	42
   580  0082  3431               	retlw	49
   581  0083  3432               	retlw	50
   582  0084  3433               	retlw	51
   583  0085  342D               	retlw	45
   584  0086  3423               	retlw	35
   585  0087  3430               	retlw	48
   586  0088  343D               	retlw	61
   587  0089  342B               	retlw	43
   588                           
   589                           	psect	nvBANK0
   590  0069                     __pnvBANK0:	
   591  0069                     _currentMode:	
   592  0069                     	ds	1
   593  04FA                     _PCFG2	set	1274
   594  04F9                     _PCFG1	set	1273
   595  018D                     _EECON2	set	397
   596                           
   597                           	psect	strings
   598  0003                     __pstrings:	
   599  0003                     stringtab:	
   600  0003                     __stringtab:	
   601                           
   602                           ;	String table - string pointers are 1 byte each
   603  0003  1BFF               	btfsc	btemp+1,7
   604  0004  280D               	ljmp	stringcode
   605  0005  1383               	bcf	3,7
   606  0006  187F               	btfsc	btemp+1,0
   607  0007  1783               	bsf	3,7
   608  0008  0800               	movf	0,w
   609  0009  0A84               	incf	4,f
   610  000A  1903               	skipnz
   611  000B  0AFF               	incf	btemp+1,f
   612  000C  0008               	return
   613  000D                     stringcode:	
   614  000D                     stringdir:	
   615  000D  3000               	movlw	high stringdir
   616  000E  008A               	movwf	10
   617  000F  0804               	movf	4,w
   618  0010  0A84               	incf	4,f
   619  0011  0782               	addwf	2,f
   620  0012                     __stringbase:	
   621  0012  3400               	retlw	0
   622  0013                     __end_of__stringtab:	
   623  0013                     STR_5:	
   624  0013  344E               	retlw	78	;'N'
   625  0014  3445               	retlw	69	;'E'
   626  0015  3457               	retlw	87	;'W'
   627  0016  3420               	retlw	32	;' '
   628  0017  3450               	retlw	80	;'P'
   629  0018  3441               	retlw	65	;'A'
   630  0019  3453               	retlw	83	;'S'
   631  001A  3453               	retlw	83	;'S'
   632  001B  3457               	retlw	87	;'W'
   633  001C  344F               	retlw	79	;'O'
   634  001D  3452               	retlw	82	;'R'
   635  001E  3444               	retlw	68	;'D'
   636  001F  3420               	retlw	32	;' '
   637  0020  343A               	retlw	58	;':'
   638  0021  3420               	retlw	32	;' '
   639  0022  3400               	retlw	0
   640  0023                     STR_2:	
   641  0023  3441               	retlw	65	;'A'
   642  0024  3443               	retlw	67	;'C'
   643  0025  3443               	retlw	67	;'C'
   644  0026  3445               	retlw	69	;'E'
   645  0027  3453               	retlw	83	;'S'
   646  0028  3453               	retlw	83	;'S'
   647  0029  3420               	retlw	32	;' '
   648  002A  3444               	retlw	68	;'D'
   649  002B  3445               	retlw	69	;'E'
   650  002C  344E               	retlw	78	;'N'
   651  002D  3449               	retlw	73	;'I'
   652  002E  3445               	retlw	69	;'E'
   653  002F  3444               	retlw	68	;'D'
   654  0030  3420               	retlw	32	;' '
   655  0031  3421               	retlw	33	;'!'
   656  0032  3400               	retlw	0
   657  0033                     STR_3:	
   658  0033  3454               	retlw	84	;'T'
   659  0034  3472               	retlw	114	;'r'
   660  0035  3479               	retlw	121	;'y'
   661  0036  3420               	retlw	32	;' '
   662  0037  3454               	retlw	84	;'T'
   663  0038  3469               	retlw	105	;'i'
   664  0039  346D               	retlw	109	;'m'
   665  003A  3465               	retlw	101	;'e'
   666  003B  3473               	retlw	115	;'s'
   667  003C  3420               	retlw	32	;' '
   668  003D  343A               	retlw	58	;':'
   669  003E  3420               	retlw	32	;' '
   670  003F  3400               	retlw	0
   671  0040                     STR_7:	
   672  0040  3453               	retlw	83	;'S'
   673  0041  3455               	retlw	85	;'U'
   674  0042  3443               	retlw	67	;'C'
   675  0043  3443               	retlw	67	;'C'
   676  0044  3445               	retlw	69	;'E'
   677  0045  3453               	retlw	83	;'S'
   678  0046  3453               	retlw	83	;'S'
   679  0047  3400               	retlw	0
   680  0048                     STR_6:	
   681  0048  3441               	retlw	65	;'A'
   682  0049  3443               	retlw	67	;'C'
   683  004A  3443               	retlw	67	;'C'
   684  004B  3445               	retlw	69	;'E'
   685  004C  3453               	retlw	83	;'S'
   686  004D  3453               	retlw	83	;'S'
   687  004E  3400               	retlw	0
   688  0017                     
   689                           ; #config settings
   690  0000                     
   691                           	psect	cinit
   692  07E2                     start_initialization:	
   693  07E2                     __initialization:	
   694                           
   695                           ; Initialize objects allocated to BANK1
   696  07E2  1383               	bcf	3,7	;select IRP bank0
   697  07E3  30B0               	movlw	low (__pdataBANK1+16)
   698  07E4  00FD               	movwf	btemp+-1
   699  07E5  3000               	movlw	high __pidataBANK1
   700  07E6  00FE               	movwf	btemp
   701  07E7  307A               	movlw	low __pidataBANK1
   702  07E8  00FF               	movwf	btemp+1
   703  07E9  30A0               	movlw	low __pdataBANK1
   704  07EA  0084               	movwf	4
   705  07EB  120A  118A  208E  120A  118A  	fcall	init_ram0
   706                           
   707                           ; Initialize objects allocated to BANK0
   708  07F0  120A  158A  27FF  120A  118A  	fcall	__pidataBANK0	;fetch initializer
   709  07F5  00EA               	movwf	__pdataBANK0& (0+127)
   710                           
   711                           ; Clear objects allocated to BANK0
   712  07F6  304E               	movlw	low __pbssBANK0
   713  07F7  0084               	movwf	4
   714  07F8  3069               	movlw	low (__pbssBANK0+27)
   715  07F9  120A  118A  204F   	fcall	clear_ram0
   716  07FC                     end_of_initialization:	
   717                           ;End of C runtime variable initialization code
   718                           
   719  07FC                     __end_of__initialization:	
   720  07FC  0183               	clrf	3
   721  07FD  120A  118A  2861   	ljmp	_main	;jump to C main() function
   722                           
   723                           	psect	bssBANK0
   724  004E                     __pbssBANK0:	
   725  004E                     Convert_IntToString@nStr:	
   726  004E                     	ds	11
   727  0059                     LCD_update@i:	
   728  0059                     	ds	1
   729  005A                     LCD_update@direction:	
   730  005A                     	ds	1
   731  005B                     LCD_update@LCD_counter:	
   732  005B                     	ds	1
   733  005C                     _user_password:	
   734  005C                     	ds	6
   735  0062                     _REAL_PASSWORD:	
   736  0062                     	ds	6
   737  0068                     _flag:	
   738  0068                     	ds	1
   739                           
   740                           	psect	dataBANK0
   741  006A                     __pdataBANK0:	
   742  006A                     LCD_update@Limit:	
   743  006A                     	ds	1
   744                           
   745                           	psect	dataBANK1
   746  00A0                     __pdataBANK1:	
   747  00A0                     _KEYS:	
   748  00A0                     	ds	16
   749                           
   750                           	psect	inittext
   751  008A                     init_fetch0:	
   752                           ;	Called with low address in FSR and high address in W
   753                           
   754  008A  087E               	movf	126,w
   755  008B  008A               	movwf	10
   756  008C  087F               	movf	127,w
   757  008D  0082               	movwf	2
   758  008E                     init_ram0:	
   759                           ;Called with:
   760                           ;	high address of idata address in btemp 
   761                           ;	low address of idata address in btemp+1 
   762                           ;	low address of data in FSR
   763                           ;	high address + 1 of data in btemp-1
   764                           
   765  008E  208A  120A  118A   	fcall	init_fetch0
   766  0091  0080               	movwf	0
   767  0092  0A84               	incf	4,f
   768  0093  0804               	movf	4,w
   769  0094  067D               	xorwf	125,w
   770  0095  1903               	btfsc	3,2
   771  0096  3400               	retlw	0
   772  0097  0AFF               	incf	127,f
   773  0098  1903               	btfsc	3,2
   774  0099  0AFE               	incf	126,f
   775  009A  288E               	goto	init_ram0
   776                           
   777                           	psect	clrtext
   778  004F                     clear_ram0:	
   779                           ;	Called with FSR containing the base address, and
   780                           ;	W with the last address+1
   781                           
   782  004F  0064               	clrwdt	;clear the watchdog before getting into this loop
   783  0050                     clrloop0:	
   784  0050  0180               	clrf	0	;clear RAM location pointed to by FSR
   785  0051  0A84               	incf	4,f	;increment pointer
   786  0052  0604               	xorwf	4,w	;XOR with final address
   787  0053  1903               	btfsc	3,2	;have we reached the end yet?
   788  0054  3400               	retlw	0	;all done for this memory range, return
   789  0055  0604               	xorwf	4,w	;XOR again to restore value
   790  0056  2850               	goto	clrloop0	;do the next byte
   791                           
   792                           	psect	cstackCOMMON
   793  0070                     __pcstackCOMMON:	
   794  0070                     ?_LCD_cmd:	
   795  0070                     ?_LCD_out:	
   796                           ; 1 bytes @ 0x0
   797                           
   798  0070                     ?_AC_init:	
   799                           ; 1 bytes @ 0x0
   800                           
   801  0070                     ?_AC_authentication:	
   802                           ; 1 bytes @ 0x0
   803                           
   804  0070                     ?_UTIL_STRcopy:	
   805                           ; 1 bytes @ 0x0
   806                           
   807  0070                     ?_KPAD_waitKey:	
   808                           ; 1 bytes @ 0x0
   809                           
   810  0070                     ?_LCD_init:	
   811                           ; 1 bytes @ 0x0
   812                           
   813  0070                     ?_LCD_clear:	
   814                           ; 1 bytes @ 0x0
   815                           
   816  0070                     ?_LCD_latch:	
   817                           ; 1 bytes @ 0x0
   818                           
   819  0070                     ??_LCD_latch:	
   820                           ; 1 bytes @ 0x0
   821                           
   822  0070                     ?_main:	
   823                           ; 1 bytes @ 0x0
   824                           
   825  0070                     ?_EEPROM_init:	
   826                           ; 1 bytes @ 0x0
   827                           
   828  0070                     ??_EEPROM_init:	
   829                           ; 1 bytes @ 0x0
   830                           
   831  0070                     ?_EEPROM_writeByte:	
   832                           ; 1 bytes @ 0x0
   833                           
   834  0070                     ?_EEPROM_readByte:	
   835                           ; 1 bytes @ 0x0
   836                           
   837  0070                     ?_PASSWORD_init:	
   838                           ; 1 bytes @ 0x0
   839                           
   840  0070                     ?_PASSWORD_read:	
   841                           ; 1 bytes @ 0x0
   842                           
   843  0070                     ?_PASSWORD_check:	
   844                           ; 1 bytes @ 0x0
   845                           
   846  0070                     ?_KPAD_init:	
   847                           ; 1 bytes @ 0x0
   848                           
   849  0070                     ??_KPAD_init:	
   850                           ; 1 bytes @ 0x0
   851                           
   852  0070                     ?_KPAD_getKey:	
   853                           ; 1 bytes @ 0x0
   854                           
   855  0070                     ??_KPAD_getKey:	
   856                           ; 1 bytes @ 0x0
   857                           
   858  0070                     ?_UTIL_STRlength:	
   859                           ; 1 bytes @ 0x0
   860                           
   861  0070                     ?___lldiv:	
   862                           ; 2 bytes @ 0x0
   863                           
   864  0070                     ?___llmod:	
   865                           ; 4 bytes @ 0x0
   866                           
   867  0070                     EEPROM_init@state:	
   868                           ; 4 bytes @ 0x0
   869                           
   870  0070                     EEPROM_writeByte@data:	
   871                           ; 1 bytes @ 0x0
   872                           
   873  0070                     EEPROM_readByte@pData:	
   874                           ; 1 bytes @ 0x0
   875                           
   876  0070                     UTIL_STRcopy@destination:	
   877                           ; 1 bytes @ 0x0
   878                           
   879  0070                     ___lldiv@divisor:	
   880                           ; 1 bytes @ 0x0
   881                           
   882  0070                     ___llmod@divisor:	
   883                           ; 4 bytes @ 0x0
   884                           
   885                           
   886                           ; 4 bytes @ 0x0
   887  0070                     	ds	1
   888  0071                     ??_LCD_out:	
   889  0071                     ??_UTIL_STRcopy:	
   890                           ; 1 bytes @ 0x1
   891                           
   892  0071                     ??_EEPROM_writeByte:	
   893                           ; 1 bytes @ 0x1
   894                           
   895  0071                     ??_EEPROM_readByte:	
   896                           ; 1 bytes @ 0x1
   897                           
   898                           
   899                           ; 1 bytes @ 0x1
   900  0071                     	ds	1
   901  0072                     ??_UTIL_STRlength:	
   902  0072                     EEPROM_writeByte@address:	
   903                           ; 1 bytes @ 0x2
   904                           
   905  0072                     EEPROM_readByte@address:	
   906                           ; 1 bytes @ 0x2
   907                           
   908  0072                     UTIL_STRcopy@source:	
   909                           ; 1 bytes @ 0x2
   910                           
   911  0072                     _KPAD_init$293:	
   912                           ; 1 bytes @ 0x2
   913                           
   914                           
   915                           ; 2 bytes @ 0x2
   916  0072                     	ds	1
   917  0073                     ?_EEPROM_readStr:	
   918  0073                     ??_PASSWORD_init:	
   919                           ; 1 bytes @ 0x3
   920                           
   921  0073                     EEPROM_writeByte@state:	
   922                           ; 1 bytes @ 0x3
   923                           
   924  0073                     EEPROM_readStr@pStr:	
   925                           ; 1 bytes @ 0x3
   926                           
   927  0073                     UTIL_STRlength@len:	
   928                           ; 1 bytes @ 0x3
   929                           
   930                           
   931                           ; 2 bytes @ 0x3
   932  0073                     	ds	1
   933  0074                     ?_EEPROM_writeStr:	
   934  0074                     ??_EEPROM_readStr:	
   935                           ; 1 bytes @ 0x4
   936                           
   937  0074                     LCD_out@data:	
   938                           ; 1 bytes @ 0x4
   939                           
   940  0074                     EEPROM_writeStr@pStr:	
   941                           ; 1 bytes @ 0x4
   942                           
   943  0074                     PASSWORD_init@password:	
   944                           ; 1 bytes @ 0x4
   945                           
   946  0074                     KPAD_getKey@pKey:	
   947                           ; 1 bytes @ 0x4
   948                           
   949  0074                     _KPAD_init$294:	
   950                           ; 1 bytes @ 0x4
   951                           
   952  0074                     ___lldiv@dividend:	
   953                           ; 2 bytes @ 0x4
   954                           
   955  0074                     ___llmod@dividend:	
   956                           ; 4 bytes @ 0x4
   957                           
   958                           
   959                           ; 4 bytes @ 0x4
   960  0074                     	ds	1
   961  0075                     ??_LCD_cmd:	
   962  0075                     ??_EEPROM_writeStr:	
   963                           ; 1 bytes @ 0x5
   964                           
   965  0075                     UTIL_STRlength@pStr:	
   966                           ; 1 bytes @ 0x5
   967                           
   968  0075                     KPAD_getKey@key:	
   969                           ; 1 bytes @ 0x5
   970                           
   971                           
   972                           ; 1 bytes @ 0x5
   973  0075                     	ds	1
   974  0076                     ?_UTIL_STRcompare:	
   975  0076                     LCD_cmd@cmd:	
   976                           ; 1 bytes @ 0x6
   977                           
   978  0076                     EEPROM_writeStr@startAddress:	
   979                           ; 1 bytes @ 0x6
   980                           
   981  0076                     EEPROM_readStr@startAddress:	
   982                           ; 1 bytes @ 0x6
   983                           
   984  0076                     UTIL_STRcompare@strB:	
   985                           ; 1 bytes @ 0x6
   986                           
   987  0076                     KPAD_getKey@row:	
   988                           ; 1 bytes @ 0x6
   989                           
   990                           
   991                           ; 1 bytes @ 0x6
   992  0076                     	ds	1
   993  0077                     ?_LCD_goTo:	
   994  0077                     ??_UTIL_STRcompare:	
   995                           ; 1 bytes @ 0x7
   996                           
   997  0077                     ??_LCD_init:	
   998                           ; 1 bytes @ 0x7
   999                           
  1000  0077                     ??_LCD_clear:	
  1001                           ; 1 bytes @ 0x7
  1002                           
  1003  0077                     LCD_goTo@col:	
  1004                           ; 1 bytes @ 0x7
  1005                           
  1006  0077                     EEPROM_writeStr@i:	
  1007                           ; 1 bytes @ 0x7
  1008                           
  1009  0077                     EEPROM_readStr@i:	
  1010                           ; 1 bytes @ 0x7
  1011                           
  1012  0077                     KPAD_getKey@col:	
  1013                           ; 1 bytes @ 0x7
  1014                           
  1015                           
  1016                           ; 1 bytes @ 0x7
  1017  0077                     	ds	1
  1018  0078                     ??_LCD_goTo:	
  1019  0078                     ??_KPAD_waitKey:	
  1020                           ; 1 bytes @ 0x8
  1021                           
  1022  0078                     ??___lldiv:	
  1023                           ; 1 bytes @ 0x8
  1024                           
  1025  0078                     ??___llmod:	
  1026                           ; 1 bytes @ 0x8
  1027                           
  1028  0078                     EEPROM_readStr@ch:	
  1029                           ; 1 bytes @ 0x8
  1030                           
  1031  0078                     UTIL_STRcompare@res:	
  1032                           ; 1 bytes @ 0x8
  1033                           
  1034                           
  1035                           ; 1 bytes @ 0x8
  1036  0078                     	ds	1
  1037  0079                     LCD_init@mode:	
  1038  0079                     UTIL_STRcompare@strA:	
  1039                           ; 1 bytes @ 0x9
  1040                           
  1041  0079                     KPAD_waitKey@pKey:	
  1042                           ; 1 bytes @ 0x9
  1043                           
  1044  0079                     ___llmod@counter:	
  1045                           ; 1 bytes @ 0x9
  1046                           
  1047  0079                     ___lldiv@quotient:	
  1048                           ; 1 bytes @ 0x9
  1049                           
  1050                           
  1051                           ; 4 bytes @ 0x9
  1052  0079                     	ds	1
  1053  007A                     ??_AC_init:	
  1054  007A                     ??_PASSWORD_check:	
  1055                           ; 1 bytes @ 0xA
  1056                           
  1057  007A                     LCD_goTo@line:	
  1058                           ; 1 bytes @ 0xA
  1059                           
  1060  007A                     KPAD_waitKey@key:	
  1061                           ; 1 bytes @ 0xA
  1062                           
  1063                           
  1064                           ; 1 bytes @ 0xA
  1065  007A                     	ds	1
  1066  007B                     LCD_goTo@address:	
  1067                           
  1068                           ; 1 bytes @ 0xB
  1069  007B                     	ds	1
  1070  007C                     ?_LCD_char:	
  1071  007C                     LCD_char@line:	
  1072                           ; 1 bytes @ 0xC
  1073                           
  1074  007C                     PASSWORD_check@state:	
  1075                           ; 1 bytes @ 0xC
  1076                           
  1077                           
  1078                           ; 1 bytes @ 0xC
  1079  007C                     	ds	1
  1080  007D                     LCD_char@col:	
  1081  007D                     PASSWORD_check@password:	
  1082                           ; 1 bytes @ 0xD
  1083                           
  1084  007D                     ___lldiv@counter:	
  1085                           ; 1 bytes @ 0xD
  1086                           
  1087                           
  1088                           ; 1 bytes @ 0xD
  1089  007D                     	ds	1
  1090  007E                     ??_main:	
  1091                           
  1092                           	psect	cstackBANK0
  1093  0020                     __pcstackBANK0:	
  1094                           ; 1 bytes @ 0xE
  1095                           
  1096  0020                     ?_UTIL_INTtoSTR:	
  1097  0020                     ??_LCD_char:	
  1098                           ; 1 bytes @ 0x0
  1099                           
  1100  0020                     UTIL_INTtoSTR@num:	
  1101                           ; 1 bytes @ 0x0
  1102                           
  1103                           
  1104                           ; 4 bytes @ 0x0
  1105  0020                     	ds	1
  1106  0021                     LCD_char@ch:	
  1107                           
  1108                           ; 1 bytes @ 0x1
  1109  0021                     	ds	1
  1110  0022                     ?_LCD_str:	
  1111  0022                     ??_PASSWORD_read:	
  1112                           ; 1 bytes @ 0x2
  1113                           
  1114  0022                     LCD_str@str:	
  1115                           ; 1 bytes @ 0x2
  1116                           
  1117                           
  1118                           ; 2 bytes @ 0x2
  1119  0022                     	ds	1
  1120  0023                     PASSWORD_read@col:	
  1121                           
  1122                           ; 1 bytes @ 0x3
  1123  0023                     	ds	1
  1124  0024                     LCD_str@line:	
  1125  0024                     PASSWORD_read@pPassword:	
  1126                           ; 1 bytes @ 0x4
  1127                           
  1128  0024                     UTIL_INTtoSTR@ppStr:	
  1129                           ; 1 bytes @ 0x4
  1130                           
  1131                           
  1132                           ; 1 bytes @ 0x4
  1133  0024                     	ds	1
  1134  0025                     LCD_str@col:	
  1135  0025                     PASSWORD_read@key:	
  1136                           ; 1 bytes @ 0x5
  1137                           
  1138  0025                     UTIL_INTtoSTR@max:	
  1139                           ; 1 bytes @ 0x5
  1140                           
  1141                           
  1142                           ; 1 bytes @ 0x5
  1143  0025                     	ds	1
  1144  0026                     ??_UTIL_INTtoSTR:	
  1145  0026                     ??_LCD_str:	
  1146                           ; 1 bytes @ 0x6
  1147                           
  1148                           
  1149                           ; 1 bytes @ 0x6
  1150  0026                     	ds	2
  1151  0028                     ?_LCD_num:	
  1152  0028                     LCD_num@num:	
  1153                           ; 1 bytes @ 0x8
  1154                           
  1155                           
  1156                           ; 4 bytes @ 0x8
  1157  0028                     	ds	4
  1158  002C                     LCD_num@line:	
  1159                           
  1160                           ; 1 bytes @ 0xC
  1161  002C                     	ds	1
  1162  002D                     LCD_num@col:	
  1163                           
  1164                           ; 1 bytes @ 0xD
  1165  002D                     	ds	1
  1166  002E                     ??_LCD_num:	
  1167                           
  1168                           ; 1 bytes @ 0xE
  1169  002E                     	ds	2
  1170  0030                     LCD_num@str:	
  1171                           
  1172                           ; 17 bytes @ 0x10
  1173  0030                     	ds	17
  1174  0041                     LCD_num@pStr:	
  1175                           
  1176                           ; 1 bytes @ 0x21
  1177  0041                     	ds	1
  1178  0042                     ??_AC_authentication:	
  1179                           
  1180                           ; 1 bytes @ 0x22
  1181  0042                     	ds	5
  1182  0047                     AC_authentication@password:	
  1183                           
  1184                           ; 6 bytes @ 0x27
  1185  0047                     	ds	6
  1186  004D                     AC_authentication@i:	
  1187                           
  1188                           ; 1 bytes @ 0x2D
  1189  004D                     	ds	1
  1190                           
  1191                           	psect	maintext
  1192  0061                     __pmaintext:	
  1193 ;;
  1194 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
  1195 ;;
  1196 ;; *************** function _main *****************
  1197 ;; Defined at:
  1198 ;;		line 12 in file "EEPROM_TEST.c"
  1199 ;; Parameters:    Size  Location     Type
  1200 ;;		None
  1201 ;; Auto vars:     Size  Location     Type
  1202 ;;		None
  1203 ;; Return value:  Size  Location     Type
  1204 ;;                  1    wreg      void 
  1205 ;; Registers used:
  1206 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  1207 ;; Tracked objects:
  1208 ;;		On entry : B00/0
  1209 ;;		On exit  : 0/0
  1210 ;;		Unchanged: 0/0
  1211 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1212 ;;      Params:         0       0       0       0       0
  1213 ;;      Locals:         0       0       0       0       0
  1214 ;;      Temps:          0       0       0       0       0
  1215 ;;      Totals:         0       0       0       0       0
  1216 ;;Total ram usage:        0 bytes
  1217 ;; Hardware stack levels required when called:    8
  1218 ;; This function calls:
  1219 ;;		_AC_authentication
  1220 ;;		_AC_init
  1221 ;; This function is called by:
  1222 ;;		Startup code after reset
  1223 ;; This function uses a non-reentrant model
  1224 ;;
  1225                           
  1226                           
  1227                           ;psect for function _main
  1228  0061                     _main:	
  1229                           
  1230                           ;EEPROM_TEST.c: 14:     AC_init();
  1231                           
  1232                           ;incstack = 0
  1233                           ; Regs used in _main: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  1234  0061  120A  118A  20E7  120A  118A  	fcall	_AC_init
  1235                           
  1236                           ;EEPROM_TEST.c: 16:     AC_authentication();
  1237  0066  120A  118A  2583  120A  118A  	fcall	_AC_authentication
  1238  006B                     l96:	
  1239                           ;EEPROM_TEST.c: 18:     while(1);
  1240                           
  1241  006B  286B               	goto	l96
  1242  006C                     __end_of_main:	
  1243                           
  1244                           	psect	text1
  1245  00E7                     __ptext1:	
  1246 ;; *************** function _AC_init *****************
  1247 ;; Defined at:
  1248 ;;		line 28 in file "ACCESS_CTRL.c"
  1249 ;; Parameters:    Size  Location     Type
  1250 ;;		None
  1251 ;; Auto vars:     Size  Location     Type
  1252 ;;		None
  1253 ;; Return value:  Size  Location     Type
  1254 ;;                  1    wreg      void 
  1255 ;; Registers used:
  1256 ;;		wreg, status,2, status,0, pclath, cstack
  1257 ;; Tracked objects:
  1258 ;;		On entry : 0/0
  1259 ;;		On exit  : 0/0
  1260 ;;		Unchanged: 0/0
  1261 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1262 ;;      Params:         0       0       0       0       0
  1263 ;;      Locals:         0       0       0       0       0
  1264 ;;      Temps:          0       0       0       0       0
  1265 ;;      Totals:         0       0       0       0       0
  1266 ;;Total ram usage:        0 bytes
  1267 ;; Hardware stack levels used:    1
  1268 ;; Hardware stack levels required when called:    4
  1269 ;; This function calls:
  1270 ;;		_EEPROM_init
  1271 ;;		_KPAD_init
  1272 ;;		_LCD_init
  1273 ;; This function is called by:
  1274 ;;		_main
  1275 ;; This function uses a non-reentrant model
  1276 ;;
  1277                           
  1278                           
  1279                           ;psect for function _AC_init
  1280  00E7                     _AC_init:	
  1281                           
  1282                           ;ACCESS_CTRL.c: 30:     PCFG1 = 1;
  1283                           
  1284                           ;incstack = 0
  1285                           ; Regs used in _AC_init: [wreg+status,2+status,0+pclath+cstack]
  1286  00E7  1683               	bsf	3,5	;RP0=1, select bank1
  1287  00E8  1303               	bcf	3,6	;RP1=0, select bank1
  1288  00E9  149F               	bsf	31,1	;volatile
  1289                           
  1290                           ;ACCESS_CTRL.c: 31:     PCFG2 = 1;
  1291  00EA  151F               	bsf	31,2	;volatile
  1292                           
  1293                           ;ACCESS_CTRL.c: 32:     LCD_init(LCD_8_MODE);
  1294  00EB  3001               	movlw	1
  1295  00EC  120A  118A  24A5  120A  118A  	fcall	_LCD_init
  1296                           
  1297                           ;ACCESS_CTRL.c: 34:     KPAD_init();
  1298  00F1  120A  118A  21DC  120A  118A  	fcall	_KPAD_init
  1299                           
  1300                           ;ACCESS_CTRL.c: 35:     EEPROM_init(EEPROM_INT_DISABLE);
  1301  00F6  3001               	movlw	1
  1302  00F7  120A  118A  206C   	fcall	_EEPROM_init
  1303  00FA  0008               	return
  1304  00FB                     __end_of_AC_init:	
  1305                           
  1306                           	psect	text2
  1307  04A5                     __ptext2:	
  1308 ;; *************** function _LCD_init *****************
  1309 ;; Defined at:
  1310 ;;		line 84 in file "LCD.c"
  1311 ;; Parameters:    Size  Location     Type
  1312 ;;  mode            1    wreg     enum E891
  1313 ;; Auto vars:     Size  Location     Type
  1314 ;;  mode            1    9[COMMON] enum E891
  1315 ;; Return value:  Size  Location     Type
  1316 ;;                  1    wreg      void 
  1317 ;; Registers used:
  1318 ;;		wreg, status,2, status,0, pclath, cstack
  1319 ;; Tracked objects:
  1320 ;;		On entry : 0/0
  1321 ;;		On exit  : 0/0
  1322 ;;		Unchanged: 0/0
  1323 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1324 ;;      Params:         0       0       0       0       0
  1325 ;;      Locals:         1       0       0       0       0
  1326 ;;      Temps:          2       0       0       0       0
  1327 ;;      Totals:         3       0       0       0       0
  1328 ;;Total ram usage:        3 bytes
  1329 ;; Hardware stack levels used:    1
  1330 ;; Hardware stack levels required when called:    3
  1331 ;; This function calls:
  1332 ;;		_LCD_cmd
  1333 ;; This function is called by:
  1334 ;;		_AC_init
  1335 ;; This function uses a non-reentrant model
  1336 ;;
  1337                           
  1338                           
  1339                           ;psect for function _LCD_init
  1340  04A5                     _LCD_init:	
  1341                           
  1342                           ;incstack = 0
  1343                           ; Regs used in _LCD_init: [wreg+status,2+status,0+pclath+cstack]
  1344                           ;LCD_init@mode stored from wreg
  1345  04A5  00F9               	movwf	LCD_init@mode
  1346                           
  1347                           ;LCD.c: 87:     ((((((*((volatile tRegister8 *)(0x89))).Reg))) = (((((*((volatile tRegis
      +                          ter8 *)(0x89))).Reg)) & (~(1 << ((0))))) | (((0)) << ((0))))));
  1348  04A6  1683               	bsf	3,5	;RP0=1, select bank1
  1349  04A7  1303               	bcf	3,6	;RP1=0, select bank1
  1350  04A8  0809               	movf	9,w	;volatile
  1351  04A9  39FE               	andlw	254
  1352  04AA  00F7               	movwf	??_LCD_init
  1353  04AB  0877               	movf	??_LCD_init,w
  1354  04AC  0089               	movwf	9	;volatile
  1355                           
  1356                           ;LCD.c: 90:     ((((((*((volatile tRegister8 *)(0x89))).Reg))) = (((((*((volatile tRegis
      +                          ter8 *)(0x89))).Reg)) & (~(1 << ((1))))) | (((0)) << ((1))))));
  1357  04AD  0809               	movf	9,w	;volatile
  1358  04AE  39FD               	andlw	253
  1359  04AF  00F7               	movwf	??_LCD_init
  1360  04B0  0877               	movf	??_LCD_init,w
  1361  04B1  0089               	movwf	9	;volatile
  1362                           
  1363                           ;LCD.c: 93:     ((((((*((volatile tRegister8 *)(0x88))).Reg))) = (((((*((volatile tRegis
      +                          ter8 *)(0x88))).Reg)) & (~(1 << ((0))))) | (((0)) << ((0))))));
  1364  04B2  0808               	movf	8,w	;volatile
  1365  04B3  39FE               	andlw	254
  1366  04B4  00F7               	movwf	??_LCD_init
  1367  04B5  0877               	movf	??_LCD_init,w
  1368  04B6  0088               	movwf	8	;volatile
  1369                           
  1370                           ;LCD.c: 94:     ((((((*((volatile tRegister8 *)(0x08))).Reg))) = (((((*((volatile tRegis
      +                          ter8 *)(0x08))).Reg)) & (~(1 << ((0))))) | ((0) << ((0))))));
  1371  04B7  1283               	bcf	3,5	;RP0=0, select bank0
  1372  04B8  1303               	bcf	3,6	;RP1=0, select bank0
  1373  04B9  0808               	movf	8,w	;volatile
  1374  04BA  39FE               	andlw	254
  1375  04BB  00F7               	movwf	??_LCD_init
  1376  04BC  0877               	movf	??_LCD_init,w
  1377  04BD  0088               	movwf	8	;volatile
  1378                           
  1379                           ;LCD.c: 96:     ((((((*((volatile tRegister8 *)(0x88))).Reg))) = (((((*((volatile tRegis
      +                          ter8 *)(0x88))).Reg)) & (~(1 << ((1))))) | (((0)) << ((1))))));
  1380  04BE  1683               	bsf	3,5	;RP0=1, select bank1
  1381  04BF  1303               	bcf	3,6	;RP1=0, select bank1
  1382  04C0  0808               	movf	8,w	;volatile
  1383  04C1  39FD               	andlw	253
  1384  04C2  00F7               	movwf	??_LCD_init
  1385  04C3  0877               	movf	??_LCD_init,w
  1386  04C4  0088               	movwf	8	;volatile
  1387                           
  1388                           ;LCD.c: 97:     ((((((*((volatile tRegister8 *)(0x08))).Reg))) = (((((*((volatile tRegis
      +                          ter8 *)(0x08))).Reg)) & (~(1 << ((1))))) | ((0) << ((1))))));
  1389  04C5  1283               	bcf	3,5	;RP0=0, select bank0
  1390  04C6  1303               	bcf	3,6	;RP1=0, select bank0
  1391  04C7  0808               	movf	8,w	;volatile
  1392  04C8  39FD               	andlw	253
  1393  04C9  00F7               	movwf	??_LCD_init
  1394  04CA  0877               	movf	??_LCD_init,w
  1395  04CB  0088               	movwf	8	;volatile
  1396                           
  1397                           ;LCD.c: 99:     ((((((*((volatile tRegister8 *)(0x88))).Reg))) = (((((*((volatile tRegis
      +                          ter8 *)(0x88))).Reg)) & (~(1 << ((2))))) | (((0)) << ((2))))));
  1398  04CC  1683               	bsf	3,5	;RP0=1, select bank1
  1399  04CD  1303               	bcf	3,6	;RP1=0, select bank1
  1400  04CE  0808               	movf	8,w	;volatile
  1401  04CF  39FB               	andlw	251
  1402  04D0  00F7               	movwf	??_LCD_init
  1403  04D1  0877               	movf	??_LCD_init,w
  1404  04D2  0088               	movwf	8	;volatile
  1405                           
  1406                           ;LCD.c: 100:     ((((((*((volatile tRegister8 *)(0x08))).Reg))) = (((((*((volatile tRegi
      +                          ster8 *)(0x08))).Reg)) & (~(1 << ((2))))) | ((0) << ((2))))));
  1407  04D3  1283               	bcf	3,5	;RP0=0, select bank0
  1408  04D4  1303               	bcf	3,6	;RP1=0, select bank0
  1409  04D5  0808               	movf	8,w	;volatile
  1410  04D6  39FB               	andlw	251
  1411  04D7  00F7               	movwf	??_LCD_init
  1412  04D8  0877               	movf	??_LCD_init,w
  1413  04D9  0088               	movwf	8	;volatile
  1414                           
  1415                           ;LCD.c: 102:     ((((((*((volatile tRegister8 *)(0x88))).Reg))) = (((((*((volatile tRegi
      +                          ster8 *)(0x88))).Reg)) & (~(1 << ((3))))) | (((0)) << ((3))))));
  1416  04DA  1683               	bsf	3,5	;RP0=1, select bank1
  1417  04DB  1303               	bcf	3,6	;RP1=0, select bank1
  1418  04DC  0808               	movf	8,w	;volatile
  1419  04DD  39F7               	andlw	247
  1420  04DE  00F7               	movwf	??_LCD_init
  1421  04DF  0877               	movf	??_LCD_init,w
  1422  04E0  0088               	movwf	8	;volatile
  1423                           
  1424                           ;LCD.c: 103:     ((((((*((volatile tRegister8 *)(0x08))).Reg))) = (((((*((volatile tRegi
      +                          ster8 *)(0x08))).Reg)) & (~(1 << ((3))))) | ((0) << ((3))))));
  1425  04E1  1283               	bcf	3,5	;RP0=0, select bank0
  1426  04E2  1303               	bcf	3,6	;RP1=0, select bank0
  1427  04E3  0808               	movf	8,w	;volatile
  1428  04E4  39F7               	andlw	247
  1429  04E5  00F7               	movwf	??_LCD_init
  1430  04E6  0877               	movf	??_LCD_init,w
  1431  04E7  0088               	movwf	8	;volatile
  1432                           
  1433                           ;LCD.c: 105:     currentMode = mode;
  1434  04E8  0879               	movf	LCD_init@mode,w
  1435  04E9  00F7               	movwf	??_LCD_init
  1436  04EA  0877               	movf	??_LCD_init,w
  1437  04EB  00E9               	movwf	_currentMode
  1438                           
  1439                           ;LCD.c: 107:     if(LCD_8_MODE == mode){
  1440  04EC  0379               	decf	LCD_init@mode,w
  1441  04ED  1D03               	btfss	3,2
  1442  04EE  2D27               	goto	l1677
  1443                           
  1444                           ;LCD.c: 108:         ((((((*((volatile tRegister8 *)(0x88))).Reg))) = (((((*((volatile t
      +                          Register8 *)(0x88))).Reg)) & (~(1 << ((4))))) | (((0)) << ((4))))));
  1445  04EF  1683               	bsf	3,5	;RP0=1, select bank1
  1446  04F0  1303               	bcf	3,6	;RP1=0, select bank1
  1447  04F1  0808               	movf	8,w	;volatile
  1448  04F2  39EF               	andlw	239
  1449  04F3  00F7               	movwf	??_LCD_init
  1450  04F4  0877               	movf	??_LCD_init,w
  1451  04F5  0088               	movwf	8	;volatile
  1452                           
  1453                           ;LCD.c: 109:         ((((((*((volatile tRegister8 *)(0x08))).Reg))) = (((((*((volatile t
      +                          Register8 *)(0x08))).Reg)) & (~(1 << ((4))))) | ((0) << ((4))))));
  1454  04F6  1283               	bcf	3,5	;RP0=0, select bank0
  1455  04F7  1303               	bcf	3,6	;RP1=0, select bank0
  1456  04F8  0808               	movf	8,w	;volatile
  1457  04F9  39EF               	andlw	239
  1458  04FA  00F7               	movwf	??_LCD_init
  1459  04FB  0877               	movf	??_LCD_init,w
  1460  04FC  0088               	movwf	8	;volatile
  1461                           
  1462                           ;LCD.c: 111:         ((((((*((volatile tRegister8 *)(0x88))).Reg))) = (((((*((volatile t
      +                          Register8 *)(0x88))).Reg)) & (~(1 << ((5))))) | (((0)) << ((5))))));
  1463  04FD  1683               	bsf	3,5	;RP0=1, select bank1
  1464  04FE  1303               	bcf	3,6	;RP1=0, select bank1
  1465  04FF  0808               	movf	8,w	;volatile
  1466  0500  39DF               	andlw	223
  1467  0501  00F7               	movwf	??_LCD_init
  1468  0502  0877               	movf	??_LCD_init,w
  1469  0503  0088               	movwf	8	;volatile
  1470                           
  1471                           ;LCD.c: 112:         ((((((*((volatile tRegister8 *)(0x08))).Reg))) = (((((*((volatile t
      +                          Register8 *)(0x08))).Reg)) & (~(1 << ((5))))) | ((0) << ((5))))));
  1472  0504  1283               	bcf	3,5	;RP0=0, select bank0
  1473  0505  1303               	bcf	3,6	;RP1=0, select bank0
  1474  0506  0808               	movf	8,w	;volatile
  1475  0507  39DF               	andlw	223
  1476  0508  00F7               	movwf	??_LCD_init
  1477  0509  0877               	movf	??_LCD_init,w
  1478  050A  0088               	movwf	8	;volatile
  1479                           
  1480                           ;LCD.c: 114:         ((((((*((volatile tRegister8 *)(0x88))).Reg))) = (((((*((volatile t
      +                          Register8 *)(0x88))).Reg)) & (~(1 << ((6))))) | (((0)) << ((6))))));
  1481  050B  1683               	bsf	3,5	;RP0=1, select bank1
  1482  050C  1303               	bcf	3,6	;RP1=0, select bank1
  1483  050D  0808               	movf	8,w	;volatile
  1484  050E  39BF               	andlw	191
  1485  050F  00F7               	movwf	??_LCD_init
  1486  0510  0877               	movf	??_LCD_init,w
  1487  0511  0088               	movwf	8	;volatile
  1488                           
  1489                           ;LCD.c: 115:         ((((((*((volatile tRegister8 *)(0x08))).Reg))) = (((((*((volatile t
      +                          Register8 *)(0x08))).Reg)) & (~(1 << ((6))))) | ((0) << ((6))))));
  1490  0512  1283               	bcf	3,5	;RP0=0, select bank0
  1491  0513  1303               	bcf	3,6	;RP1=0, select bank0
  1492  0514  0808               	movf	8,w	;volatile
  1493  0515  39BF               	andlw	191
  1494  0516  00F7               	movwf	??_LCD_init
  1495  0517  0877               	movf	??_LCD_init,w
  1496  0518  0088               	movwf	8	;volatile
  1497                           
  1498                           ;LCD.c: 117:         ((((((*((volatile tRegister8 *)(0x88))).Reg))) = (((((*((volatile t
      +                          Register8 *)(0x88))).Reg)) & (~(1 << ((7))))) | (((0)) << ((7))))));
  1499  0519  1683               	bsf	3,5	;RP0=1, select bank1
  1500  051A  1303               	bcf	3,6	;RP1=0, select bank1
  1501  051B  0808               	movf	8,w	;volatile
  1502  051C  397F               	andlw	127
  1503  051D  00F7               	movwf	??_LCD_init
  1504  051E  0877               	movf	??_LCD_init,w
  1505  051F  0088               	movwf	8	;volatile
  1506                           
  1507                           ;LCD.c: 118:         ((((((*((volatile tRegister8 *)(0x08))).Reg))) = (((((*((volatile t
      +                          Register8 *)(0x08))).Reg)) & (~(1 << ((7))))) | ((0) << ((7))))));
  1508  0520  1283               	bcf	3,5	;RP0=0, select bank0
  1509  0521  1303               	bcf	3,6	;RP1=0, select bank0
  1510  0522  0808               	movf	8,w	;volatile
  1511  0523  397F               	andlw	127
  1512  0524  00F7               	movwf	??_LCD_init
  1513  0525  0877               	movf	??_LCD_init,w
  1514  0526  0088               	movwf	8	;volatile
  1515  0527                     l1677:	
  1516                           
  1517                           ;LCD.c: 123:     _delay((unsigned long)((20)*(8000000/4000.0)));
  1518  0527  3034               	movlw	52
  1519  0528  00F8               	movwf	??_LCD_init+1
  1520  0529  30F1               	movlw	241
  1521  052A  00F7               	movwf	??_LCD_init
  1522  052B                     u1887:	
  1523  052B  0BF7               	decfsz	??_LCD_init,f
  1524  052C  2D2B               	goto	u1887
  1525  052D  0BF8               	decfsz	??_LCD_init+1,f
  1526  052E  2D2B               	goto	u1887
  1527  052F  2D30               	nop2
  1528                           
  1529                           ;LCD.c: 124:     LCD_cmd((0x30));
  1530  0530  3030               	movlw	48
  1531  0531  120A  118A  20AD  120A  118A  	fcall	_LCD_cmd
  1532                           
  1533                           ;LCD.c: 125:     _delay((unsigned long)((5)*(8000000/4000.0)));
  1534  0536  300D               	movlw	13
  1535  0537  00F8               	movwf	??_LCD_init+1
  1536  0538  30FB               	movlw	251
  1537  0539  00F7               	movwf	??_LCD_init
  1538  053A                     u1897:	
  1539  053A  0BF7               	decfsz	??_LCD_init,f
  1540  053B  2D3A               	goto	u1897
  1541  053C  0BF8               	decfsz	??_LCD_init+1,f
  1542  053D  2D3A               	goto	u1897
  1543  053E  2D3F               	nop2
  1544                           
  1545                           ;LCD.c: 126:     LCD_cmd((0x30));
  1546  053F  3030               	movlw	48
  1547  0540  120A  118A  20AD  120A  118A  	fcall	_LCD_cmd
  1548                           
  1549                           ;LCD.c: 127:     _delay((unsigned long)((1)*(8000000/4000.0)));
  1550  0545  3003               	movlw	3
  1551  0546  00F8               	movwf	??_LCD_init+1
  1552  0547  3097               	movlw	151
  1553  0548  00F7               	movwf	??_LCD_init
  1554  0549                     u1907:	
  1555  0549  0BF7               	decfsz	??_LCD_init,f
  1556  054A  2D49               	goto	u1907
  1557  054B  0BF8               	decfsz	??_LCD_init+1,f
  1558  054C  2D49               	goto	u1907
  1559  054D  2D4E               	nop2
  1560                           
  1561                           ;LCD.c: 128:     LCD_cmd((0x30));
  1562  054E  3030               	movlw	48
  1563  054F  120A  118A  20AD  120A  118A  	fcall	_LCD_cmd
  1564                           
  1565                           ;LCD.c: 130:     if(LCD_8_MODE == currentMode){
  1566  0554  1283               	bcf	3,5	;RP0=0, select bank0
  1567  0555  1303               	bcf	3,6	;RP1=0, select bank0
  1568  0556  0369               	decf	_currentMode,w
  1569  0557  1D03               	btfss	3,2
  1570  0558  2D5B               	goto	l1693
  1571                           
  1572                           ;LCD.c: 133:         LCD_cmd((0x20) | (0x10) | (0x08) | (0x00));
  1573  0559  3038               	movlw	56
  1574  055A  2D68               	goto	L1
  1575  055B                     l1693:	
  1576                           ;LCD.c: 135:     }else {
  1577                           
  1578                           
  1579                           ;LCD.c: 138:         LCD_cmd((0x33));
  1580  055B  3033               	movlw	51
  1581  055C  120A  118A  20AD  120A  118A  	fcall	_LCD_cmd
  1582                           
  1583                           ;LCD.c: 139:         LCD_cmd((0x32));
  1584  0561  3032               	movlw	50
  1585  0562  120A  118A  20AD  120A  118A  	fcall	_LCD_cmd
  1586                           
  1587                           ;LCD.c: 140:         LCD_cmd((0x20) | (0x00) | (0x08) | (0x00));
  1588  0567  3028               	movlw	40
  1589  0568                     L1:	
  1590  0568  120A  118A  20AD  120A  118A  	fcall	_LCD_cmd
  1591                           
  1592                           ;LCD.c: 144:    LCD_cmd((0x08) | (0x04) | (0x00) | (0x00));
  1593                           
  1594                           ;LCD.c: 141:     }
  1595  056D  300C               	movlw	12
  1596  056E  120A  118A  20AD  120A  118A  	fcall	_LCD_cmd
  1597                           
  1598                           ;LCD.c: 147:     LCD_cmd((0x01));
  1599  0573  3001               	movlw	1
  1600  0574  120A  118A  20AD  120A  118A  	fcall	_LCD_cmd
  1601                           
  1602                           ;LCD.c: 148:     _delay((unsigned long)((2)*(8000000/4000.0)));
  1603  0579  3006               	movlw	6
  1604  057A  00F8               	movwf	??_LCD_init+1
  1605  057B  3030               	movlw	48
  1606  057C  00F7               	movwf	??_LCD_init
  1607  057D                     u1917:	
  1608  057D  0BF7               	decfsz	??_LCD_init,f
  1609  057E  2D7D               	goto	u1917
  1610  057F  0BF8               	decfsz	??_LCD_init+1,f
  1611  0580  2D7D               	goto	u1917
  1612  0581  0000               	nop
  1613  0582  0008               	return
  1614  0583                     __end_of_LCD_init:	
  1615                           
  1616                           	psect	text3
  1617  01DC                     __ptext3:	
  1618 ;; *************** function _KPAD_init *****************
  1619 ;; Defined at:
  1620 ;;		line 55 in file "KPAD.c"
  1621 ;; Parameters:    Size  Location     Type
  1622 ;;		None
  1623 ;; Auto vars:     Size  Location     Type
  1624 ;;		None
  1625 ;; Return value:  Size  Location     Type
  1626 ;;                  1    wreg      void 
  1627 ;; Registers used:
  1628 ;;		wreg, status,2
  1629 ;; Tracked objects:
  1630 ;;		On entry : 0/0
  1631 ;;		On exit  : 0/0
  1632 ;;		Unchanged: 0/0
  1633 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1634 ;;      Params:         0       0       0       0       0
  1635 ;;      Locals:         4       0       0       0       0
  1636 ;;      Temps:          2       0       0       0       0
  1637 ;;      Totals:         6       0       0       0       0
  1638 ;;Total ram usage:        6 bytes
  1639 ;; Hardware stack levels used:    1
  1640 ;; This function calls:
  1641 ;;		Nothing
  1642 ;; This function is called by:
  1643 ;;		_AC_init
  1644 ;; This function uses a non-reentrant model
  1645 ;;
  1646                           
  1647                           
  1648                           ;psect for function _KPAD_init
  1649  01DC                     _KPAD_init:	
  1650                           
  1651                           ;KPAD.c: 59:     ((((*((volatile tRegister8 *)(0x86))).Reg)) = (((1))) ? ((((*((volatile
      +                           tRegister8 *)(0x86))).Reg)) | 0x0F) : ((((*((volatile tRegister8 *)(0x86))).Reg)) & 0xF
      +                          0));
  1652                           
  1653                           ;incstack = 0
  1654                           ; Regs used in _KPAD_init: [wreg+status,2]
  1655  01DC  300F               	movlw	15
  1656  01DD  1683               	bsf	3,5	;RP0=1, select bank1
  1657  01DE  1303               	bcf	3,6	;RP1=0, select bank1
  1658  01DF  0406               	iorwf	6,w	;volatile
  1659  01E0  00F0               	movwf	??_KPAD_init
  1660  01E1  3000               	movlw	0
  1661  01E2  00F1               	movwf	??_KPAD_init+1
  1662  01E3  0870               	movf	??_KPAD_init,w
  1663  01E4  00F2               	movwf	_KPAD_init$293
  1664  01E5  0871               	movf	??_KPAD_init+1,w
  1665  01E6  00F3               	movwf	_KPAD_init$293+1
  1666                           
  1667                           ;KPAD.c: 62:     ((((*((volatile tRegister8 *)(0x86))).Reg)) = (((0))) ? ((((*((volatile
      +                           tRegister8 *)(0x86))).Reg)) | 0xF0) : ((((*((volatile tRegister8 *)(0x86))).Reg)) & 0x0
      +                          F));
  1668  01E7  0872               	movf	_KPAD_init$293,w
  1669  01E8  00F0               	movwf	??_KPAD_init
  1670  01E9  0870               	movf	??_KPAD_init,w
  1671  01EA  0086               	movwf	6	;volatile
  1672  01EB  0806               	movf	6,w	;volatile
  1673  01EC  390F               	andlw	15
  1674  01ED  00F0               	movwf	??_KPAD_init
  1675  01EE  01F1               	clrf	??_KPAD_init+1
  1676  01EF  0870               	movf	??_KPAD_init,w
  1677  01F0  00F4               	movwf	_KPAD_init$294
  1678  01F1  0871               	movf	??_KPAD_init+1,w
  1679  01F2  00F5               	movwf	_KPAD_init$294+1
  1680  01F3  0874               	movf	_KPAD_init$294,w
  1681  01F4  00F0               	movwf	??_KPAD_init
  1682  01F5  0870               	movf	??_KPAD_init,w
  1683  01F6  0086               	movwf	6	;volatile
  1684                           
  1685                           ;KPAD.c: 66:     ((((*((volatile tRegister8 *)(0x06))).Reg)) = ((((*((volatile tRegister
      +                          8 *)(0x06))).Reg)) & 0x0F) | ((0x0F) << 4) );
  1686  01F7  1283               	bcf	3,5	;RP0=0, select bank0
  1687  01F8  1303               	bcf	3,6	;RP1=0, select bank0
  1688  01F9  0806               	movf	6,w	;volatile
  1689  01FA  390F               	andlw	15
  1690  01FB  38F0               	iorlw	240
  1691  01FC  00F0               	movwf	??_KPAD_init
  1692  01FD  0870               	movf	??_KPAD_init,w
  1693  01FE  0086               	movwf	6	;volatile
  1694                           
  1695                           ;KPAD.c: 69:     ((*((volatile tRegister8 *)(0x81))).Bits.BIT7 = 0);
  1696  01FF  1683               	bsf	3,5	;RP0=1, select bank1
  1697  0200  1303               	bcf	3,6	;RP1=0, select bank1
  1698  0201  1381               	bcf	1,7	;volatile
  1699  0202  0008               	return
  1700  0203                     __end_of_KPAD_init:	
  1701                           
  1702                           	psect	text4
  1703  006C                     __ptext4:	
  1704 ;; *************** function _EEPROM_init *****************
  1705 ;; Defined at:
  1706 ;;		line 16 in file "EEPROM.c"
  1707 ;; Parameters:    Size  Location     Type
  1708 ;;  state           1    wreg     enum E891
  1709 ;; Auto vars:     Size  Location     Type
  1710 ;;  state           1    0[COMMON] enum E891
  1711 ;; Return value:  Size  Location     Type
  1712 ;;                  1    wreg      void 
  1713 ;; Registers used:
  1714 ;;		wreg, status,2, status,0
  1715 ;; Tracked objects:
  1716 ;;		On entry : 0/0
  1717 ;;		On exit  : 0/0
  1718 ;;		Unchanged: 0/0
  1719 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1720 ;;      Params:         0       0       0       0       0
  1721 ;;      Locals:         1       0       0       0       0
  1722 ;;      Temps:          0       0       0       0       0
  1723 ;;      Totals:         1       0       0       0       0
  1724 ;;Total ram usage:        1 bytes
  1725 ;; Hardware stack levels used:    1
  1726 ;; This function calls:
  1727 ;;		Nothing
  1728 ;; This function is called by:
  1729 ;;		_AC_init
  1730 ;; This function uses a non-reentrant model
  1731 ;;
  1732                           
  1733                           
  1734                           ;psect for function _EEPROM_init
  1735  006C                     _EEPROM_init:	
  1736                           
  1737                           ;incstack = 0
  1738                           ; Regs used in _EEPROM_init: [wreg+status,2+status,0]
  1739                           ;EEPROM_init@state stored from wreg
  1740  006C  00F0               	movwf	EEPROM_init@state
  1741                           
  1742                           ;EEPROM.c: 18:     if(state == EEPROM_INT_ENABLE){
  1743  006D  0870               	movf	EEPROM_init@state,w
  1744  006E  1D03               	btfss	3,2
  1745  006F  2876               	goto	l104
  1746                           
  1747                           ;EEPROM.c: 19:         ((*((volatile tRegister8 *)(0x8D))).Bits.BIT4 = 1);
  1748  0070  1683               	bsf	3,5	;RP0=1, select bank1
  1749  0071  1303               	bcf	3,6	;RP1=0, select bank1
  1750  0072  160D               	bsf	13,4	;volatile
  1751                           
  1752                           ;EEPROM.c: 20:         ((*((volatile tRegister8 *)(0x0B))).Bits.BIT6 = 1);
  1753  0073  170B               	bsf	11,6	;volatile
  1754                           
  1755                           ;EEPROM.c: 21:         ((*((volatile tRegister8 *)(0x0B))).Bits.BIT7 = 1);
  1756  0074  178B               	bsf	11,7	;volatile
  1757                           
  1758                           ;EEPROM.c: 22:     }else {
  1759  0075  0008               	return
  1760  0076                     l104:	
  1761                           
  1762                           ;EEPROM.c: 23:         ((*((volatile tRegister8 *)(0x8D))).Bits.BIT4 = 0);
  1763  0076  1683               	bsf	3,5	;RP0=1, select bank1
  1764  0077  1303               	bcf	3,6	;RP1=0, select bank1
  1765  0078  120D               	bcf	13,4	;volatile
  1766  0079  0008               	return
  1767  007A                     __end_of_EEPROM_init:	
  1768                           
  1769                           	psect	text5
  1770  0583                     __ptext5:	
  1771 ;; *************** function _AC_authentication *****************
  1772 ;; Defined at:
  1773 ;;		line 39 in file "ACCESS_CTRL.c"
  1774 ;; Parameters:    Size  Location     Type
  1775 ;;		None
  1776 ;; Auto vars:     Size  Location     Type
  1777 ;;  password        6   39[BANK0 ] unsigned char [6]
  1778 ;;  i               1   45[BANK0 ] unsigned char 
  1779 ;; Return value:  Size  Location     Type
  1780 ;;                  1    wreg      void 
  1781 ;; Registers used:
  1782 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  1783 ;; Tracked objects:
  1784 ;;		On entry : 0/0
  1785 ;;		On exit  : 0/0
  1786 ;;		Unchanged: 0/0
  1787 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1788 ;;      Params:         0       0       0       0       0
  1789 ;;      Locals:         0       7       0       0       0
  1790 ;;      Temps:          0       5       0       0       0
  1791 ;;      Totals:         0      12       0       0       0
  1792 ;;Total ram usage:       12 bytes
  1793 ;; Hardware stack levels used:    1
  1794 ;; Hardware stack levels required when called:    7
  1795 ;; This function calls:
  1796 ;;		_EEPROM_readByte
  1797 ;;		_EEPROM_readStr
  1798 ;;		_EEPROM_writeByte
  1799 ;;		_EEPROM_writeStr
  1800 ;;		_LCD_clear
  1801 ;;		_LCD_num
  1802 ;;		_LCD_str
  1803 ;;		_PASSWORD_check
  1804 ;;		_PASSWORD_init
  1805 ;;		_PASSWORD_read
  1806 ;; This function is called by:
  1807 ;;		_main
  1808 ;; This function uses a non-reentrant model
  1809 ;;
  1810                           
  1811                           
  1812                           ;psect for function _AC_authentication
  1813  0583                     _AC_authentication:	
  1814                           
  1815                           ;ACCESS_CTRL.c: 41:     EEPROM_readByte((0x00),&flag);
  1816                           
  1817                           ;incstack = 0
  1818                           ; Regs used in _AC_authentication: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  1819  0583  3068               	movlw	(low (_flag| 0))& (0+255)
  1820  0584  1283               	bcf	3,5	;RP0=0, select bank0
  1821  0585  1303               	bcf	3,6	;RP1=0, select bank0
  1822  0586  00C2               	movwf	??_AC_authentication
  1823  0587  0842               	movf	??_AC_authentication,w
  1824  0588  00F0               	movwf	EEPROM_readByte@pData
  1825  0589  3000               	movlw	0
  1826  058A  120A  118A  2127  120A  118A  	fcall	_EEPROM_readByte
  1827                           
  1828                           ;ACCESS_CTRL.c: 43:     if(flag == (99)){
  1829  058F  3063               	movlw	99
  1830  0590  1283               	bcf	3,5	;RP0=0, select bank0
  1831  0591  1303               	bcf	3,6	;RP1=0, select bank0
  1832  0592  0668               	xorwf	_flag,w
  1833  0593  1D03               	btfss	3,2
  1834  0594  2E29               	goto	l1809
  1835                           
  1836                           ;ACCESS_CTRL.c: 44:             LCD_str("PASSWORD : ",L1,C1);
  1837  0595  3005               	movlw	(low (((STR_5+4)-__stringbase)| (0+32768)))& (0+255)
  1838  0596  00A2               	movwf	LCD_str@str
  1839  0597  3080               	movlw	128
  1840  0598  00A3               	movwf	LCD_str@str+1
  1841  0599  01A4               	clrf	LCD_str@line
  1842  059A  01A5               	clrf	LCD_str@col
  1843  059B  120A  118A  225A  120A  118A  	fcall	_LCD_str
  1844                           
  1845                           ;ACCESS_CTRL.c: 45:             tByte password[6];;ACCESS_CTRL.c: 46:             tByte 
      +                          i = 0;
  1846  05A0  1283               	bcf	3,5	;RP0=0, select bank0
  1847  05A1  1303               	bcf	3,6	;RP1=0, select bank0
  1848  05A2  01CD               	clrf	AC_authentication@i
  1849                           
  1850                           ;ACCESS_CTRL.c: 47:             EEPROM_readStr((0x50),password);
  1851  05A3  3047               	movlw	(low (AC_authentication@password| 0))& (0+255)
  1852  05A4  00C2               	movwf	??_AC_authentication
  1853  05A5  0842               	movf	??_AC_authentication,w
  1854  05A6  00F3               	movwf	EEPROM_readStr@pStr
  1855  05A7  3050               	movlw	80
  1856  05A8  120A  118A  2194  120A  118A  	fcall	_EEPROM_readStr
  1857                           
  1858                           ;ACCESS_CTRL.c: 48:             PASSWORD_init(password);
  1859  05AD  3047               	movlw	(low (AC_authentication@password| 0))& (0+255)
  1860  05AE  120A  118A  2057  120A  118A  	fcall	_PASSWORD_init
  1861  05B3                     l1787:	
  1862                           
  1863                           ;ACCESS_CTRL.c: 50:                 if(i > 0) {
  1864  05B3  1283               	bcf	3,5	;RP0=0, select bank0
  1865  05B4  1303               	bcf	3,6	;RP1=0, select bank0
  1866  05B5  084D               	movf	AC_authentication@i,w
  1867  05B6  1903               	btfsc	3,2
  1868  05B7  2E13               	goto	l1803
  1869                           
  1870                           ;ACCESS_CTRL.c: 51:                     LCD_clear();
  1871  05B8  120A  118A  20FB  120A  118A  	fcall	_LCD_clear
  1872                           
  1873                           ;ACCESS_CTRL.c: 52:                     LCD_str("ACCESS DENIED !",L1,C1);
  1874  05BD  3011               	movlw	(low ((STR_2-__stringbase)| (0+32768)))& (0+255)
  1875  05BE  1283               	bcf	3,5	;RP0=0, select bank0
  1876  05BF  1303               	bcf	3,6	;RP1=0, select bank0
  1877  05C0  00A2               	movwf	LCD_str@str
  1878  05C1  3080               	movlw	128
  1879  05C2  00A3               	movwf	LCD_str@str+1
  1880  05C3  01A4               	clrf	LCD_str@line
  1881  05C4  01A5               	clrf	LCD_str@col
  1882  05C5  120A  118A  225A  120A  118A  	fcall	_LCD_str
  1883                           
  1884                           ;ACCESS_CTRL.c: 53:                     LCD_str("Try Times : ",L2,C1);
  1885  05CA  3021               	movlw	(low ((STR_3-__stringbase)| (0+32768)))& (0+255)
  1886  05CB  1283               	bcf	3,5	;RP0=0, select bank0
  1887  05CC  1303               	bcf	3,6	;RP1=0, select bank0
  1888  05CD  00A2               	movwf	LCD_str@str
  1889  05CE  3080               	movlw	128
  1890  05CF  00A3               	movwf	LCD_str@str+1
  1891  05D0  01A4               	clrf	LCD_str@line
  1892  05D1  0AA4               	incf	LCD_str@line,f
  1893  05D2  01A5               	clrf	LCD_str@col
  1894  05D3  120A  118A  225A  120A  118A  	fcall	_LCD_str
  1895                           
  1896                           ;ACCESS_CTRL.c: 54:                     LCD_num(i,L2,C13);
  1897  05D8  1283               	bcf	3,5	;RP0=0, select bank0
  1898  05D9  1303               	bcf	3,6	;RP1=0, select bank0
  1899  05DA  084D               	movf	AC_authentication@i,w
  1900  05DB  00C2               	movwf	??_AC_authentication
  1901  05DC  01C3               	clrf	??_AC_authentication+1
  1902  05DD  01C4               	clrf	??_AC_authentication+2
  1903  05DE  01C5               	clrf	??_AC_authentication+3
  1904  05DF  0845               	movf	??_AC_authentication+3,w
  1905  05E0  00AB               	movwf	LCD_num@num+3
  1906  05E1  0844               	movf	??_AC_authentication+2,w
  1907  05E2  00AA               	movwf	LCD_num@num+2
  1908  05E3  0843               	movf	??_AC_authentication+1,w
  1909  05E4  00A9               	movwf	LCD_num@num+1
  1910  05E5  0842               	movf	??_AC_authentication,w
  1911  05E6  00A8               	movwf	LCD_num@num
  1912  05E7  01AC               	clrf	LCD_num@line
  1913  05E8  0AAC               	incf	LCD_num@line,f
  1914  05E9  300C               	movlw	12
  1915  05EA  00C6               	movwf	??_AC_authentication+4
  1916  05EB  0846               	movf	??_AC_authentication+4,w
  1917  05EC  00AD               	movwf	LCD_num@col
  1918  05ED  120A  118A  222D  120A  118A  	fcall	_LCD_num
  1919                           
  1920                           ;ACCESS_CTRL.c: 55:                     _delay((unsigned long)((3000)*(8000000/4000.0)))
      +                          ;
  1921  05F2  301F               	movlw	31
  1922  05F3  1283               	bcf	3,5	;RP0=0, select bank0
  1923  05F4  1303               	bcf	3,6	;RP1=0, select bank0
  1924  05F5  00C4               	movwf	??_AC_authentication+2
  1925  05F6  3071               	movlw	113
  1926  05F7  00C3               	movwf	??_AC_authentication+1
  1927  05F8  301D               	movlw	29
  1928  05F9  00C2               	movwf	??_AC_authentication
  1929  05FA                     u1927:	
  1930  05FA  0BC2               	decfsz	??_AC_authentication,f
  1931  05FB  2DFA               	goto	u1927
  1932  05FC  0BC3               	decfsz	??_AC_authentication+1,f
  1933  05FD  2DFA               	goto	u1927
  1934  05FE  0BC4               	decfsz	??_AC_authentication+2,f
  1935  05FF  2DFA               	goto	u1927
  1936  0600  2E01               	nop2
  1937                           
  1938                           ;ACCESS_CTRL.c: 56:                     LCD_clear();
  1939  0601  120A  118A  20FB  120A  118A  	fcall	_LCD_clear
  1940                           
  1941                           ;ACCESS_CTRL.c: 57:                     LCD_str("PASSWORD : ",L1,C1);
  1942  0606  3005               	movlw	(low (((STR_5+4)-__stringbase)| (0+32768)))& (0+255)
  1943  0607  1283               	bcf	3,5	;RP0=0, select bank0
  1944  0608  1303               	bcf	3,6	;RP1=0, select bank0
  1945  0609  00A2               	movwf	LCD_str@str
  1946  060A  3080               	movlw	128
  1947  060B  00A3               	movwf	LCD_str@str+1
  1948  060C  01A4               	clrf	LCD_str@line
  1949  060D  01A5               	clrf	LCD_str@col
  1950  060E  120A  118A  225A  120A  118A  	fcall	_LCD_str
  1951  0613                     l1803:	
  1952                           
  1953                           ;ACCESS_CTRL.c: 59:                 PASSWORD_read(user_password);
  1954  0613  305C               	movlw	(low (_user_password| 0))& (0+255)
  1955  0614  120A  118A  228B  120A  118A  	fcall	_PASSWORD_read
  1956                           
  1957                           ;ACCESS_CTRL.c: 60:                 i++;
  1958  0619  3001               	movlw	1
  1959  061A  1283               	bcf	3,5	;RP0=0, select bank0
  1960  061B  1303               	bcf	3,6	;RP1=0, select bank0
  1961  061C  00C2               	movwf	??_AC_authentication
  1962  061D  0842               	movf	??_AC_authentication,w
  1963  061E  07CD               	addwf	AC_authentication@i,f
  1964                           
  1965                           ;ACCESS_CTRL.c: 61:             }while(PASSWORD_check(user_password) == PASSWORD_WRONG);
  1966  061F  305C               	movlw	(low (_user_password| 0))& (0+255)
  1967  0620  120A  118A  2111  120A  118A  	fcall	_PASSWORD_check
  1968  0625  3A01               	xorlw	1
  1969  0626  1D03               	btfss	3,2
  1970  0627  2E58               	goto	l1819
  1971  0628  2DB3               	goto	l1787
  1972  0629                     l1809:	
  1973                           
  1974                           ;ACCESS_CTRL.c: 64:             LCD_str("NEW PASSWORD : ",L1,C1);
  1975  0629  3001               	movlw	(low ((STR_5-__stringbase)| (0+32768)))& (0+255)
  1976  062A  00A2               	movwf	LCD_str@str
  1977  062B  3080               	movlw	128
  1978  062C  00A3               	movwf	LCD_str@str+1
  1979  062D  01A4               	clrf	LCD_str@line
  1980  062E  01A5               	clrf	LCD_str@col
  1981  062F  120A  118A  225A  120A  118A  	fcall	_LCD_str
  1982                           
  1983                           ;ACCESS_CTRL.c: 65:             PASSWORD_read(user_password);
  1984  0634  305C               	movlw	(low (_user_password| 0))& (0+255)
  1985  0635  120A  118A  228B  120A  118A  	fcall	_PASSWORD_read
  1986                           
  1987                           ;ACCESS_CTRL.c: 66:             EEPROM_writeStr((0x50),user_password);
  1988  063A  305C               	movlw	(low (_user_password| 0))& (0+255)
  1989  063B  1283               	bcf	3,5	;RP0=0, select bank0
  1990  063C  1303               	bcf	3,6	;RP1=0, select bank0
  1991  063D  00C2               	movwf	??_AC_authentication
  1992  063E  0842               	movf	??_AC_authentication,w
  1993  063F  00F4               	movwf	EEPROM_writeStr@pStr
  1994  0640  3050               	movlw	80
  1995  0641  120A  118A  2203  120A  118A  	fcall	_EEPROM_writeStr
  1996                           
  1997                           ;ACCESS_CTRL.c: 67:             EEPROM_writeByte(0x00,(99));
  1998  0646  3063               	movlw	99
  1999  0647  1283               	bcf	3,5	;RP0=0, select bank0
  2000  0648  1303               	bcf	3,6	;RP1=0, select bank0
  2001  0649  00C2               	movwf	??_AC_authentication
  2002  064A  0842               	movf	??_AC_authentication,w
  2003  064B  00F0               	movwf	EEPROM_writeByte@data
  2004  064C  3000               	movlw	0
  2005  064D  120A  118A  21B7  120A  118A  	fcall	_EEPROM_writeByte
  2006                           
  2007                           ;ACCESS_CTRL.c: 68:             PASSWORD_init(user_password);
  2008  0652  305C               	movlw	(low (_user_password| 0))& (0+255)
  2009  0653  120A  118A  2057  120A  118A  	fcall	_PASSWORD_init
  2010  0658                     l1819:	
  2011                           
  2012                           ;ACCESS_CTRL.c: 71:     LCD_clear();
  2013  0658  120A  118A  20FB  120A  118A  	fcall	_LCD_clear
  2014                           
  2015                           ;ACCESS_CTRL.c: 72:     LCD_str("ACCESS",L1,C5);
  2016  065D  3036               	movlw	(low ((STR_6-__stringbase)| (0+32768)))& (0+255)
  2017  065E  1283               	bcf	3,5	;RP0=0, select bank0
  2018  065F  1303               	bcf	3,6	;RP1=0, select bank0
  2019  0660  00A2               	movwf	LCD_str@str
  2020  0661  3080               	movlw	128
  2021  0662  00A3               	movwf	LCD_str@str+1
  2022  0663  01A4               	clrf	LCD_str@line
  2023  0664  3004               	movlw	4
  2024  0665  00C2               	movwf	??_AC_authentication
  2025  0666  0842               	movf	??_AC_authentication,w
  2026  0667  00A5               	movwf	LCD_str@col
  2027  0668  120A  118A  225A  120A  118A  	fcall	_LCD_str
  2028                           
  2029                           ;ACCESS_CTRL.c: 73:     LCD_str("SUCCESS",L2,C5);
  2030  066D  302E               	movlw	(low ((STR_7-__stringbase)| (0+32768)))& (0+255)
  2031  066E  1283               	bcf	3,5	;RP0=0, select bank0
  2032  066F  1303               	bcf	3,6	;RP1=0, select bank0
  2033  0670  00A2               	movwf	LCD_str@str
  2034  0671  3080               	movlw	128
  2035  0672  00A3               	movwf	LCD_str@str+1
  2036  0673  01A4               	clrf	LCD_str@line
  2037  0674  0AA4               	incf	LCD_str@line,f
  2038  0675  3004               	movlw	4
  2039  0676  00C2               	movwf	??_AC_authentication
  2040  0677  0842               	movf	??_AC_authentication,w
  2041  0678  00A5               	movwf	LCD_str@col
  2042  0679  120A  118A  225A   	fcall	_LCD_str
  2043  067C  0008               	return
  2044  067D                     __end_of_AC_authentication:	
  2045                           
  2046                           	psect	text6
  2047  028B                     __ptext6:	
  2048 ;; *************** function _PASSWORD_read *****************
  2049 ;; Defined at:
  2050 ;;		line 32 in file "PASSWORD.c"
  2051 ;; Parameters:    Size  Location     Type
  2052 ;;  pPassword       1    wreg     PTR unsigned char 
  2053 ;;		 -> user_password(6), 
  2054 ;; Auto vars:     Size  Location     Type
  2055 ;;  pPassword       1    4[BANK0 ] PTR unsigned char 
  2056 ;;		 -> user_password(6), 
  2057 ;;  key             1    5[BANK0 ] unsigned char 
  2058 ;;  col             1    3[BANK0 ] unsigned char 
  2059 ;; Return value:  Size  Location     Type
  2060 ;;                  1    wreg      void 
  2061 ;; Registers used:
  2062 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  2063 ;; Tracked objects:
  2064 ;;		On entry : 0/0
  2065 ;;		On exit  : 0/0
  2066 ;;		Unchanged: 0/0
  2067 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2068 ;;      Params:         0       0       0       0       0
  2069 ;;      Locals:         0       3       0       0       0
  2070 ;;      Temps:          0       1       0       0       0
  2071 ;;      Totals:         0       4       0       0       0
  2072 ;;Total ram usage:        4 bytes
  2073 ;; Hardware stack levels used:    1
  2074 ;; Hardware stack levels required when called:    5
  2075 ;; This function calls:
  2076 ;;		_KPAD_waitKey
  2077 ;;		_LCD_char
  2078 ;; This function is called by:
  2079 ;;		_AC_authentication
  2080 ;; This function uses a non-reentrant model
  2081 ;;
  2082                           
  2083                           
  2084                           ;psect for function _PASSWORD_read
  2085  028B                     _PASSWORD_read:	
  2086                           
  2087                           ;incstack = 0
  2088                           ; Regs used in _PASSWORD_read: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  2089                           ;PASSWORD_read@pPassword stored from wreg
  2090  028B  1283               	bcf	3,5	;RP0=0, select bank0
  2091  028C  1303               	bcf	3,6	;RP1=0, select bank0
  2092  028D  00A4               	movwf	PASSWORD_read@pPassword
  2093                           
  2094                           ;PASSWORD.c: 35:     tByte key = (0);
  2095  028E  01A5               	clrf	PASSWORD_read@key
  2096                           
  2097                           ;PASSWORD.c: 36:     tByte col = 0;
  2098  028F  01A3               	clrf	PASSWORD_read@col
  2099  0290                     l1747:	
  2100                           ;PASSWORD.c: 38:     while(key != '#'){
  2101                           
  2102                           
  2103                           ;PASSWORD.c: 38:     while(key != '#'){
  2104  0290  3023               	movlw	35
  2105  0291  0625               	xorwf	PASSWORD_read@key,w
  2106  0292  1903               	btfsc	3,2
  2107  0293  2ABE               	goto	l1749
  2108                           
  2109                           ;PASSWORD.c: 39:         KPAD_waitKey(&key);
  2110  0294  3025               	movlw	(low (PASSWORD_read@key| 0))& (0+255)
  2111  0295  120A  118A  20C0  120A  118A  	fcall	_KPAD_waitKey
  2112                           
  2113                           ;PASSWORD.c: 40:         if(key != '#'){
  2114  029A  3023               	movlw	35
  2115  029B  1283               	bcf	3,5	;RP0=0, select bank0
  2116  029C  1303               	bcf	3,6	;RP1=0, select bank0
  2117  029D  0625               	xorwf	PASSWORD_read@key,w
  2118  029E  1903               	btfsc	3,2
  2119  029F  2A90               	goto	l1747
  2120                           
  2121                           ;PASSWORD.c: 41:              *pPassword = key;
  2122  02A0  0825               	movf	PASSWORD_read@key,w
  2123  02A1  00A2               	movwf	??_PASSWORD_read
  2124  02A2  0824               	movf	PASSWORD_read@pPassword,w
  2125  02A3  0084               	movwf	4
  2126  02A4  0822               	movf	??_PASSWORD_read,w
  2127  02A5  1383               	bcf	3,7	;select IRP bank0
  2128  02A6  0080               	movwf	0
  2129                           
  2130                           ;PASSWORD.c: 42:              LCD_char('*',L2,col);
  2131  02A7  01FC               	clrf	LCD_char@line
  2132  02A8  0AFC               	incf	LCD_char@line,f
  2133  02A9  0823               	movf	PASSWORD_read@col,w
  2134  02AA  00A2               	movwf	??_PASSWORD_read
  2135  02AB  0822               	movf	??_PASSWORD_read,w
  2136  02AC  00FD               	movwf	LCD_char@col
  2137  02AD  302A               	movlw	42
  2138  02AE  120A  118A  2159  120A  118A  	fcall	_LCD_char
  2139                           
  2140                           ;PASSWORD.c: 43:              pPassword++;
  2141  02B3  3001               	movlw	1
  2142  02B4  1283               	bcf	3,5	;RP0=0, select bank0
  2143  02B5  1303               	bcf	3,6	;RP1=0, select bank0
  2144  02B6  00A2               	movwf	??_PASSWORD_read
  2145  02B7  0822               	movf	??_PASSWORD_read,w
  2146  02B8  07A4               	addwf	PASSWORD_read@pPassword,f
  2147                           
  2148                           ;PASSWORD.c: 44:              col++;
  2149  02B9  3001               	movlw	1
  2150  02BA  00A2               	movwf	??_PASSWORD_read
  2151  02BB  0822               	movf	??_PASSWORD_read,w
  2152  02BC  07A3               	addwf	PASSWORD_read@col,f
  2153  02BD  2A90               	goto	l1747
  2154  02BE                     l1749:	
  2155                           
  2156                           ;PASSWORD.c: 48:     *pPassword = '\0';
  2157  02BE  0824               	movf	PASSWORD_read@pPassword,w
  2158  02BF  0084               	movwf	4
  2159  02C0  1383               	bcf	3,7	;select IRP bank0
  2160  02C1  0180               	clrf	0
  2161  02C2  0008               	return
  2162  02C3                     __end_of_PASSWORD_read:	
  2163                           
  2164                           	psect	text7
  2165  00C0                     __ptext7:	
  2166 ;; *************** function _KPAD_waitKey *****************
  2167 ;; Defined at:
  2168 ;;		line 115 in file "KPAD.c"
  2169 ;; Parameters:    Size  Location     Type
  2170 ;;  pKey            1    wreg     PTR unsigned char 
  2171 ;;		 -> PASSWORD_read@key(1), 
  2172 ;; Auto vars:     Size  Location     Type
  2173 ;;  pKey            1    9[COMMON] PTR unsigned char 
  2174 ;;		 -> PASSWORD_read@key(1), 
  2175 ;;  key             1   10[COMMON] unsigned char 
  2176 ;; Return value:  Size  Location     Type
  2177 ;;                  1    wreg      void 
  2178 ;; Registers used:
  2179 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  2180 ;; Tracked objects:
  2181 ;;		On entry : 0/0
  2182 ;;		On exit  : 0/0
  2183 ;;		Unchanged: 0/0
  2184 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2185 ;;      Params:         0       0       0       0       0
  2186 ;;      Locals:         2       0       0       0       0
  2187 ;;      Temps:          1       0       0       0       0
  2188 ;;      Totals:         3       0       0       0       0
  2189 ;;Total ram usage:        3 bytes
  2190 ;; Hardware stack levels used:    1
  2191 ;; Hardware stack levels required when called:    1
  2192 ;; This function calls:
  2193 ;;		_KPAD_getKey
  2194 ;; This function is called by:
  2195 ;;		_PASSWORD_read
  2196 ;; This function uses a non-reentrant model
  2197 ;;
  2198                           
  2199                           
  2200                           ;psect for function _KPAD_waitKey
  2201  00C0                     _KPAD_waitKey:	
  2202                           
  2203                           ;incstack = 0
  2204                           ; Regs used in _KPAD_waitKey: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  2205                           ;KPAD_waitKey@pKey stored from wreg
  2206  00C0  00F9               	movwf	KPAD_waitKey@pKey
  2207                           
  2208                           ;KPAD.c: 117:     tByte key = (0);
  2209  00C1  01FA               	clrf	KPAD_waitKey@key
  2210  00C2                     l1637:	
  2211                           
  2212                           ;KPAD.c: 121:         KPAD_getKey(&key);
  2213  00C2  307A               	movlw	(low (KPAD_waitKey@key| 0))& (0+255)
  2214  00C3  120A  118A  2422  120A  118A  	fcall	_KPAD_getKey
  2215                           
  2216                           ;KPAD.c: 123:     }while(key == (0));
  2217  00C8  087A               	movf	KPAD_waitKey@key,w
  2218  00C9  1903               	btfsc	3,2
  2219  00CA  28C2               	goto	l1637
  2220                           
  2221                           ;KPAD.c: 125:     *pKey = key;
  2222  00CB  087A               	movf	KPAD_waitKey@key,w
  2223  00CC  00F8               	movwf	??_KPAD_waitKey
  2224  00CD  0879               	movf	KPAD_waitKey@pKey,w
  2225  00CE  0084               	movwf	4
  2226  00CF  0878               	movf	??_KPAD_waitKey,w
  2227  00D0  1383               	bcf	3,7	;select IRP bank0
  2228  00D1  0080               	movwf	0
  2229  00D2  0008               	return
  2230  00D3                     __end_of_KPAD_waitKey:	
  2231                           
  2232                           	psect	text8
  2233  0422                     __ptext8:	
  2234 ;; *************** function _KPAD_getKey *****************
  2235 ;; Defined at:
  2236 ;;		line 74 in file "KPAD.c"
  2237 ;; Parameters:    Size  Location     Type
  2238 ;;  pKey            1    wreg     PTR unsigned char 
  2239 ;;		 -> KPAD_waitKey@key(1), 
  2240 ;; Auto vars:     Size  Location     Type
  2241 ;;  pKey            1    4[COMMON] PTR unsigned char 
  2242 ;;		 -> KPAD_waitKey@key(1), 
  2243 ;;  col             1    7[COMMON] unsigned char 
  2244 ;;  row             1    6[COMMON] unsigned char 
  2245 ;;  key             1    5[COMMON] unsigned char 
  2246 ;; Return value:  Size  Location     Type
  2247 ;;                  1    wreg      void 
  2248 ;; Registers used:
  2249 ;;		wreg, fsr0l, fsr0h, status,2, status,0
  2250 ;; Tracked objects:
  2251 ;;		On entry : 0/0
  2252 ;;		On exit  : 0/0
  2253 ;;		Unchanged: 0/0
  2254 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2255 ;;      Params:         0       0       0       0       0
  2256 ;;      Locals:         4       0       0       0       0
  2257 ;;      Temps:          4       0       0       0       0
  2258 ;;      Totals:         8       0       0       0       0
  2259 ;;Total ram usage:        8 bytes
  2260 ;; Hardware stack levels used:    1
  2261 ;; This function calls:
  2262 ;;		Nothing
  2263 ;; This function is called by:
  2264 ;;		_KPAD_waitKey
  2265 ;; This function uses a non-reentrant model
  2266 ;;
  2267                           
  2268                           
  2269                           ;psect for function _KPAD_getKey
  2270  0422                     _KPAD_getKey:	
  2271                           
  2272                           ;incstack = 0
  2273                           ; Regs used in _KPAD_getKey: [wreg-fsr0h+status,2+status,0]
  2274                           ;KPAD_getKey@pKey stored from wreg
  2275  0422  00F4               	movwf	KPAD_getKey@pKey
  2276                           
  2277                           ;KPAD.c: 76:     tByte row;;KPAD.c: 77:     tByte col;;KPAD.c: 78:     tByte key = (0);
  2278  0423  01F5               	clrf	KPAD_getKey@key
  2279                           
  2280                           ;KPAD.c: 82:     if((((((*((volatile tRegister8 *)(0x06))).Reg)) & 0x0F)) != (0x0F)){ret
      +                          urn;}
  2281  0424  300F               	movlw	15
  2282  0425  1283               	bcf	3,5	;RP0=0, select bank0
  2283  0426  1303               	bcf	3,6	;RP1=0, select bank0
  2284  0427  0506               	andwf	6,w	;volatile
  2285  0428  00F0               	movwf	??_KPAD_getKey
  2286  0429  300F               	movlw	15
  2287  042A  0670               	xorwf	??_KPAD_getKey,w
  2288  042B  1D03               	btfss	3,2
  2289  042C  0008               	return
  2290                           
  2291                           ;KPAD.c: 84:     for(col = 0; col < (4); col++){
  2292  042D  01F7               	clrf	KPAD_getKey@col
  2293  042E                     l1487:	
  2294                           
  2295                           ;KPAD.c: 86:         (((((*((volatile tRegister8 *)(0x06))).Reg)) = ((((*((volatile tReg
      +                          ister8 *)(0x06))).Reg)) & 0x0F) | ((0x0F) << 4) ));
  2296  042E  0806               	movf	6,w	;volatile
  2297  042F  390F               	andlw	15
  2298  0430  38F0               	iorlw	240
  2299  0431  00F0               	movwf	??_KPAD_getKey
  2300  0432  0870               	movf	??_KPAD_getKey,w
  2301  0433  0086               	movwf	6	;volatile
  2302                           
  2303                           ;KPAD.c: 87:         ((((((*((volatile tRegister8 *)(0x06))).Reg))) = (((((*((volatile t
      +                          Register8 *)(0x06))).Reg)) & (~(1 << col + (4)))) | ((0) << col + (4)))));
  2304  0434  3000               	movlw	0
  2305  0435  00F0               	movwf	??_KPAD_getKey
  2306  0436  0877               	movf	KPAD_getKey@col,w
  2307  0437  3E04               	addlw	4
  2308  0438  3E01               	addlw	1
  2309  0439  2C3C               	goto	u1244
  2310  043A                     u1245:	
  2311  043A  1003               	clrc
  2312  043B  0DF0               	rlf	??_KPAD_getKey,f
  2313  043C                     u1244:	
  2314  043C  3EFF               	addlw	-1
  2315  043D  1D03               	skipz
  2316  043E  2C3A               	goto	u1245
  2317  043F  3001               	movlw	1
  2318  0440  00F1               	movwf	??_KPAD_getKey+1
  2319  0441  0877               	movf	KPAD_getKey@col,w
  2320  0442  3E04               	addlw	4
  2321  0443  3E01               	addlw	1
  2322  0444  2C47               	goto	u1254
  2323  0445                     u1255:	
  2324  0445  1003               	clrc
  2325  0446  0DF1               	rlf	??_KPAD_getKey+1,f
  2326  0447                     u1254:	
  2327  0447  3EFF               	addlw	-1
  2328  0448  1D03               	skipz
  2329  0449  2C45               	goto	u1255
  2330  044A  0871               	movf	??_KPAD_getKey+1,w
  2331  044B  3AFF               	xorlw	255
  2332  044C  0506               	andwf	6,w	;volatile
  2333  044D  0470               	iorwf	??_KPAD_getKey,w
  2334  044E  00F2               	movwf	??_KPAD_getKey+2
  2335  044F  0872               	movf	??_KPAD_getKey+2,w
  2336  0450  0086               	movwf	6	;volatile
  2337                           
  2338                           ;KPAD.c: 89:         row = (((((*((volatile tRegister8 *)(0x06))).Reg)) & 0x0F));
  2339  0451  0806               	movf	6,w	;volatile
  2340  0452  390F               	andlw	15
  2341  0453  00F0               	movwf	??_KPAD_getKey
  2342  0454  0870               	movf	??_KPAD_getKey,w
  2343  0455  00F6               	movwf	KPAD_getKey@row
  2344                           
  2345                           ;KPAD.c: 90:         if (row != (0x0F)){
  2346  0456  300F               	movlw	15
  2347  0457  0676               	xorwf	KPAD_getKey@row,w
  2348  0458  1D03               	btfss	3,2
  2349  0459  2C62               	goto	l1499
  2350                           
  2351                           ;KPAD.c: 94:     }
  2352  045A  3001               	movlw	1
  2353  045B  00F0               	movwf	??_KPAD_getKey
  2354  045C  0870               	movf	??_KPAD_getKey,w
  2355  045D  07F7               	addwf	KPAD_getKey@col,f
  2356  045E  3004               	movlw	4
  2357  045F  0277               	subwf	KPAD_getKey@col,w
  2358  0460  1C03               	skipc
  2359  0461  2C2E               	goto	l1487
  2360  0462                     l1499:	
  2361                           
  2362                           ;KPAD.c: 96:     if (col < (4)){
  2363  0462  3004               	movlw	4
  2364  0463  0277               	subwf	KPAD_getKey@col,w
  2365  0464  1C03               	btfss	3,0
  2366  0465  2C73               	goto	l1511
  2367  0466  2C9E               	goto	l1515
  2368  0467                     l1503:	
  2369  0467  01F6               	clrf	KPAD_getKey@row
  2370  0468  2C89               	goto	l1513
  2371  0469                     l224:	
  2372                           ;KPAD.c: 101:             case (0x0D) : row = 1; break;
  2373                           
  2374  0469  01F6               	clrf	KPAD_getKey@row
  2375  046A  0AF6               	incf	KPAD_getKey@row,f
  2376  046B  2C89               	goto	l1513
  2377  046C                     l1505:	
  2378  046C  3002               	movlw	2
  2379  046D  2C6F               	goto	L2
  2380  046E                     l1507:	
  2381  046E  3003               	movlw	3
  2382  046F                     L2:	
  2383  046F  00F0               	movwf	??_KPAD_getKey
  2384  0470  0870               	movf	??_KPAD_getKey,w
  2385  0471  00F6               	movwf	KPAD_getKey@row
  2386  0472  2C89               	goto	l1513
  2387  0473                     l1511:	
  2388  0473  0876               	movf	KPAD_getKey@row,w
  2389  0474  00F0               	movwf	??_KPAD_getKey
  2390  0475  01F1               	clrf	??_KPAD_getKey+1
  2391                           
  2392                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  2393                           ; Switch size 1, requested type "simple"
  2394                           ; Number of cases is 1, Range of values is 0 to 0
  2395                           ; switch strategies available:
  2396                           ; Name         Instructions Cycles
  2397                           ; simple_byte            4     3 (average)
  2398                           ; direct_byte           11     8 (fixed)
  2399                           ; jumptable            260     6 (fixed)
  2400                           ;	Chosen strategy is simple_byte
  2401  0476  0871               	movf	??_KPAD_getKey+1,w
  2402  0477  3A00               	xorlw	0	; case 0
  2403  0478  1903               	skipnz
  2404  0479  2C7B               	goto	l1959
  2405  047A  2C89               	goto	l1513
  2406  047B                     l1959:	
  2407                           
  2408                           ; Switch size 1, requested type "simple"
  2409                           ; Number of cases is 4, Range of values is 7 to 14
  2410                           ; switch strategies available:
  2411                           ; Name         Instructions Cycles
  2412                           ; simple_byte           13     7 (average)
  2413                           ; direct_byte           35    11 (fixed)
  2414                           ; jumptable            263     9 (fixed)
  2415                           ;	Chosen strategy is simple_byte
  2416  047B  0870               	movf	??_KPAD_getKey,w
  2417  047C  3A07               	xorlw	7	; case 7
  2418  047D  1903               	skipnz
  2419  047E  2C6E               	goto	l1507
  2420  047F  3A0C               	xorlw	12	; case 11
  2421  0480  1903               	skipnz
  2422  0481  2C6C               	goto	l1505
  2423  0482  3A06               	xorlw	6	; case 13
  2424  0483  1903               	skipnz
  2425  0484  2C69               	goto	l224
  2426  0485  3A03               	xorlw	3	; case 14
  2427  0486  1903               	skipnz
  2428  0487  2C67               	goto	l1503
  2429  0488  2C89               	goto	l1513
  2430  0489                     l1513:	
  2431                           
  2432                           ;KPAD.c: 107:         key = KEYS[row][col];
  2433  0489  0876               	movf	KPAD_getKey@row,w
  2434  048A  00F0               	movwf	??_KPAD_getKey
  2435  048B  3002               	movlw	2
  2436  048C                     u1295:	
  2437  048C  1003               	clrc
  2438  048D  0DF0               	rlf	??_KPAD_getKey,f
  2439  048E  3EFF               	addlw	-1
  2440  048F  1D03               	skipz
  2441  0490  2C8C               	goto	u1295
  2442  0491  30A0               	movlw	(low (_KEYS| 0))& (0+255)
  2443  0492  0770               	addwf	??_KPAD_getKey,w
  2444  0493  00F1               	movwf	??_KPAD_getKey+1
  2445  0494  0877               	movf	KPAD_getKey@col,w
  2446  0495  0771               	addwf	??_KPAD_getKey+1,w
  2447  0496  00F2               	movwf	??_KPAD_getKey+2
  2448  0497  0872               	movf	??_KPAD_getKey+2,w
  2449  0498  0084               	movwf	4
  2450  0499  1383               	bcf	3,7	;select IRP bank1
  2451  049A  0800               	movf	0,w
  2452  049B  00F3               	movwf	??_KPAD_getKey+3
  2453  049C  0873               	movf	??_KPAD_getKey+3,w
  2454  049D  00F5               	movwf	KPAD_getKey@key
  2455  049E                     l1515:	
  2456                           
  2457                           ;KPAD.c: 112:     *pKey = key;
  2458  049E  0875               	movf	KPAD_getKey@key,w
  2459  049F  00F0               	movwf	??_KPAD_getKey
  2460  04A0  0874               	movf	KPAD_getKey@pKey,w
  2461  04A1  0084               	movwf	4
  2462  04A2  0870               	movf	??_KPAD_getKey,w
  2463  04A3  0080               	movwf	0
  2464  04A4  0008               	return
  2465  04A5                     __end_of_KPAD_getKey:	
  2466                           
  2467                           	psect	text9
  2468  0057                     __ptext9:	
  2469 ;; *************** function _PASSWORD_init *****************
  2470 ;; Defined at:
  2471 ;;		line 25 in file "PASSWORD.c"
  2472 ;; Parameters:    Size  Location     Type
  2473 ;;  password        1    wreg     PTR unsigned char 
  2474 ;;		 -> user_password(6), AC_authentication@password(6), 
  2475 ;; Auto vars:     Size  Location     Type
  2476 ;;  password        1    4[COMMON] PTR unsigned char 
  2477 ;;		 -> user_password(6), AC_authentication@password(6), 
  2478 ;; Return value:  Size  Location     Type
  2479 ;;                  1    wreg      void 
  2480 ;; Registers used:
  2481 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  2482 ;; Tracked objects:
  2483 ;;		On entry : 0/0
  2484 ;;		On exit  : 0/0
  2485 ;;		Unchanged: 0/0
  2486 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2487 ;;      Params:         0       0       0       0       0
  2488 ;;      Locals:         1       0       0       0       0
  2489 ;;      Temps:          1       0       0       0       0
  2490 ;;      Totals:         2       0       0       0       0
  2491 ;;Total ram usage:        2 bytes
  2492 ;; Hardware stack levels used:    1
  2493 ;; Hardware stack levels required when called:    1
  2494 ;; This function calls:
  2495 ;;		_UTIL_STRcopy
  2496 ;; This function is called by:
  2497 ;;		_AC_authentication
  2498 ;; This function uses a non-reentrant model
  2499 ;;
  2500                           
  2501                           
  2502                           ;psect for function _PASSWORD_init
  2503  0057                     _PASSWORD_init:	
  2504                           
  2505                           ;incstack = 0
  2506                           ; Regs used in _PASSWORD_init: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  2507                           ;PASSWORD_init@password stored from wreg
  2508  0057  00F4               	movwf	PASSWORD_init@password
  2509                           
  2510                           ;PASSWORD.c: 29:     UTIL_STRcopy(password,REAL_PASSWORD);
  2511  0058  3062               	movlw	(low (_REAL_PASSWORD| 0))& (0+255)
  2512  0059  00F3               	movwf	??_PASSWORD_init
  2513  005A  0873               	movf	??_PASSWORD_init,w
  2514  005B  00F0               	movwf	UTIL_STRcopy@destination
  2515  005C  0874               	movf	PASSWORD_init@password,w
  2516  005D  120A  118A  2173   	fcall	_UTIL_STRcopy
  2517  0060  0008               	return
  2518  0061                     __end_of_PASSWORD_init:	
  2519                           
  2520                           	psect	text10
  2521  0173                     __ptext10:	
  2522 ;; *************** function _UTIL_STRcopy *****************
  2523 ;; Defined at:
  2524 ;;		line 52 in file "UTILITY.c"
  2525 ;; Parameters:    Size  Location     Type
  2526 ;;  source          1    wreg     PTR unsigned char 
  2527 ;;		 -> user_password(6), AC_authentication@password(6), 
  2528 ;;  destination     1    0[COMMON] PTR unsigned char 
  2529 ;;		 -> REAL_PASSWORD(6), 
  2530 ;; Auto vars:     Size  Location     Type
  2531 ;;  source          1    2[COMMON] PTR unsigned char 
  2532 ;;		 -> user_password(6), AC_authentication@password(6), 
  2533 ;; Return value:  Size  Location     Type
  2534 ;;                  1    wreg      void 
  2535 ;; Registers used:
  2536 ;;		wreg, fsr0l, fsr0h, status,2, status,0
  2537 ;; Tracked objects:
  2538 ;;		On entry : 0/0
  2539 ;;		On exit  : 0/0
  2540 ;;		Unchanged: 0/0
  2541 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2542 ;;      Params:         1       0       0       0       0
  2543 ;;      Locals:         1       0       0       0       0
  2544 ;;      Temps:          1       0       0       0       0
  2545 ;;      Totals:         3       0       0       0       0
  2546 ;;Total ram usage:        3 bytes
  2547 ;; Hardware stack levels used:    1
  2548 ;; This function calls:
  2549 ;;		Nothing
  2550 ;; This function is called by:
  2551 ;;		_PASSWORD_init
  2552 ;; This function uses a non-reentrant model
  2553 ;;
  2554                           
  2555                           
  2556                           ;psect for function _UTIL_STRcopy
  2557  0173                     _UTIL_STRcopy:	
  2558                           
  2559                           ;incstack = 0
  2560                           ; Regs used in _UTIL_STRcopy: [wreg-fsr0h+status,2+status,0]
  2561                           ;UTIL_STRcopy@source stored from wreg
  2562  0173  00F2               	movwf	UTIL_STRcopy@source
  2563  0174                     l1631:	
  2564                           ;UTILITY.c: 54:     while(*source != '\0'){
  2565                           
  2566                           
  2567                           ;UTILITY.c: 54:     while(*source != '\0'){
  2568  0174  0872               	movf	UTIL_STRcopy@source,w
  2569  0175  0084               	movwf	4
  2570  0176  1383               	bcf	3,7	;select IRP bank0
  2571  0177  0800               	movf	0,w
  2572  0178  1903               	btfsc	3,2
  2573  0179  298B               	goto	l1633
  2574                           
  2575                           ;UTILITY.c: 55:         *destination = *source;
  2576  017A  0872               	movf	UTIL_STRcopy@source,w
  2577  017B  0084               	movwf	4
  2578  017C  0800               	movf	0,w
  2579  017D  00F1               	movwf	??_UTIL_STRcopy
  2580  017E  0870               	movf	UTIL_STRcopy@destination,w
  2581  017F  0084               	movwf	4
  2582  0180  0871               	movf	??_UTIL_STRcopy,w
  2583  0181  0080               	movwf	0
  2584                           
  2585                           ;UTILITY.c: 56:         source++;
  2586  0182  3001               	movlw	1
  2587  0183  00F1               	movwf	??_UTIL_STRcopy
  2588  0184  0871               	movf	??_UTIL_STRcopy,w
  2589  0185  07F2               	addwf	UTIL_STRcopy@source,f
  2590                           
  2591                           ;UTILITY.c: 57:         destination++;
  2592  0186  3001               	movlw	1
  2593  0187  00F1               	movwf	??_UTIL_STRcopy
  2594  0188  0871               	movf	??_UTIL_STRcopy,w
  2595  0189  07F0               	addwf	UTIL_STRcopy@destination,f
  2596  018A  2974               	goto	l1631
  2597  018B                     l1633:	
  2598                           
  2599                           ;UTILITY.c: 59:     *destination = *source;
  2600  018B  0872               	movf	UTIL_STRcopy@source,w
  2601  018C  0084               	movwf	4
  2602  018D  0800               	movf	0,w
  2603  018E  00F1               	movwf	??_UTIL_STRcopy
  2604  018F  0870               	movf	UTIL_STRcopy@destination,w
  2605  0190  0084               	movwf	4
  2606  0191  0871               	movf	??_UTIL_STRcopy,w
  2607  0192  0080               	movwf	0
  2608  0193  0008               	return
  2609  0194                     __end_of_UTIL_STRcopy:	
  2610                           
  2611                           	psect	text11
  2612  0111                     __ptext11:	
  2613 ;; *************** function _PASSWORD_check *****************
  2614 ;; Defined at:
  2615 ;;		line 52 in file "PASSWORD.c"
  2616 ;; Parameters:    Size  Location     Type
  2617 ;;  password        1    wreg     PTR unsigned char 
  2618 ;;		 -> user_password(6), 
  2619 ;; Auto vars:     Size  Location     Type
  2620 ;;  password        1   13[COMMON] PTR unsigned char 
  2621 ;;		 -> user_password(6), 
  2622 ;;  state           1   12[COMMON] enum E891
  2623 ;; Return value:  Size  Location     Type
  2624 ;;                  1    wreg      enum E891
  2625 ;; Registers used:
  2626 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  2627 ;; Tracked objects:
  2628 ;;		On entry : 0/0
  2629 ;;		On exit  : 0/0
  2630 ;;		Unchanged: 0/0
  2631 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2632 ;;      Params:         0       0       0       0       0
  2633 ;;      Locals:         2       0       0       0       0
  2634 ;;      Temps:          2       0       0       0       0
  2635 ;;      Totals:         4       0       0       0       0
  2636 ;;Total ram usage:        4 bytes
  2637 ;; Hardware stack levels used:    1
  2638 ;; Hardware stack levels required when called:    2
  2639 ;; This function calls:
  2640 ;;		_UTIL_STRcompare
  2641 ;; This function is called by:
  2642 ;;		_AC_authentication
  2643 ;; This function uses a non-reentrant model
  2644 ;;
  2645                           
  2646                           
  2647                           ;psect for function _PASSWORD_check
  2648  0111                     _PASSWORD_check:	
  2649                           
  2650                           ;incstack = 0
  2651                           ; Regs used in _PASSWORD_check: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  2652                           ;PASSWORD_check@password stored from wreg
  2653  0111  00FD               	movwf	PASSWORD_check@password
  2654                           
  2655                           ;PASSWORD.c: 56:     tPASSWORD_STATE state = ( UTIL_STRcompare(password,REAL_PASSWORD) =
      +                          = SIMILAR ) ? PASSWORD_CORRECT : PASSWORD_WRONG;
  2656  0112  3062               	movlw	(low (_REAL_PASSWORD| 0))& (0+255)
  2657  0113  00FA               	movwf	??_PASSWORD_check
  2658  0114  087A               	movf	??_PASSWORD_check,w
  2659  0115  00F6               	movwf	UTIL_STRcompare@strB
  2660  0116  087D               	movf	PASSWORD_check@password,w
  2661  0117  120A  118A  22C3  120A  118A  	fcall	_UTIL_STRcompare
  2662  011C  3A00               	xorlw	0
  2663  011D  1903               	btfsc	3,2
  2664  011E  2921               	goto	u1660
  2665  011F  3001               	movlw	1
  2666  0120  2922               	goto	u1670
  2667  0121                     u1660:	
  2668  0121  3000               	movlw	0
  2669  0122                     u1670:	
  2670  0122  00FB               	movwf	??_PASSWORD_check+1
  2671  0123  087B               	movf	??_PASSWORD_check+1,w
  2672  0124  00FC               	movwf	PASSWORD_check@state
  2673                           
  2674                           ;PASSWORD.c: 58:     return state;
  2675  0125  087C               	movf	PASSWORD_check@state,w
  2676  0126  0008               	return
  2677  0127                     __end_of_PASSWORD_check:	
  2678                           
  2679                           	psect	text12
  2680  02C3                     __ptext12:	
  2681 ;; *************** function _UTIL_STRcompare *****************
  2682 ;; Defined at:
  2683 ;;		line 32 in file "UTILITY.c"
  2684 ;; Parameters:    Size  Location     Type
  2685 ;;  strA            1    wreg     PTR unsigned char 
  2686 ;;		 -> user_password(6), 
  2687 ;;  strB            1    6[COMMON] PTR unsigned char 
  2688 ;;		 -> REAL_PASSWORD(6), 
  2689 ;; Auto vars:     Size  Location     Type
  2690 ;;  strA            1    9[COMMON] PTR unsigned char 
  2691 ;;		 -> user_password(6), 
  2692 ;;  res             1    8[COMMON] enum E891
  2693 ;; Return value:  Size  Location     Type
  2694 ;;                  1    wreg      enum E901
  2695 ;; Registers used:
  2696 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  2697 ;; Tracked objects:
  2698 ;;		On entry : 0/0
  2699 ;;		On exit  : 0/0
  2700 ;;		Unchanged: 0/0
  2701 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2702 ;;      Params:         1       0       0       0       0
  2703 ;;      Locals:         2       0       0       0       0
  2704 ;;      Temps:          1       0       0       0       0
  2705 ;;      Totals:         4       0       0       0       0
  2706 ;;Total ram usage:        4 bytes
  2707 ;; Hardware stack levels used:    1
  2708 ;; Hardware stack levels required when called:    1
  2709 ;; This function calls:
  2710 ;;		_UTIL_STRlength
  2711 ;; This function is called by:
  2712 ;;		_PASSWORD_check
  2713 ;; This function uses a non-reentrant model
  2714 ;;
  2715                           
  2716                           
  2717                           ;psect for function _UTIL_STRcompare
  2718  02C3                     _UTIL_STRcompare:	
  2719                           
  2720                           ;incstack = 0
  2721                           ; Regs used in _UTIL_STRcompare: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  2722                           ;UTIL_STRcompare@strA stored from wreg
  2723  02C3  00F9               	movwf	UTIL_STRcompare@strA
  2724                           
  2725                           ;UTILITY.c: 34:     tCOMPARE_RESULT res = DISSIMILAR;
  2726  02C4  01F8               	clrf	UTIL_STRcompare@res
  2727  02C5  0AF8               	incf	UTIL_STRcompare@res,f
  2728                           
  2729                           ;UTILITY.c: 36:     if(UTIL_STRlength(strA) > 0 && UTIL_STRlength(strB) > 0 ) {
  2730  02C6  0879               	movf	UTIL_STRcompare@strA,w
  2731  02C7  120A  118A  2140  120A  118A  	fcall	_UTIL_STRlength
  2732  02CC  0870               	movf	?_UTIL_STRlength,w
  2733  02CD  0471               	iorwf	?_UTIL_STRlength+1,w
  2734  02CE  1903               	btfsc	3,2
  2735  02CF  2B02               	goto	l1665
  2736  02D0  0876               	movf	UTIL_STRcompare@strB,w
  2737  02D1  120A  118A  2140  120A  118A  	fcall	_UTIL_STRlength
  2738  02D6  0870               	movf	?_UTIL_STRlength,w
  2739  02D7  0471               	iorwf	?_UTIL_STRlength+1,w
  2740  02D8  1D03               	btfss	3,2
  2741  02D9  2AF2               	goto	l1653
  2742  02DA  2B02               	goto	l1665
  2743  02DB                     l1655:	
  2744  02DB  0876               	movf	UTIL_STRcompare@strB,w
  2745  02DC  0084               	movwf	4
  2746  02DD  0800               	movf	0,w
  2747  02DE  1903               	btfsc	3,2
  2748  02DF  2AF8               	goto	l1659
  2749  02E0  0876               	movf	UTIL_STRcompare@strB,w
  2750  02E1  0084               	movwf	4
  2751  02E2  0800               	movf	0,w
  2752  02E3  00F7               	movwf	??_UTIL_STRcompare
  2753  02E4  0879               	movf	UTIL_STRcompare@strA,w
  2754  02E5  0084               	movwf	4
  2755  02E6  0800               	movf	0,w
  2756  02E7  0677               	xorwf	??_UTIL_STRcompare,w
  2757  02E8  1D03               	btfss	3,2
  2758  02E9  2AF8               	goto	l1659
  2759                           
  2760                           ;UTILITY.c: 39:             strA++;
  2761  02EA  3001               	movlw	1
  2762  02EB  00F7               	movwf	??_UTIL_STRcompare
  2763  02EC  0877               	movf	??_UTIL_STRcompare,w
  2764  02ED  07F9               	addwf	UTIL_STRcompare@strA,f
  2765                           
  2766                           ;UTILITY.c: 40:             strB++;
  2767  02EE  3001               	movlw	1
  2768  02EF  00F7               	movwf	??_UTIL_STRcompare
  2769  02F0  0877               	movf	??_UTIL_STRcompare,w
  2770  02F1  07F6               	addwf	UTIL_STRcompare@strB,f
  2771  02F2                     l1653:	
  2772                           
  2773                           ;UTILITY.c: 38:         while (*strA != '\0' && *strB != '\0' && *strA == *strB){
  2774  02F2  0879               	movf	UTIL_STRcompare@strA,w
  2775  02F3  0084               	movwf	4
  2776  02F4  1383               	bcf	3,7	;select IRP bank0
  2777  02F5  0800               	movf	0,w
  2778  02F6  1D03               	btfss	3,2
  2779  02F7  2ADB               	goto	l1655
  2780  02F8                     l1659:	
  2781                           
  2782                           ;UTILITY.c: 42:         if(*strA == '\0' && *strB == '\0'){
  2783  02F8  0879               	movf	UTIL_STRcompare@strA,w
  2784  02F9  0084               	movwf	4
  2785  02FA  0800               	movf	0,w
  2786  02FB  1D03               	btfss	3,2
  2787  02FC  2B02               	goto	l1665
  2788  02FD  0876               	movf	UTIL_STRcompare@strB,w
  2789  02FE  0084               	movwf	4
  2790  02FF  0800               	movf	0,w
  2791  0300  1903               	btfsc	3,2
  2792                           
  2793                           ;UTILITY.c: 43:             res = SIMILAR;
  2794  0301  01F8               	clrf	UTIL_STRcompare@res
  2795  0302                     l1665:	
  2796                           
  2797                           ;UTILITY.c: 48:     return res;
  2798  0302  0878               	movf	UTIL_STRcompare@res,w
  2799  0303  0008               	return
  2800  0304                     __end_of_UTIL_STRcompare:	
  2801                           
  2802                           	psect	text13
  2803  0140                     __ptext13:	
  2804 ;; *************** function _UTIL_STRlength *****************
  2805 ;; Defined at:
  2806 ;;		line 62 in file "UTILITY.c"
  2807 ;; Parameters:    Size  Location     Type
  2808 ;;  pStr            1    wreg     PTR unsigned char 
  2809 ;;		 -> user_password(6), REAL_PASSWORD(6), 
  2810 ;; Auto vars:     Size  Location     Type
  2811 ;;  pStr            1    5[COMMON] PTR unsigned char 
  2812 ;;		 -> user_password(6), REAL_PASSWORD(6), 
  2813 ;;  len             2    3[COMMON] unsigned short 
  2814 ;; Return value:  Size  Location     Type
  2815 ;;                  2    0[COMMON] unsigned short 
  2816 ;; Registers used:
  2817 ;;		wreg, fsr0l, fsr0h, status,2, status,0
  2818 ;; Tracked objects:
  2819 ;;		On entry : 0/0
  2820 ;;		On exit  : 0/0
  2821 ;;		Unchanged: 0/0
  2822 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2823 ;;      Params:         2       0       0       0       0
  2824 ;;      Locals:         3       0       0       0       0
  2825 ;;      Temps:          1       0       0       0       0
  2826 ;;      Totals:         6       0       0       0       0
  2827 ;;Total ram usage:        6 bytes
  2828 ;; Hardware stack levels used:    1
  2829 ;; This function calls:
  2830 ;;		Nothing
  2831 ;; This function is called by:
  2832 ;;		_UTIL_STRcompare
  2833 ;; This function uses a non-reentrant model
  2834 ;;
  2835                           
  2836                           
  2837                           ;psect for function _UTIL_STRlength
  2838  0140                     _UTIL_STRlength:	
  2839                           
  2840                           ;incstack = 0
  2841                           ; Regs used in _UTIL_STRlength: [wreg-fsr0h+status,2+status,0]
  2842                           ;UTIL_STRlength@pStr stored from wreg
  2843  0140  00F5               	movwf	UTIL_STRlength@pStr
  2844                           
  2845                           ;UTILITY.c: 64:     tWord len = 0;
  2846  0141  01F3               	clrf	UTIL_STRlength@len
  2847  0142  01F4               	clrf	UTIL_STRlength@len+1
  2848  0143                     l1469:	
  2849                           ;UTILITY.c: 66:     while(*pStr != '\0'){
  2850                           
  2851                           
  2852                           ;UTILITY.c: 66:     while(*pStr != '\0'){
  2853  0143  0875               	movf	UTIL_STRlength@pStr,w
  2854  0144  0084               	movwf	4
  2855  0145  1383               	bcf	3,7	;select IRP bank0
  2856  0146  0800               	movf	0,w
  2857  0147  1903               	btfsc	3,2
  2858  0148  2954               	goto	l1471
  2859                           
  2860                           ;UTILITY.c: 67:         len++;
  2861  0149  3001               	movlw	1
  2862  014A  07F3               	addwf	UTIL_STRlength@len,f
  2863  014B  1803               	skipnc
  2864  014C  0AF4               	incf	UTIL_STRlength@len+1,f
  2865  014D  3000               	movlw	0
  2866  014E  07F4               	addwf	UTIL_STRlength@len+1,f
  2867                           
  2868                           ;UTILITY.c: 68:         pStr++;
  2869  014F  3001               	movlw	1
  2870  0150  00F2               	movwf	??_UTIL_STRlength
  2871  0151  0872               	movf	??_UTIL_STRlength,w
  2872  0152  07F5               	addwf	UTIL_STRlength@pStr,f
  2873  0153  2943               	goto	l1469
  2874  0154                     l1471:	
  2875                           
  2876                           ;UTILITY.c: 71:     return len;
  2877  0154  0874               	movf	UTIL_STRlength@len+1,w
  2878  0155  00F1               	movwf	?_UTIL_STRlength+1
  2879  0156  0873               	movf	UTIL_STRlength@len,w
  2880  0157  00F0               	movwf	?_UTIL_STRlength
  2881  0158  0008               	return
  2882  0159                     __end_of_UTIL_STRlength:	
  2883                           
  2884                           	psect	text14
  2885  022D                     __ptext14:	
  2886 ;; *************** function _LCD_num *****************
  2887 ;; Defined at:
  2888 ;;		line 172 in file "LCD.c"
  2889 ;; Parameters:    Size  Location     Type
  2890 ;;  num             4    8[BANK0 ] unsigned long 
  2891 ;;  line            1   12[BANK0 ] enum E895
  2892 ;;  col             1   13[BANK0 ] enum E899
  2893 ;; Auto vars:     Size  Location     Type
  2894 ;;  str            17   16[BANK0 ] unsigned char [17]
  2895 ;;  pStr            1   33[BANK0 ] PTR unsigned char 
  2896 ;;		 -> LCD_num@str(17), 
  2897 ;; Return value:  Size  Location     Type
  2898 ;;                  1    wreg      void 
  2899 ;; Registers used:
  2900 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  2901 ;; Tracked objects:
  2902 ;;		On entry : 0/0
  2903 ;;		On exit  : 0/0
  2904 ;;		Unchanged: 0/0
  2905 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2906 ;;      Params:         0       6       0       0       0
  2907 ;;      Locals:         0      18       0       0       0
  2908 ;;      Temps:          0       2       0       0       0
  2909 ;;      Totals:         0      26       0       0       0
  2910 ;;Total ram usage:       26 bytes
  2911 ;; Hardware stack levels used:    1
  2912 ;; Hardware stack levels required when called:    6
  2913 ;; This function calls:
  2914 ;;		_LCD_str
  2915 ;;		_UTIL_INTtoSTR
  2916 ;; This function is called by:
  2917 ;;		_AC_authentication
  2918 ;; This function uses a non-reentrant model
  2919 ;;
  2920                           
  2921                           
  2922                           ;psect for function _LCD_num
  2923  022D                     _LCD_num:	
  2924                           
  2925                           ;LCD.c: 174:     tByte str[17];;LCD.c: 175:     tByte * pStr = str;
  2926                           
  2927                           ;incstack = 0
  2928                           ; Regs used in _LCD_num: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  2929  022D  3030               	movlw	(low (LCD_num@str| 0))& (0+255)
  2930  022E  1283               	bcf	3,5	;RP0=0, select bank0
  2931  022F  1303               	bcf	3,6	;RP1=0, select bank0
  2932  0230  00AE               	movwf	??_LCD_num
  2933  0231  082E               	movf	??_LCD_num,w
  2934  0232  00C1               	movwf	LCD_num@pStr
  2935                           
  2936                           ;LCD.c: 177:     UTIL_INTtoSTR(num,&pStr,17);
  2937  0233  082B               	movf	LCD_num@num+3,w
  2938  0234  00A3               	movwf	UTIL_INTtoSTR@num+3
  2939  0235  082A               	movf	LCD_num@num+2,w
  2940  0236  00A2               	movwf	UTIL_INTtoSTR@num+2
  2941  0237  0829               	movf	LCD_num@num+1,w
  2942  0238  00A1               	movwf	UTIL_INTtoSTR@num+1
  2943  0239  0828               	movf	LCD_num@num,w
  2944  023A  00A0               	movwf	UTIL_INTtoSTR@num
  2945  023B  3041               	movlw	(low (LCD_num@pStr| 0))& (0+255)
  2946  023C  00AE               	movwf	??_LCD_num
  2947  023D  082E               	movf	??_LCD_num,w
  2948  023E  00A4               	movwf	UTIL_INTtoSTR@ppStr
  2949  023F  3011               	movlw	17
  2950  0240  00AF               	movwf	??_LCD_num+1
  2951  0241  082F               	movf	??_LCD_num+1,w
  2952  0242  00A5               	movwf	UTIL_INTtoSTR@max
  2953  0243  120A  118A  23AE  120A  118A  	fcall	_UTIL_INTtoSTR
  2954                           
  2955                           ;LCD.c: 179:     LCD_str(pStr,line,col);
  2956  0248  1283               	bcf	3,5	;RP0=0, select bank0
  2957  0249  1303               	bcf	3,6	;RP1=0, select bank0
  2958  024A  0841               	movf	LCD_num@pStr,w
  2959  024B  00A2               	movwf	LCD_str@str
  2960  024C  3000               	movlw	0
  2961  024D  00A3               	movwf	LCD_str@str+1
  2962  024E  082C               	movf	LCD_num@line,w
  2963  024F  00AE               	movwf	??_LCD_num
  2964  0250  082E               	movf	??_LCD_num,w
  2965  0251  00A4               	movwf	LCD_str@line
  2966  0252  082D               	movf	LCD_num@col,w
  2967  0253  00AF               	movwf	??_LCD_num+1
  2968  0254  082F               	movf	??_LCD_num+1,w
  2969  0255  00A5               	movwf	LCD_str@col
  2970  0256  120A  118A  225A   	fcall	_LCD_str
  2971  0259  0008               	return
  2972  025A                     __end_of_LCD_num:	
  2973                           
  2974                           	psect	text15
  2975  03AE                     __ptext15:	
  2976 ;; *************** function _UTIL_INTtoSTR *****************
  2977 ;; Defined at:
  2978 ;;		line 16 in file "UTILITY.c"
  2979 ;; Parameters:    Size  Location     Type
  2980 ;;  num             4    0[BANK0 ] unsigned long 
  2981 ;;  ppStr           1    4[BANK0 ] PTR PTR unsigned char 
  2982 ;;		 -> LCD_num@pStr(1), 
  2983 ;;  max             1    5[BANK0 ] unsigned char 
  2984 ;; Auto vars:     Size  Location     Type
  2985 ;;		None
  2986 ;; Return value:  Size  Location     Type
  2987 ;;                  1    wreg      void 
  2988 ;; Registers used:
  2989 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  2990 ;; Tracked objects:
  2991 ;;		On entry : 0/0
  2992 ;;		On exit  : 0/0
  2993 ;;		Unchanged: 0/0
  2994 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2995 ;;      Params:         0       6       0       0       0
  2996 ;;      Locals:         0       0       0       0       0
  2997 ;;      Temps:          0       2       0       0       0
  2998 ;;      Totals:         0       8       0       0       0
  2999 ;;Total ram usage:        8 bytes
  3000 ;; Hardware stack levels used:    1
  3001 ;; Hardware stack levels required when called:    1
  3002 ;; This function calls:
  3003 ;;		___lldiv
  3004 ;;		___llmod
  3005 ;; This function is called by:
  3006 ;;		_LCD_num
  3007 ;; This function uses a non-reentrant model
  3008 ;;
  3009                           
  3010                           
  3011                           ;psect for function _UTIL_INTtoSTR
  3012  03AE                     _UTIL_INTtoSTR:	
  3013                           
  3014                           ;UTILITY.c: 18:     (*ppStr)[--max] = '\0';
  3015                           
  3016                           ;incstack = 0
  3017                           ; Regs used in _UTIL_INTtoSTR: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  3018  03AE  1283               	bcf	3,5	;RP0=0, select bank0
  3019  03AF  1303               	bcf	3,6	;RP1=0, select bank0
  3020  03B0  0824               	movf	UTIL_INTtoSTR@ppStr,w
  3021  03B1  0084               	movwf	4
  3022  03B2  3001               	movlw	1
  3023  03B3  02A5               	subwf	UTIL_INTtoSTR@max,f
  3024  03B4  0825               	movf	UTIL_INTtoSTR@max,w
  3025  03B5  1383               	bcf	3,7	;select IRP bank0
  3026  03B6  0700               	addwf	0,w
  3027  03B7  00A6               	movwf	??_UTIL_INTtoSTR
  3028  03B8  0826               	movf	??_UTIL_INTtoSTR,w
  3029  03B9  0084               	movwf	4
  3030  03BA  0180               	clrf	0
  3031                           
  3032                           ;UTILITY.c: 20:     if (num == 0) {
  3033  03BB  0823               	movf	UTIL_INTtoSTR@num+3,w
  3034  03BC  0422               	iorwf	UTIL_INTtoSTR@num+2,w
  3035  03BD  0421               	iorwf	UTIL_INTtoSTR@num+1,w
  3036  03BE  0420               	iorwf	UTIL_INTtoSTR@num,w
  3037  03BF  1D03               	skipz
  3038  03C0  2BCE               	goto	l1587
  3039                           
  3040                           ;UTILITY.c: 21:         (*ppStr)[--max] = '0';
  3041  03C1  3030               	movlw	48
  3042  03C2  00A6               	movwf	??_UTIL_INTtoSTR
  3043  03C3  0824               	movf	UTIL_INTtoSTR@ppStr,w
  3044  03C4  0084               	movwf	4
  3045  03C5  3001               	movlw	1
  3046  03C6  02A5               	subwf	UTIL_INTtoSTR@max,f
  3047  03C7  0825               	movf	UTIL_INTtoSTR@max,w
  3048  03C8  0700               	addwf	0,w
  3049  03C9  00A7               	movwf	??_UTIL_INTtoSTR+1
  3050  03CA  0827               	movf	??_UTIL_INTtoSTR+1,w
  3051  03CB  0084               	movwf	4
  3052  03CC  0826               	movf	??_UTIL_INTtoSTR,w
  3053  03CD  0080               	movwf	0
  3054  03CE                     l1587:	
  3055                           
  3056                           ;UTILITY.c: 24:     while(num > 0){
  3057  03CE  0823               	movf	UTIL_INTtoSTR@num+3,w
  3058  03CF  0422               	iorwf	UTIL_INTtoSTR@num+2,w
  3059  03D0  0421               	iorwf	UTIL_INTtoSTR@num+1,w
  3060  03D1  0420               	iorwf	UTIL_INTtoSTR@num,w
  3061  03D2  1903               	btfsc	3,2
  3062  03D3  2C1A               	goto	l1589
  3063                           
  3064                           ;UTILITY.c: 25:         (*ppStr)[--max] = (num % 10) + '0';
  3065  03D4  3000               	movlw	0
  3066  03D5  00F3               	movwf	___llmod@divisor+3
  3067  03D6  3000               	movlw	0
  3068  03D7  00F2               	movwf	___llmod@divisor+2
  3069  03D8  3000               	movlw	0
  3070  03D9  00F1               	movwf	___llmod@divisor+1
  3071  03DA  300A               	movlw	10
  3072  03DB  00F0               	movwf	___llmod@divisor
  3073  03DC  0823               	movf	UTIL_INTtoSTR@num+3,w
  3074  03DD  00F7               	movwf	___llmod@dividend+3
  3075  03DE  0822               	movf	UTIL_INTtoSTR@num+2,w
  3076  03DF  00F6               	movwf	___llmod@dividend+2
  3077  03E0  0821               	movf	UTIL_INTtoSTR@num+1,w
  3078  03E1  00F5               	movwf	___llmod@dividend+1
  3079  03E2  0820               	movf	UTIL_INTtoSTR@num,w
  3080  03E3  00F4               	movwf	___llmod@dividend
  3081  03E4  120A  118A  2304  120A  118A  	fcall	___llmod
  3082  03E9  0870               	movf	?___llmod,w
  3083  03EA  3E30               	addlw	48
  3084  03EB  1283               	bcf	3,5	;RP0=0, select bank0
  3085  03EC  1303               	bcf	3,6	;RP1=0, select bank0
  3086  03ED  00A6               	movwf	??_UTIL_INTtoSTR
  3087  03EE  0824               	movf	UTIL_INTtoSTR@ppStr,w
  3088  03EF  0084               	movwf	4
  3089  03F0  3001               	movlw	1
  3090  03F1  02A5               	subwf	UTIL_INTtoSTR@max,f
  3091  03F2  0825               	movf	UTIL_INTtoSTR@max,w
  3092  03F3  1383               	bcf	3,7	;select IRP bank0
  3093  03F4  0700               	addwf	0,w
  3094  03F5  00A7               	movwf	??_UTIL_INTtoSTR+1
  3095  03F6  0827               	movf	??_UTIL_INTtoSTR+1,w
  3096  03F7  0084               	movwf	4
  3097  03F8  0826               	movf	??_UTIL_INTtoSTR,w
  3098  03F9  0080               	movwf	0
  3099                           
  3100                           ;UTILITY.c: 26:         num = num / 10;
  3101  03FA  3000               	movlw	0
  3102  03FB  00F3               	movwf	___lldiv@divisor+3
  3103  03FC  3000               	movlw	0
  3104  03FD  00F2               	movwf	___lldiv@divisor+2
  3105  03FE  3000               	movlw	0
  3106  03FF  00F1               	movwf	___lldiv@divisor+1
  3107  0400  300A               	movlw	10
  3108  0401  00F0               	movwf	___lldiv@divisor
  3109  0402  0823               	movf	UTIL_INTtoSTR@num+3,w
  3110  0403  00F7               	movwf	___lldiv@dividend+3
  3111  0404  0822               	movf	UTIL_INTtoSTR@num+2,w
  3112  0405  00F6               	movwf	___lldiv@dividend+2
  3113  0406  0821               	movf	UTIL_INTtoSTR@num+1,w
  3114  0407  00F5               	movwf	___lldiv@dividend+1
  3115  0408  0820               	movf	UTIL_INTtoSTR@num,w
  3116  0409  00F4               	movwf	___lldiv@dividend
  3117  040A  120A  118A  2350  120A  118A  	fcall	___lldiv
  3118  040F  0873               	movf	?___lldiv+3,w
  3119  0410  1283               	bcf	3,5	;RP0=0, select bank0
  3120  0411  1303               	bcf	3,6	;RP1=0, select bank0
  3121  0412  00A3               	movwf	UTIL_INTtoSTR@num+3
  3122  0413  0872               	movf	?___lldiv+2,w
  3123  0414  00A2               	movwf	UTIL_INTtoSTR@num+2
  3124  0415  0871               	movf	?___lldiv+1,w
  3125  0416  00A1               	movwf	UTIL_INTtoSTR@num+1
  3126  0417  0870               	movf	?___lldiv,w
  3127  0418  00A0               	movwf	UTIL_INTtoSTR@num
  3128  0419  2BCE               	goto	l1587
  3129  041A                     l1589:	
  3130                           
  3131                           ;UTILITY.c: 29:     (*ppStr) += max;
  3132  041A  0825               	movf	UTIL_INTtoSTR@max,w
  3133  041B  00A6               	movwf	??_UTIL_INTtoSTR
  3134  041C  0824               	movf	UTIL_INTtoSTR@ppStr,w
  3135  041D  0084               	movwf	4
  3136  041E  0826               	movf	??_UTIL_INTtoSTR,w
  3137  041F  1383               	bcf	3,7	;select IRP bank0
  3138  0420  0780               	addwf	0,f
  3139  0421  0008               	return
  3140  0422                     __end_of_UTIL_INTtoSTR:	
  3141                           
  3142                           	psect	text16
  3143  0304                     __ptext16:	
  3144 ;; *************** function ___llmod *****************
  3145 ;; Defined at:
  3146 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\common\llmod.c"
  3147 ;; Parameters:    Size  Location     Type
  3148 ;;  divisor         4    0[COMMON] unsigned long 
  3149 ;;  dividend        4    4[COMMON] unsigned long 
  3150 ;; Auto vars:     Size  Location     Type
  3151 ;;  counter         1    9[COMMON] unsigned char 
  3152 ;; Return value:  Size  Location     Type
  3153 ;;                  4    0[COMMON] unsigned long 
  3154 ;; Registers used:
  3155 ;;		wreg, status,2, status,0
  3156 ;; Tracked objects:
  3157 ;;		On entry : 0/0
  3158 ;;		On exit  : 0/0
  3159 ;;		Unchanged: 0/0
  3160 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3161 ;;      Params:         8       0       0       0       0
  3162 ;;      Locals:         1       0       0       0       0
  3163 ;;      Temps:          1       0       0       0       0
  3164 ;;      Totals:        10       0       0       0       0
  3165 ;;Total ram usage:       10 bytes
  3166 ;; Hardware stack levels used:    1
  3167 ;; This function calls:
  3168 ;;		Nothing
  3169 ;; This function is called by:
  3170 ;;		_UTIL_INTtoSTR
  3171 ;;		_Convert_IntToString
  3172 ;; This function uses a non-reentrant model
  3173 ;;
  3174                           
  3175                           
  3176                           ;psect for function ___llmod
  3177  0304                     ___llmod:	
  3178                           
  3179                           ;incstack = 0
  3180                           ; Regs used in ___llmod: [wreg+status,2+status,0]
  3181  0304  0873               	movf	___llmod@divisor+3,w
  3182  0305  0472               	iorwf	___llmod@divisor+2,w
  3183  0306  0471               	iorwf	___llmod@divisor+1,w
  3184  0307  0470               	iorwf	___llmod@divisor,w
  3185  0308  1903               	skipnz
  3186  0309  2B47               	goto	l1563
  3187  030A  01F9               	clrf	___llmod@counter
  3188  030B  0AF9               	incf	___llmod@counter,f
  3189  030C                     l1553:	
  3190  030C  1BF3               	btfsc	___llmod@divisor+3,7
  3191  030D  2B1C               	goto	l1555
  3192  030E  3001               	movlw	1
  3193  030F  00F8               	movwf	??___llmod
  3194  0310                     u1385:	
  3195  0310  1003               	clrc
  3196  0311  0DF0               	rlf	___llmod@divisor,f
  3197  0312  0DF1               	rlf	___llmod@divisor+1,f
  3198  0313  0DF2               	rlf	___llmod@divisor+2,f
  3199  0314  0DF3               	rlf	___llmod@divisor+3,f
  3200  0315  0BF8               	decfsz	??___llmod,f
  3201  0316  2B10               	goto	u1385
  3202  0317  3001               	movlw	1
  3203  0318  00F8               	movwf	??___llmod
  3204  0319  0878               	movf	??___llmod,w
  3205  031A  07F9               	addwf	___llmod@counter,f
  3206  031B  2B0C               	goto	l1553
  3207  031C                     l1555:	
  3208  031C  0873               	movf	___llmod@divisor+3,w
  3209  031D  0277               	subwf	___llmod@dividend+3,w
  3210  031E  1D03               	skipz
  3211  031F  2B2A               	goto	u1405
  3212  0320  0872               	movf	___llmod@divisor+2,w
  3213  0321  0276               	subwf	___llmod@dividend+2,w
  3214  0322  1D03               	skipz
  3215  0323  2B2A               	goto	u1405
  3216  0324  0871               	movf	___llmod@divisor+1,w
  3217  0325  0275               	subwf	___llmod@dividend+1,w
  3218  0326  1D03               	skipz
  3219  0327  2B2A               	goto	u1405
  3220  0328  0870               	movf	___llmod@divisor,w
  3221  0329  0274               	subwf	___llmod@dividend,w
  3222  032A                     u1405:	
  3223  032A  1C03               	skipc
  3224  032B  2B3A               	goto	l1559
  3225  032C  0870               	movf	___llmod@divisor,w
  3226  032D  02F4               	subwf	___llmod@dividend,f
  3227  032E  0871               	movf	___llmod@divisor+1,w
  3228  032F  1C03               	skipc
  3229  0330  0F71               	incfsz	___llmod@divisor+1,w
  3230  0331  02F5               	subwf	___llmod@dividend+1,f
  3231  0332  0872               	movf	___llmod@divisor+2,w
  3232  0333  1C03               	skipc
  3233  0334  0F72               	incfsz	___llmod@divisor+2,w
  3234  0335  02F6               	subwf	___llmod@dividend+2,f
  3235  0336  0873               	movf	___llmod@divisor+3,w
  3236  0337  1C03               	skipc
  3237  0338  0F73               	incfsz	___llmod@divisor+3,w
  3238  0339  02F7               	subwf	___llmod@dividend+3,f
  3239  033A                     l1559:	
  3240  033A  3001               	movlw	1
  3241  033B                     u1415:	
  3242  033B  1003               	clrc
  3243  033C  0CF3               	rrf	___llmod@divisor+3,f
  3244  033D  0CF2               	rrf	___llmod@divisor+2,f
  3245  033E  0CF1               	rrf	___llmod@divisor+1,f
  3246  033F  0CF0               	rrf	___llmod@divisor,f
  3247  0340  3EFF               	addlw	-1
  3248  0341  1D03               	skipz
  3249  0342  2B3B               	goto	u1415
  3250  0343  3001               	movlw	1
  3251  0344  02F9               	subwf	___llmod@counter,f
  3252  0345  1D03               	btfss	3,2
  3253  0346  2B1C               	goto	l1555
  3254  0347                     l1563:	
  3255  0347  0877               	movf	___llmod@dividend+3,w
  3256  0348  00F3               	movwf	?___llmod+3
  3257  0349  0876               	movf	___llmod@dividend+2,w
  3258  034A  00F2               	movwf	?___llmod+2
  3259  034B  0875               	movf	___llmod@dividend+1,w
  3260  034C  00F1               	movwf	?___llmod+1
  3261  034D  0874               	movf	___llmod@dividend,w
  3262  034E  00F0               	movwf	?___llmod
  3263  034F  0008               	return
  3264  0350                     __end_of___llmod:	
  3265                           
  3266                           	psect	text17
  3267  0350                     __ptext17:	
  3268 ;; *************** function ___lldiv *****************
  3269 ;; Defined at:
  3270 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\common\__lldiv.c"
  3271 ;; Parameters:    Size  Location     Type
  3272 ;;  divisor         4    0[COMMON] unsigned long 
  3273 ;;  dividend        4    4[COMMON] unsigned long 
  3274 ;; Auto vars:     Size  Location     Type
  3275 ;;  quotient        4    9[COMMON] unsigned long 
  3276 ;;  counter         1   13[COMMON] unsigned char 
  3277 ;; Return value:  Size  Location     Type
  3278 ;;                  4    0[COMMON] unsigned long 
  3279 ;; Registers used:
  3280 ;;		wreg, status,2, status,0
  3281 ;; Tracked objects:
  3282 ;;		On entry : 0/0
  3283 ;;		On exit  : 0/0
  3284 ;;		Unchanged: 0/0
  3285 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3286 ;;      Params:         8       0       0       0       0
  3287 ;;      Locals:         5       0       0       0       0
  3288 ;;      Temps:          1       0       0       0       0
  3289 ;;      Totals:        14       0       0       0       0
  3290 ;;Total ram usage:       14 bytes
  3291 ;; Hardware stack levels used:    1
  3292 ;; This function calls:
  3293 ;;		Nothing
  3294 ;; This function is called by:
  3295 ;;		_UTIL_INTtoSTR
  3296 ;;		_Convert_IntToString
  3297 ;; This function uses a non-reentrant model
  3298 ;;
  3299                           
  3300                           
  3301                           ;psect for function ___lldiv
  3302  0350                     ___lldiv:	
  3303                           
  3304                           ;incstack = 0
  3305                           ; Regs used in ___lldiv: [wreg+status,2+status,0]
  3306  0350  3000               	movlw	0
  3307  0351  00FC               	movwf	___lldiv@quotient+3
  3308  0352  3000               	movlw	0
  3309  0353  00FB               	movwf	___lldiv@quotient+2
  3310  0354  3000               	movlw	0
  3311  0355  00FA               	movwf	___lldiv@quotient+1
  3312  0356  3000               	movlw	0
  3313  0357  00F9               	movwf	___lldiv@quotient
  3314  0358  0873               	movf	___lldiv@divisor+3,w
  3315  0359  0472               	iorwf	___lldiv@divisor+2,w
  3316  035A  0471               	iorwf	___lldiv@divisor+1,w
  3317  035B  0470               	iorwf	___lldiv@divisor,w
  3318  035C  1903               	skipnz
  3319  035D  2BA5               	goto	l1543
  3320  035E  01FD               	clrf	___lldiv@counter
  3321  035F  0AFD               	incf	___lldiv@counter,f
  3322  0360                     l1529:	
  3323  0360  1BF3               	btfsc	___lldiv@divisor+3,7
  3324  0361  2B70               	goto	l1531
  3325  0362  3001               	movlw	1
  3326  0363  00F8               	movwf	??___lldiv
  3327  0364                     u1315:	
  3328  0364  1003               	clrc
  3329  0365  0DF0               	rlf	___lldiv@divisor,f
  3330  0366  0DF1               	rlf	___lldiv@divisor+1,f
  3331  0367  0DF2               	rlf	___lldiv@divisor+2,f
  3332  0368  0DF3               	rlf	___lldiv@divisor+3,f
  3333  0369  0BF8               	decfsz	??___lldiv,f
  3334  036A  2B64               	goto	u1315
  3335  036B  3001               	movlw	1
  3336  036C  00F8               	movwf	??___lldiv
  3337  036D  0878               	movf	??___lldiv,w
  3338  036E  07FD               	addwf	___lldiv@counter,f
  3339  036F  2B60               	goto	l1529
  3340  0370                     l1531:	
  3341  0370  3001               	movlw	1
  3342  0371  00F8               	movwf	??___lldiv
  3343  0372                     u1335:	
  3344  0372  1003               	clrc
  3345  0373  0DF9               	rlf	___lldiv@quotient,f
  3346  0374  0DFA               	rlf	___lldiv@quotient+1,f
  3347  0375  0DFB               	rlf	___lldiv@quotient+2,f
  3348  0376  0DFC               	rlf	___lldiv@quotient+3,f
  3349  0377  0BF8               	decfsz	??___lldiv,f
  3350  0378  2B72               	goto	u1335
  3351  0379  0873               	movf	___lldiv@divisor+3,w
  3352  037A  0277               	subwf	___lldiv@dividend+3,w
  3353  037B  1D03               	skipz
  3354  037C  2B87               	goto	u1345
  3355  037D  0872               	movf	___lldiv@divisor+2,w
  3356  037E  0276               	subwf	___lldiv@dividend+2,w
  3357  037F  1D03               	skipz
  3358  0380  2B87               	goto	u1345
  3359  0381  0871               	movf	___lldiv@divisor+1,w
  3360  0382  0275               	subwf	___lldiv@dividend+1,w
  3361  0383  1D03               	skipz
  3362  0384  2B87               	goto	u1345
  3363  0385  0870               	movf	___lldiv@divisor,w
  3364  0386  0274               	subwf	___lldiv@dividend,w
  3365  0387                     u1345:	
  3366  0387  1C03               	skipc
  3367  0388  2B98               	goto	l1539
  3368  0389  0870               	movf	___lldiv@divisor,w
  3369  038A  02F4               	subwf	___lldiv@dividend,f
  3370  038B  0871               	movf	___lldiv@divisor+1,w
  3371  038C  1C03               	skipc
  3372  038D  0F71               	incfsz	___lldiv@divisor+1,w
  3373  038E  02F5               	subwf	___lldiv@dividend+1,f
  3374  038F  0872               	movf	___lldiv@divisor+2,w
  3375  0390  1C03               	skipc
  3376  0391  0F72               	incfsz	___lldiv@divisor+2,w
  3377  0392  02F6               	subwf	___lldiv@dividend+2,f
  3378  0393  0873               	movf	___lldiv@divisor+3,w
  3379  0394  1C03               	skipc
  3380  0395  0F73               	incfsz	___lldiv@divisor+3,w
  3381  0396  02F7               	subwf	___lldiv@dividend+3,f
  3382  0397  1479               	bsf	___lldiv@quotient,0
  3383  0398                     l1539:	
  3384  0398  3001               	movlw	1
  3385  0399                     u1355:	
  3386  0399  1003               	clrc
  3387  039A  0CF3               	rrf	___lldiv@divisor+3,f
  3388  039B  0CF2               	rrf	___lldiv@divisor+2,f
  3389  039C  0CF1               	rrf	___lldiv@divisor+1,f
  3390  039D  0CF0               	rrf	___lldiv@divisor,f
  3391  039E  3EFF               	addlw	-1
  3392  039F  1D03               	skipz
  3393  03A0  2B99               	goto	u1355
  3394  03A1  3001               	movlw	1
  3395  03A2  02FD               	subwf	___lldiv@counter,f
  3396  03A3  1D03               	btfss	3,2
  3397  03A4  2B70               	goto	l1531
  3398  03A5                     l1543:	
  3399  03A5  087C               	movf	___lldiv@quotient+3,w
  3400  03A6  00F3               	movwf	?___lldiv+3
  3401  03A7  087B               	movf	___lldiv@quotient+2,w
  3402  03A8  00F2               	movwf	?___lldiv+2
  3403  03A9  087A               	movf	___lldiv@quotient+1,w
  3404  03AA  00F1               	movwf	?___lldiv+1
  3405  03AB  0879               	movf	___lldiv@quotient,w
  3406  03AC  00F0               	movwf	?___lldiv
  3407  03AD  0008               	return
  3408  03AE                     __end_of___lldiv:	
  3409                           
  3410                           	psect	text18
  3411  025A                     __ptext18:	
  3412 ;; *************** function _LCD_str *****************
  3413 ;; Defined at:
  3414 ;;		line 163 in file "LCD.c"
  3415 ;; Parameters:    Size  Location     Type
  3416 ;;  str             2    2[BANK0 ] PTR unsigned char 
  3417 ;;		 -> STR_7(8), STR_6(7), STR_5(16), STR_4(12), 
  3418 ;;		 -> STR_3(13), STR_2(16), STR_1(12), LCD_num@str(17), 
  3419 ;;  line            1    4[BANK0 ] enum E895
  3420 ;;  col             1    5[BANK0 ] enum E899
  3421 ;; Auto vars:     Size  Location     Type
  3422 ;;		None
  3423 ;; Return value:  Size  Location     Type
  3424 ;;                  1    wreg      void 
  3425 ;; Registers used:
  3426 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  3427 ;; Tracked objects:
  3428 ;;		On entry : 0/0
  3429 ;;		On exit  : 0/0
  3430 ;;		Unchanged: 0/0
  3431 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3432 ;;      Params:         0       4       0       0       0
  3433 ;;      Locals:         0       0       0       0       0
  3434 ;;      Temps:          0       2       0       0       0
  3435 ;;      Totals:         0       6       0       0       0
  3436 ;;Total ram usage:        6 bytes
  3437 ;; Hardware stack levels used:    1
  3438 ;; Hardware stack levels required when called:    5
  3439 ;; This function calls:
  3440 ;;		_LCD_char
  3441 ;; This function is called by:
  3442 ;;		_LCD_num
  3443 ;;		_AC_authentication
  3444 ;; This function uses a non-reentrant model
  3445 ;;
  3446                           
  3447                           
  3448                           ;psect for function _LCD_str
  3449  025A                     _LCD_str:	
  3450  025A                     l1575:	
  3451                           ;LCD.c: 165:     while(*str != '\0'){
  3452                           
  3453                           ;incstack = 0
  3454                           ; Regs used in _LCD_str: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  3455                           
  3456                           
  3457                           ;LCD.c: 165:     while(*str != '\0'){
  3458  025A  1283               	bcf	3,5	;RP0=0, select bank0
  3459  025B  1303               	bcf	3,6	;RP1=0, select bank0
  3460  025C  0823               	movf	LCD_str@str+1,w
  3461  025D  00FF               	movwf	127
  3462  025E  0822               	movf	LCD_str@str,w
  3463  025F  0084               	movwf	4
  3464  0260  120A  118A  2003  120A  118A  	fcall	stringtab
  3465  0265  3A00               	xorlw	0
  3466  0266  1903               	btfsc	3,2
  3467  0267  0008               	return
  3468                           
  3469                           ;LCD.c: 166:         LCD_char(*str,line,col);
  3470  0268  0824               	movf	LCD_str@line,w
  3471  0269  00A6               	movwf	??_LCD_str
  3472  026A  0826               	movf	??_LCD_str,w
  3473  026B  00FC               	movwf	LCD_char@line
  3474  026C  0825               	movf	LCD_str@col,w
  3475  026D  00A7               	movwf	??_LCD_str+1
  3476  026E  0827               	movf	??_LCD_str+1,w
  3477  026F  00FD               	movwf	LCD_char@col
  3478  0270  0823               	movf	LCD_str@str+1,w
  3479  0271  00FF               	movwf	127
  3480  0272  0822               	movf	LCD_str@str,w
  3481  0273  0084               	movwf	4
  3482  0274  120A  118A  2003  120A  118A  	fcall	stringtab
  3483  0279  120A  118A  2159  120A  118A  	fcall	_LCD_char
  3484                           
  3485                           ;LCD.c: 167:         str++;
  3486  027E  3001               	movlw	1
  3487  027F  1283               	bcf	3,5	;RP0=0, select bank0
  3488  0280  1303               	bcf	3,6	;RP1=0, select bank0
  3489  0281  07A2               	addwf	LCD_str@str,f
  3490  0282  1803               	skipnc
  3491  0283  0AA3               	incf	LCD_str@str+1,f
  3492  0284  3000               	movlw	0
  3493  0285  07A3               	addwf	LCD_str@str+1,f
  3494                           
  3495                           ;LCD.c: 168:         col++;
  3496  0286  3001               	movlw	1
  3497  0287  00A6               	movwf	??_LCD_str
  3498  0288  0826               	movf	??_LCD_str,w
  3499  0289  07A5               	addwf	LCD_str@col,f
  3500  028A  2A5A               	goto	l1575
  3501  028B                     __end_of_LCD_str:	
  3502                           
  3503                           	psect	text19
  3504  0159                     __ptext19:	
  3505 ;; *************** function _LCD_char *****************
  3506 ;; Defined at:
  3507 ;;		line 151 in file "LCD.c"
  3508 ;; Parameters:    Size  Location     Type
  3509 ;;  ch              1    wreg     unsigned char 
  3510 ;;  line            1   12[COMMON] enum E895
  3511 ;;  col             1   13[COMMON] enum E899
  3512 ;; Auto vars:     Size  Location     Type
  3513 ;;  ch              1    1[BANK0 ] unsigned char 
  3514 ;; Return value:  Size  Location     Type
  3515 ;;                  1    wreg      void 
  3516 ;; Registers used:
  3517 ;;		wreg, status,2, status,0, pclath, cstack
  3518 ;; Tracked objects:
  3519 ;;		On entry : 0/0
  3520 ;;		On exit  : 0/0
  3521 ;;		Unchanged: 0/0
  3522 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3523 ;;      Params:         2       0       0       0       0
  3524 ;;      Locals:         0       1       0       0       0
  3525 ;;      Temps:          0       1       0       0       0
  3526 ;;      Totals:         2       2       0       0       0
  3527 ;;Total ram usage:        4 bytes
  3528 ;; Hardware stack levels used:    1
  3529 ;; Hardware stack levels required when called:    4
  3530 ;; This function calls:
  3531 ;;		_LCD_goTo
  3532 ;;		_LCD_out
  3533 ;; This function is called by:
  3534 ;;		_LCD_str
  3535 ;;		_PASSWORD_read
  3536 ;; This function uses a non-reentrant model
  3537 ;;
  3538                           
  3539                           
  3540                           ;psect for function _LCD_char
  3541  0159                     _LCD_char:	
  3542                           
  3543                           ;incstack = 0
  3544                           ; Regs used in _LCD_char: [wreg+status,2+status,0+pclath+cstack]
  3545                           ;LCD_char@ch stored from wreg
  3546  0159  1283               	bcf	3,5	;RP0=0, select bank0
  3547  015A  1303               	bcf	3,6	;RP1=0, select bank0
  3548  015B  00A1               	movwf	LCD_char@ch
  3549                           
  3550                           ;LCD.c: 154:     LCD_goTo(line,col);
  3551  015C  087D               	movf	LCD_char@col,w
  3552  015D  00A0               	movwf	??_LCD_char
  3553  015E  0820               	movf	??_LCD_char,w
  3554  015F  00F7               	movwf	LCD_goTo@col
  3555  0160  087C               	movf	LCD_char@line,w
  3556  0161  120A  118A  20D3  120A  118A  	fcall	_LCD_goTo
  3557                           
  3558                           ;LCD.c: 157:     ((((((*((volatile tRegister8 *)(0x09))).Reg))) = (((((*((volatile tRegi
      +                          ster8 *)(0x09))).Reg)) & (~(1 << ((0))))) | (((1)) << ((0))))));
  3559  0166  1283               	bcf	3,5	;RP0=0, select bank0
  3560  0167  1303               	bcf	3,6	;RP1=0, select bank0
  3561  0168  0809               	movf	9,w	;volatile
  3562  0169  39FE               	andlw	254
  3563  016A  3801               	iorlw	1
  3564  016B  00A0               	movwf	??_LCD_char
  3565  016C  0820               	movf	??_LCD_char,w
  3566  016D  0089               	movwf	9	;volatile
  3567                           
  3568                           ;LCD.c: 160:     LCD_out(ch);
  3569  016E  0821               	movf	LCD_char@ch,w
  3570  016F  120A  118A  267D   	fcall	_LCD_out
  3571  0172  0008               	return
  3572  0173                     __end_of_LCD_char:	
  3573                           
  3574                           	psect	text20
  3575  00D3                     __ptext20:	
  3576 ;; *************** function _LCD_goTo *****************
  3577 ;; Defined at:
  3578 ;;		line 271 in file "LCD.c"
  3579 ;; Parameters:    Size  Location     Type
  3580 ;;  line            1    wreg     enum E895
  3581 ;;  col             1    7[COMMON] enum E899
  3582 ;; Auto vars:     Size  Location     Type
  3583 ;;  line            1   10[COMMON] enum E895
  3584 ;;  address         1   11[COMMON] unsigned char 
  3585 ;; Return value:  Size  Location     Type
  3586 ;;                  1    wreg      void 
  3587 ;; Registers used:
  3588 ;;		wreg, status,2, status,0, pclath, cstack
  3589 ;; Tracked objects:
  3590 ;;		On entry : 0/0
  3591 ;;		On exit  : 0/0
  3592 ;;		Unchanged: 0/0
  3593 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3594 ;;      Params:         1       0       0       0       0
  3595 ;;      Locals:         2       0       0       0       0
  3596 ;;      Temps:          2       0       0       0       0
  3597 ;;      Totals:         5       0       0       0       0
  3598 ;;Total ram usage:        5 bytes
  3599 ;; Hardware stack levels used:    1
  3600 ;; Hardware stack levels required when called:    3
  3601 ;; This function calls:
  3602 ;;		_LCD_cmd
  3603 ;; This function is called by:
  3604 ;;		_LCD_char
  3605 ;; This function uses a non-reentrant model
  3606 ;;
  3607                           
  3608                           
  3609                           ;psect for function _LCD_goTo
  3610  00D3                     _LCD_goTo:	
  3611                           
  3612                           ;incstack = 0
  3613                           ; Regs used in _LCD_goTo: [wreg+status,2+status,0+pclath+cstack]
  3614                           ;LCD_goTo@line stored from wreg
  3615  00D3  00FA               	movwf	LCD_goTo@line
  3616                           
  3617                           ;LCD.c: 274:     tByte address;;LCD.c: 276:     address = (line * (0x40)) + col;
  3618  00D4  087A               	movf	LCD_goTo@line,w
  3619  00D5  00F8               	movwf	??_LCD_goTo
  3620  00D6  3006               	movlw	6
  3621  00D7                     u1215:	
  3622  00D7  1003               	clrc
  3623  00D8  0DF8               	rlf	??_LCD_goTo,f
  3624  00D9  3EFF               	addlw	-1
  3625  00DA  1D03               	skipz
  3626  00DB  28D7               	goto	u1215
  3627  00DC  0877               	movf	LCD_goTo@col,w
  3628  00DD  0778               	addwf	??_LCD_goTo,w
  3629  00DE  00F9               	movwf	??_LCD_goTo+1
  3630  00DF  0879               	movf	??_LCD_goTo+1,w
  3631  00E0  00FB               	movwf	LCD_goTo@address
  3632                           
  3633                           ;LCD.c: 278:     LCD_cmd((0x80) | address);
  3634  00E1  087B               	movf	LCD_goTo@address,w
  3635  00E2  3880               	iorlw	128
  3636  00E3  120A  118A  20AD   	fcall	_LCD_cmd
  3637  00E6  0008               	return
  3638  00E7                     __end_of_LCD_goTo:	
  3639                           
  3640                           	psect	text21
  3641  00FB                     __ptext21:	
  3642 ;; *************** function _LCD_clear *****************
  3643 ;; Defined at:
  3644 ;;		line 182 in file "LCD.c"
  3645 ;; Parameters:    Size  Location     Type
  3646 ;;		None
  3647 ;; Auto vars:     Size  Location     Type
  3648 ;;		None
  3649 ;; Return value:  Size  Location     Type
  3650 ;;                  1    wreg      void 
  3651 ;; Registers used:
  3652 ;;		wreg, status,2, status,0, pclath, cstack
  3653 ;; Tracked objects:
  3654 ;;		On entry : 0/0
  3655 ;;		On exit  : 0/0
  3656 ;;		Unchanged: 0/0
  3657 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3658 ;;      Params:         0       0       0       0       0
  3659 ;;      Locals:         0       0       0       0       0
  3660 ;;      Temps:          2       0       0       0       0
  3661 ;;      Totals:         2       0       0       0       0
  3662 ;;Total ram usage:        2 bytes
  3663 ;; Hardware stack levels used:    1
  3664 ;; Hardware stack levels required when called:    3
  3665 ;; This function calls:
  3666 ;;		_LCD_cmd
  3667 ;; This function is called by:
  3668 ;;		_AC_authentication
  3669 ;; This function uses a non-reentrant model
  3670 ;;
  3671                           
  3672                           
  3673                           ;psect for function _LCD_clear
  3674  00FB                     _LCD_clear:	
  3675                           
  3676                           ;LCD.c: 184:     LCD_cmd((0x01));
  3677                           
  3678                           ;incstack = 0
  3679                           ; Regs used in _LCD_clear: [wreg+status,2+status,0+pclath+cstack]
  3680  00FB  3001               	movlw	1
  3681  00FC  120A  118A  20AD  120A  118A  	fcall	_LCD_cmd
  3682                           
  3683                           ;LCD.c: 185:     LCD_cmd((0x02));
  3684  0101  3002               	movlw	2
  3685  0102  120A  118A  20AD  120A  118A  	fcall	_LCD_cmd
  3686                           
  3687                           ;LCD.c: 186:     _delay((unsigned long)((1)*(8000000/4000.0)));
  3688  0107  3003               	movlw	3
  3689  0108  00F8               	movwf	??_LCD_clear+1
  3690  0109  3097               	movlw	151
  3691  010A  00F7               	movwf	??_LCD_clear
  3692  010B                     u1937:	
  3693  010B  0BF7               	decfsz	??_LCD_clear,f
  3694  010C  290B               	goto	u1937
  3695  010D  0BF8               	decfsz	??_LCD_clear+1,f
  3696  010E  290B               	goto	u1937
  3697  010F  2910               	nop2
  3698  0110  0008               	return
  3699  0111                     __end_of_LCD_clear:	
  3700                           
  3701                           	psect	text22
  3702  00AD                     __ptext22:	
  3703 ;; *************** function _LCD_cmd *****************
  3704 ;; Defined at:
  3705 ;;		line 261 in file "LCD.c"
  3706 ;; Parameters:    Size  Location     Type
  3707 ;;  cmd             1    wreg     unsigned char 
  3708 ;; Auto vars:     Size  Location     Type
  3709 ;;  cmd             1    6[COMMON] unsigned char 
  3710 ;; Return value:  Size  Location     Type
  3711 ;;                  1    wreg      void 
  3712 ;; Registers used:
  3713 ;;		wreg, status,2, status,0, pclath, cstack
  3714 ;; Tracked objects:
  3715 ;;		On entry : 0/0
  3716 ;;		On exit  : 0/0
  3717 ;;		Unchanged: 0/0
  3718 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3719 ;;      Params:         0       0       0       0       0
  3720 ;;      Locals:         1       0       0       0       0
  3721 ;;      Temps:          1       0       0       0       0
  3722 ;;      Totals:         2       0       0       0       0
  3723 ;;Total ram usage:        2 bytes
  3724 ;; Hardware stack levels used:    1
  3725 ;; Hardware stack levels required when called:    2
  3726 ;; This function calls:
  3727 ;;		_LCD_out
  3728 ;; This function is called by:
  3729 ;;		_LCD_init
  3730 ;;		_LCD_clear
  3731 ;;		_LCD_goTo
  3732 ;;		_LCD_ON
  3733 ;;		_LCD_OFF
  3734 ;;		_LCD_custom
  3735 ;;		_LCD_update
  3736 ;; This function uses a non-reentrant model
  3737 ;;
  3738                           
  3739                           
  3740                           ;psect for function _LCD_cmd
  3741  00AD                     _LCD_cmd:	
  3742                           
  3743                           ;incstack = 0
  3744                           ; Regs used in _LCD_cmd: [wreg+status,2+status,0+pclath+cstack]
  3745                           ;LCD_cmd@cmd stored from wreg
  3746  00AD  00F6               	movwf	LCD_cmd@cmd
  3747                           
  3748                           ;LCD.c: 265:     ((((((*((volatile tRegister8 *)(0x09))).Reg))) = (((((*((volatile tRegi
      +                          ster8 *)(0x09))).Reg)) & (~(1 << ((0))))) | (((0)) << ((0))))));
  3749  00AE  1283               	bcf	3,5	;RP0=0, select bank0
  3750  00AF  1303               	bcf	3,6	;RP1=0, select bank0
  3751  00B0  0809               	movf	9,w	;volatile
  3752  00B1  39FE               	andlw	254
  3753  00B2  00F5               	movwf	??_LCD_cmd
  3754  00B3  0875               	movf	??_LCD_cmd,w
  3755  00B4  0089               	movwf	9	;volatile
  3756                           
  3757                           ;LCD.c: 266:     LCD_out(cmd);
  3758  00B5  0876               	movf	LCD_cmd@cmd,w
  3759  00B6  120A  118A  267D  120A  118A  	fcall	_LCD_out
  3760                           
  3761                           ;LCD.c: 267:     _delay((unsigned long)((50)*(8000000/4000000.0)));
  3762  00BB  3021               	movlw	33
  3763  00BC  00F5               	movwf	??_LCD_cmd
  3764  00BD                     u1947:	
  3765  00BD  0BF5               	decfsz	??_LCD_cmd,f
  3766  00BE  28BD               	goto	u1947
  3767  00BF  0008               	return
  3768  00C0                     __end_of_LCD_cmd:	
  3769                           
  3770                           	psect	text23
  3771  067D                     __ptext23:	
  3772 ;; *************** function _LCD_out *****************
  3773 ;; Defined at:
  3774 ;;		line 292 in file "LCD.c"
  3775 ;; Parameters:    Size  Location     Type
  3776 ;;  data            1    wreg     unsigned char 
  3777 ;; Auto vars:     Size  Location     Type
  3778 ;;  data            1    4[COMMON] unsigned char 
  3779 ;; Return value:  Size  Location     Type
  3780 ;;                  1    wreg      void 
  3781 ;; Registers used:
  3782 ;;		wreg, status,2, status,0, pclath, cstack
  3783 ;; Tracked objects:
  3784 ;;		On entry : 0/0
  3785 ;;		On exit  : 0/0
  3786 ;;		Unchanged: 0/0
  3787 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3788 ;;      Params:         0       0       0       0       0
  3789 ;;      Locals:         1       0       0       0       0
  3790 ;;      Temps:          3       0       0       0       0
  3791 ;;      Totals:         4       0       0       0       0
  3792 ;;Total ram usage:        4 bytes
  3793 ;; Hardware stack levels used:    1
  3794 ;; Hardware stack levels required when called:    1
  3795 ;; This function calls:
  3796 ;;		_LCD_latch
  3797 ;; This function is called by:
  3798 ;;		_LCD_char
  3799 ;;		_LCD_cmd
  3800 ;;		_LCD_custom
  3801 ;; This function uses a non-reentrant model
  3802 ;;
  3803                           
  3804                           
  3805                           ;psect for function _LCD_out
  3806  067D                     _LCD_out:	
  3807                           
  3808                           ;incstack = 0
  3809                           ; Regs used in _LCD_out: [wreg+status,2+status,0+pclath+cstack]
  3810                           ;LCD_out@data stored from wreg
  3811  067D  00F4               	movwf	LCD_out@data
  3812                           
  3813                           ;LCD.c: 294:     if(LCD_4_MODE == currentMode){
  3814  067E  1283               	bcf	3,5	;RP0=0, select bank0
  3815  067F  1303               	bcf	3,6	;RP1=0, select bank0
  3816  0680  0869               	movf	_currentMode,w
  3817  0681  1D03               	btfss	3,2
  3818  0682  2F39               	goto	l1443
  3819                           
  3820                           ;LCD.c: 297:         ((((((*((volatile tRegister8 *)(0x08))).Reg))) = (((((*((volatile t
      +                          Register8 *)(0x08))).Reg)) & (~(1 << ((0))))) | ((data & (1 << 4)) >> 4 << ((0))))));
  3821  0683  0874               	movf	LCD_out@data,w
  3822  0684  00F1               	movwf	??_LCD_out
  3823  0685  3004               	movlw	4
  3824  0686                     u965:	
  3825  0686  1003               	clrc
  3826  0687  0CF1               	rrf	??_LCD_out,f
  3827  0688  3EFF               	addlw	-1
  3828  0689  1D03               	skipz
  3829  068A  2E86               	goto	u965
  3830  068B  3001               	movlw	1
  3831  068C  0571               	andwf	??_LCD_out,w
  3832  068D  00F2               	movwf	??_LCD_out+1
  3833  068E  0808               	movf	8,w	;volatile
  3834  068F  39FE               	andlw	254
  3835  0690  0472               	iorwf	??_LCD_out+1,w
  3836  0691  00F3               	movwf	??_LCD_out+2
  3837  0692  0873               	movf	??_LCD_out+2,w
  3838  0693  0088               	movwf	8	;volatile
  3839                           
  3840                           ;LCD.c: 298:         ((((((*((volatile tRegister8 *)(0x08))).Reg))) = (((((*((volatile t
      +                          Register8 *)(0x08))).Reg)) & (~(1 << ((1))))) | ((data & (1 << 5)) >> 5 << ((1))))));
  3841  0694  0874               	movf	LCD_out@data,w
  3842  0695  00F1               	movwf	??_LCD_out
  3843  0696  3005               	movlw	5
  3844  0697                     u975:	
  3845  0697  1003               	clrc
  3846  0698  0CF1               	rrf	??_LCD_out,f
  3847  0699  3EFF               	addlw	-1
  3848  069A  1D03               	skipz
  3849  069B  2E97               	goto	u975
  3850  069C  0871               	movf	??_LCD_out,w
  3851  069D  3901               	andlw	1
  3852  069E  00F2               	movwf	??_LCD_out+1
  3853  069F  3001               	movlw	1
  3854  06A0                     u985:	
  3855  06A0  1003               	clrc
  3856  06A1  0DF2               	rlf	??_LCD_out+1,f
  3857  06A2  3EFF               	addlw	-1
  3858  06A3  1D03               	skipz
  3859  06A4  2EA0               	goto	u985
  3860  06A5  0808               	movf	8,w	;volatile
  3861  06A6  39FD               	andlw	253
  3862  06A7  0472               	iorwf	??_LCD_out+1,w
  3863  06A8  00F3               	movwf	??_LCD_out+2
  3864  06A9  0873               	movf	??_LCD_out+2,w
  3865  06AA  0088               	movwf	8	;volatile
  3866                           
  3867                           ;LCD.c: 299:         ((((((*((volatile tRegister8 *)(0x08))).Reg))) = (((((*((volatile t
      +                          Register8 *)(0x08))).Reg)) & (~(1 << ((2))))) | ((data & (1 << 6)) >> 6 << ((2))))));
  3868  06AB  0874               	movf	LCD_out@data,w
  3869  06AC  00F1               	movwf	??_LCD_out
  3870  06AD  3006               	movlw	6
  3871  06AE                     u995:	
  3872  06AE  1003               	clrc
  3873  06AF  0CF1               	rrf	??_LCD_out,f
  3874  06B0  3EFF               	addlw	-1
  3875  06B1  1D03               	skipz
  3876  06B2  2EAE               	goto	u995
  3877  06B3  0871               	movf	??_LCD_out,w
  3878  06B4  3901               	andlw	1
  3879  06B5  00F2               	movwf	??_LCD_out+1
  3880  06B6  3002               	movlw	2
  3881  06B7                     u1005:	
  3882  06B7  1003               	clrc
  3883  06B8  0DF2               	rlf	??_LCD_out+1,f
  3884  06B9  3EFF               	addlw	-1
  3885  06BA  1D03               	skipz
  3886  06BB  2EB7               	goto	u1005
  3887  06BC  0808               	movf	8,w	;volatile
  3888  06BD  39FB               	andlw	251
  3889  06BE  0472               	iorwf	??_LCD_out+1,w
  3890  06BF  00F3               	movwf	??_LCD_out+2
  3891  06C0  0873               	movf	??_LCD_out+2,w
  3892  06C1  0088               	movwf	8	;volatile
  3893                           
  3894                           ;LCD.c: 300:         ((((((*((volatile tRegister8 *)(0x08))).Reg))) = (((((*((volatile t
      +                          Register8 *)(0x08))).Reg)) & (~(1 << ((3))))) | ((data & (1 << 7)) >> 7 << ((3))))));
  3895  06C2  0874               	movf	LCD_out@data,w
  3896  06C3  00F1               	movwf	??_LCD_out
  3897  06C4  3007               	movlw	7
  3898  06C5                     u1015:	
  3899  06C5  1003               	clrc
  3900  06C6  0CF1               	rrf	??_LCD_out,f
  3901  06C7  3EFF               	addlw	-1
  3902  06C8  1D03               	skipz
  3903  06C9  2EC5               	goto	u1015
  3904  06CA  0871               	movf	??_LCD_out,w
  3905  06CB  3901               	andlw	1
  3906  06CC  00F2               	movwf	??_LCD_out+1
  3907  06CD  3003               	movlw	3
  3908  06CE                     u1025:	
  3909  06CE  1003               	clrc
  3910  06CF  0DF2               	rlf	??_LCD_out+1,f
  3911  06D0  3EFF               	addlw	-1
  3912  06D1  1D03               	skipz
  3913  06D2  2ECE               	goto	u1025
  3914  06D3  0808               	movf	8,w	;volatile
  3915  06D4  39F7               	andlw	247
  3916  06D5  0472               	iorwf	??_LCD_out+1,w
  3917  06D6  00F3               	movwf	??_LCD_out+2
  3918  06D7  0873               	movf	??_LCD_out+2,w
  3919  06D8  0088               	movwf	8	;volatile
  3920                           
  3921                           ;LCD.c: 302:         LCD_latch();
  3922  06D9  120A  118A  209B  120A  118A  	fcall	_LCD_latch
  3923                           
  3924                           ;LCD.c: 304:         _delay((unsigned long)((100)*(8000000/4000000.0)));
  3925  06DE  3042               	movlw	66
  3926  06DF  00F1               	movwf	??_LCD_out
  3927  06E0                     u1957:	
  3928  06E0  0BF1               	decfsz	??_LCD_out,f
  3929  06E1  2EE0               	goto	u1957
  3930  06E2  0000               	nop
  3931                           
  3932                           ;LCD.c: 306:         ((((((*((volatile tRegister8 *)(0x08))).Reg))) = (((((*((volatile t
      +                          Register8 *)(0x08))).Reg)) & (~(1 << ((0))))) | ((data & (1 << 0)) >> 0 << ((0))))));
  3933  06E3  3001               	movlw	1
  3934  06E4  0574               	andwf	LCD_out@data,w
  3935  06E5  00F1               	movwf	??_LCD_out
  3936  06E6  1283               	bcf	3,5	;RP0=0, select bank0
  3937  06E7  1303               	bcf	3,6	;RP1=0, select bank0
  3938  06E8  0808               	movf	8,w	;volatile
  3939  06E9  39FE               	andlw	254
  3940  06EA  0471               	iorwf	??_LCD_out,w
  3941  06EB  00F2               	movwf	??_LCD_out+1
  3942  06EC  0872               	movf	??_LCD_out+1,w
  3943  06ED  0088               	movwf	8	;volatile
  3944                           
  3945                           ;LCD.c: 307:         ((((((*((volatile tRegister8 *)(0x08))).Reg))) = (((((*((volatile t
      +                          Register8 *)(0x08))).Reg)) & (~(1 << ((1))))) | ((data & (1 << 1)) >> 1 << ((1))))));
  3946  06EE  0874               	movf	LCD_out@data,w
  3947  06EF  00F1               	movwf	??_LCD_out
  3948  06F0  1003               	clrc
  3949  06F1  0C71               	rrf	??_LCD_out,w
  3950  06F2  3901               	andlw	1
  3951  06F3  00F2               	movwf	??_LCD_out+1
  3952  06F4  3001               	movlw	1
  3953  06F5                     u1035:	
  3954  06F5  1003               	clrc
  3955  06F6  0DF2               	rlf	??_LCD_out+1,f
  3956  06F7  3EFF               	addlw	-1
  3957  06F8  1D03               	skipz
  3958  06F9  2EF5               	goto	u1035
  3959  06FA  0808               	movf	8,w	;volatile
  3960  06FB  39FD               	andlw	253
  3961  06FC  0472               	iorwf	??_LCD_out+1,w
  3962  06FD  00F3               	movwf	??_LCD_out+2
  3963  06FE  0873               	movf	??_LCD_out+2,w
  3964  06FF  0088               	movwf	8	;volatile
  3965                           
  3966                           ;LCD.c: 308:         ((((((*((volatile tRegister8 *)(0x08))).Reg))) = (((((*((volatile t
      +                          Register8 *)(0x08))).Reg)) & (~(1 << ((2))))) | ((data & (1 << 2)) >> 2 << ((2))))));
  3967  0700  0874               	movf	LCD_out@data,w
  3968  0701  00F1               	movwf	??_LCD_out
  3969  0702  3002               	movlw	2
  3970  0703                     u1045:	
  3971  0703  1003               	clrc
  3972  0704  0CF1               	rrf	??_LCD_out,f
  3973  0705  3EFF               	addlw	-1
  3974  0706  1D03               	skipz
  3975  0707  2F03               	goto	u1045
  3976  0708  0871               	movf	??_LCD_out,w
  3977  0709  3901               	andlw	1
  3978  070A  00F2               	movwf	??_LCD_out+1
  3979  070B  3002               	movlw	2
  3980  070C                     u1055:	
  3981  070C  1003               	clrc
  3982  070D  0DF2               	rlf	??_LCD_out+1,f
  3983  070E  3EFF               	addlw	-1
  3984  070F  1D03               	skipz
  3985  0710  2F0C               	goto	u1055
  3986  0711  0808               	movf	8,w	;volatile
  3987  0712  39FB               	andlw	251
  3988  0713  0472               	iorwf	??_LCD_out+1,w
  3989  0714  00F3               	movwf	??_LCD_out+2
  3990  0715  0873               	movf	??_LCD_out+2,w
  3991  0716  0088               	movwf	8	;volatile
  3992                           
  3993                           ;LCD.c: 309:         ((((((*((volatile tRegister8 *)(0x08))).Reg))) = (((((*((volatile t
      +                          Register8 *)(0x08))).Reg)) & (~(1 << ((3))))) | ((data & (1 << 3)) >> 3 << ((3))))));
  3994  0717  0874               	movf	LCD_out@data,w
  3995  0718  00F1               	movwf	??_LCD_out
  3996  0719  3003               	movlw	3
  3997  071A                     u1065:	
  3998  071A  1003               	clrc
  3999  071B  0CF1               	rrf	??_LCD_out,f
  4000  071C  3EFF               	addlw	-1
  4001  071D  1D03               	skipz
  4002  071E  2F1A               	goto	u1065
  4003  071F  0871               	movf	??_LCD_out,w
  4004  0720  3901               	andlw	1
  4005  0721  00F2               	movwf	??_LCD_out+1
  4006  0722  3003               	movlw	3
  4007  0723                     u1075:	
  4008  0723  1003               	clrc
  4009  0724  0DF2               	rlf	??_LCD_out+1,f
  4010  0725  3EFF               	addlw	-1
  4011  0726  1D03               	skipz
  4012  0727  2F23               	goto	u1075
  4013  0728  0808               	movf	8,w	;volatile
  4014  0729  39F7               	andlw	247
  4015  072A  0472               	iorwf	??_LCD_out+1,w
  4016  072B  00F3               	movwf	??_LCD_out+2
  4017  072C  0873               	movf	??_LCD_out+2,w
  4018  072D  0088               	movwf	8	;volatile
  4019                           
  4020                           ;LCD.c: 311:         LCD_latch();
  4021  072E  120A  118A  209B  120A  118A  	fcall	_LCD_latch
  4022                           
  4023                           ;LCD.c: 312:         _delay((unsigned long)((100)*(8000000/4000000.0)));
  4024  0733  3042               	movlw	66
  4025  0734  00F1               	movwf	??_LCD_out
  4026  0735                     u1967:	
  4027  0735  0BF1               	decfsz	??_LCD_out,f
  4028  0736  2F35               	goto	u1967
  4029  0737  0000               	nop
  4030                           
  4031                           ;LCD.c: 313:     }else {
  4032  0738  0008               	return
  4033  0739                     l1443:	
  4034                           
  4035                           ;LCD.c: 315:         ((((((*((volatile tRegister8 *)(0x08))).Reg))) = (((((*((volatile t
      +                          Register8 *)(0x08))).Reg)) & (~(1 << ((0))))) | ((data & (1 << 0)) >> 0 << ((0))))));
  4036  0739  3001               	movlw	1
  4037  073A  0574               	andwf	LCD_out@data,w
  4038  073B  00F1               	movwf	??_LCD_out
  4039  073C  0808               	movf	8,w	;volatile
  4040  073D  39FE               	andlw	254
  4041  073E  0471               	iorwf	??_LCD_out,w
  4042  073F  00F2               	movwf	??_LCD_out+1
  4043  0740  0872               	movf	??_LCD_out+1,w
  4044  0741  0088               	movwf	8	;volatile
  4045                           
  4046                           ;LCD.c: 316:         ((((((*((volatile tRegister8 *)(0x08))).Reg))) = (((((*((volatile t
      +                          Register8 *)(0x08))).Reg)) & (~(1 << ((1))))) | ((data & (1 << 1)) >> 1 << ((1))))));
  4047  0742  0874               	movf	LCD_out@data,w
  4048  0743  00F1               	movwf	??_LCD_out
  4049  0744  1003               	clrc
  4050  0745  0C71               	rrf	??_LCD_out,w
  4051  0746  3901               	andlw	1
  4052  0747  00F2               	movwf	??_LCD_out+1
  4053  0748  3001               	movlw	1
  4054  0749                     u1085:	
  4055  0749  1003               	clrc
  4056  074A  0DF2               	rlf	??_LCD_out+1,f
  4057  074B  3EFF               	addlw	-1
  4058  074C  1D03               	skipz
  4059  074D  2F49               	goto	u1085
  4060  074E  0808               	movf	8,w	;volatile
  4061  074F  39FD               	andlw	253
  4062  0750  0472               	iorwf	??_LCD_out+1,w
  4063  0751  00F3               	movwf	??_LCD_out+2
  4064  0752  0873               	movf	??_LCD_out+2,w
  4065  0753  0088               	movwf	8	;volatile
  4066                           
  4067                           ;LCD.c: 317:         ((((((*((volatile tRegister8 *)(0x08))).Reg))) = (((((*((volatile t
      +                          Register8 *)(0x08))).Reg)) & (~(1 << ((2))))) | ((data & (1 << 2)) >> 2 << ((2))))));
  4068  0754  0874               	movf	LCD_out@data,w
  4069  0755  00F1               	movwf	??_LCD_out
  4070  0756  3002               	movlw	2
  4071  0757                     u1095:	
  4072  0757  1003               	clrc
  4073  0758  0CF1               	rrf	??_LCD_out,f
  4074  0759  3EFF               	addlw	-1
  4075  075A  1D03               	skipz
  4076  075B  2F57               	goto	u1095
  4077  075C  0871               	movf	??_LCD_out,w
  4078  075D  3901               	andlw	1
  4079  075E  00F2               	movwf	??_LCD_out+1
  4080  075F  3002               	movlw	2
  4081  0760                     u1105:	
  4082  0760  1003               	clrc
  4083  0761  0DF2               	rlf	??_LCD_out+1,f
  4084  0762  3EFF               	addlw	-1
  4085  0763  1D03               	skipz
  4086  0764  2F60               	goto	u1105
  4087  0765  0808               	movf	8,w	;volatile
  4088  0766  39FB               	andlw	251
  4089  0767  0472               	iorwf	??_LCD_out+1,w
  4090  0768  00F3               	movwf	??_LCD_out+2
  4091  0769  0873               	movf	??_LCD_out+2,w
  4092  076A  0088               	movwf	8	;volatile
  4093                           
  4094                           ;LCD.c: 318:         ((((((*((volatile tRegister8 *)(0x08))).Reg))) = (((((*((volatile t
      +                          Register8 *)(0x08))).Reg)) & (~(1 << ((3))))) | ((data & (1 << 3)) >> 3 << ((3))))));
  4095  076B  0874               	movf	LCD_out@data,w
  4096  076C  00F1               	movwf	??_LCD_out
  4097  076D  3003               	movlw	3
  4098  076E                     u1115:	
  4099  076E  1003               	clrc
  4100  076F  0CF1               	rrf	??_LCD_out,f
  4101  0770  3EFF               	addlw	-1
  4102  0771  1D03               	skipz
  4103  0772  2F6E               	goto	u1115
  4104  0773  0871               	movf	??_LCD_out,w
  4105  0774  3901               	andlw	1
  4106  0775  00F2               	movwf	??_LCD_out+1
  4107  0776  3003               	movlw	3
  4108  0777                     u1125:	
  4109  0777  1003               	clrc
  4110  0778  0DF2               	rlf	??_LCD_out+1,f
  4111  0779  3EFF               	addlw	-1
  4112  077A  1D03               	skipz
  4113  077B  2F77               	goto	u1125
  4114  077C  0808               	movf	8,w	;volatile
  4115  077D  39F7               	andlw	247
  4116  077E  0472               	iorwf	??_LCD_out+1,w
  4117  077F  00F3               	movwf	??_LCD_out+2
  4118  0780  0873               	movf	??_LCD_out+2,w
  4119  0781  0088               	movwf	8	;volatile
  4120                           
  4121                           ;LCD.c: 319:         ((((((*((volatile tRegister8 *)(0x08))).Reg))) = (((((*((volatile t
      +                          Register8 *)(0x08))).Reg)) & (~(1 << ((4))))) | ((data & (1 << 4)) >> 4 << ((4))))));
  4122  0782  0874               	movf	LCD_out@data,w
  4123  0783  00F1               	movwf	??_LCD_out
  4124  0784  3004               	movlw	4
  4125  0785                     u1135:	
  4126  0785  1003               	clrc
  4127  0786  0CF1               	rrf	??_LCD_out,f
  4128  0787  3EFF               	addlw	-1
  4129  0788  1D03               	skipz
  4130  0789  2F85               	goto	u1135
  4131  078A  0871               	movf	??_LCD_out,w
  4132  078B  3901               	andlw	1
  4133  078C  00F2               	movwf	??_LCD_out+1
  4134  078D  3004               	movlw	4
  4135  078E                     u1145:	
  4136  078E  1003               	clrc
  4137  078F  0DF2               	rlf	??_LCD_out+1,f
  4138  0790  3EFF               	addlw	-1
  4139  0791  1D03               	skipz
  4140  0792  2F8E               	goto	u1145
  4141  0793  0808               	movf	8,w	;volatile
  4142  0794  39EF               	andlw	239
  4143  0795  0472               	iorwf	??_LCD_out+1,w
  4144  0796  00F3               	movwf	??_LCD_out+2
  4145  0797  0873               	movf	??_LCD_out+2,w
  4146  0798  0088               	movwf	8	;volatile
  4147                           
  4148                           ;LCD.c: 320:         ((((((*((volatile tRegister8 *)(0x08))).Reg))) = (((((*((volatile t
      +                          Register8 *)(0x08))).Reg)) & (~(1 << ((5))))) | ((data & (1 << 5)) >> 5 << ((5))))));
  4149  0799  0874               	movf	LCD_out@data,w
  4150  079A  00F1               	movwf	??_LCD_out
  4151  079B  3005               	movlw	5
  4152  079C                     u1155:	
  4153  079C  1003               	clrc
  4154  079D  0CF1               	rrf	??_LCD_out,f
  4155  079E  3EFF               	addlw	-1
  4156  079F  1D03               	skipz
  4157  07A0  2F9C               	goto	u1155
  4158  07A1  0871               	movf	??_LCD_out,w
  4159  07A2  3901               	andlw	1
  4160  07A3  00F2               	movwf	??_LCD_out+1
  4161  07A4  3005               	movlw	5
  4162  07A5                     u1165:	
  4163  07A5  1003               	clrc
  4164  07A6  0DF2               	rlf	??_LCD_out+1,f
  4165  07A7  3EFF               	addlw	-1
  4166  07A8  1D03               	skipz
  4167  07A9  2FA5               	goto	u1165
  4168  07AA  0808               	movf	8,w	;volatile
  4169  07AB  39DF               	andlw	223
  4170  07AC  0472               	iorwf	??_LCD_out+1,w
  4171  07AD  00F3               	movwf	??_LCD_out+2
  4172  07AE  0873               	movf	??_LCD_out+2,w
  4173  07AF  0088               	movwf	8	;volatile
  4174                           
  4175                           ;LCD.c: 321:         ((((((*((volatile tRegister8 *)(0x08))).Reg))) = (((((*((volatile t
      +                          Register8 *)(0x08))).Reg)) & (~(1 << ((6))))) | ((data & (1 << 6)) >> 6 << ((6))))));
  4176  07B0  0874               	movf	LCD_out@data,w
  4177  07B1  00F1               	movwf	??_LCD_out
  4178  07B2  3006               	movlw	6
  4179  07B3                     u1175:	
  4180  07B3  1003               	clrc
  4181  07B4  0CF1               	rrf	??_LCD_out,f
  4182  07B5  3EFF               	addlw	-1
  4183  07B6  1D03               	skipz
  4184  07B7  2FB3               	goto	u1175
  4185  07B8  0871               	movf	??_LCD_out,w
  4186  07B9  3901               	andlw	1
  4187  07BA  00F2               	movwf	??_LCD_out+1
  4188  07BB  3006               	movlw	6
  4189  07BC                     u1185:	
  4190  07BC  1003               	clrc
  4191  07BD  0DF2               	rlf	??_LCD_out+1,f
  4192  07BE  3EFF               	addlw	-1
  4193  07BF  1D03               	skipz
  4194  07C0  2FBC               	goto	u1185
  4195  07C1  0808               	movf	8,w	;volatile
  4196  07C2  39BF               	andlw	191
  4197  07C3  0472               	iorwf	??_LCD_out+1,w
  4198  07C4  00F3               	movwf	??_LCD_out+2
  4199  07C5  0873               	movf	??_LCD_out+2,w
  4200  07C6  0088               	movwf	8	;volatile
  4201                           
  4202                           ;LCD.c: 322:         ((((((*((volatile tRegister8 *)(0x08))).Reg))) = (((((*((volatile t
      +                          Register8 *)(0x08))).Reg)) & (~(1 << ((7))))) | ((data & (1 << 7)) >> 7 << ((7))))));
  4203  07C7  0874               	movf	LCD_out@data,w
  4204  07C8  00F1               	movwf	??_LCD_out
  4205  07C9  3007               	movlw	7
  4206  07CA                     u1195:	
  4207  07CA  1003               	clrc
  4208  07CB  0CF1               	rrf	??_LCD_out,f
  4209  07CC  3EFF               	addlw	-1
  4210  07CD  1D03               	skipz
  4211  07CE  2FCA               	goto	u1195
  4212  07CF  0871               	movf	??_LCD_out,w
  4213  07D0  3901               	andlw	1
  4214  07D1  00F2               	movwf	??_LCD_out+1
  4215  07D2  3007               	movlw	7
  4216  07D3                     u1205:	
  4217  07D3  1003               	clrc
  4218  07D4  0DF2               	rlf	??_LCD_out+1,f
  4219  07D5  3EFF               	addlw	-1
  4220  07D6  1D03               	skipz
  4221  07D7  2FD3               	goto	u1205
  4222  07D8  0808               	movf	8,w	;volatile
  4223  07D9  397F               	andlw	127
  4224  07DA  0472               	iorwf	??_LCD_out+1,w
  4225  07DB  00F3               	movwf	??_LCD_out+2
  4226  07DC  0873               	movf	??_LCD_out+2,w
  4227  07DD  0088               	movwf	8	;volatile
  4228                           
  4229                           ;LCD.c: 323:         LCD_latch();
  4230  07DE  120A  118A  209B   	fcall	_LCD_latch
  4231  07E1  0008               	return
  4232  07E2                     __end_of_LCD_out:	
  4233                           
  4234                           	psect	text24
  4235  009B                     __ptext24:	
  4236 ;; *************** function _LCD_latch *****************
  4237 ;; Defined at:
  4238 ;;		line 281 in file "LCD.c"
  4239 ;; Parameters:    Size  Location     Type
  4240 ;;		None
  4241 ;; Auto vars:     Size  Location     Type
  4242 ;;		None
  4243 ;; Return value:  Size  Location     Type
  4244 ;;                  1    wreg      void 
  4245 ;; Registers used:
  4246 ;;		wreg, status,2
  4247 ;; Tracked objects:
  4248 ;;		On entry : 0/0
  4249 ;;		On exit  : 0/0
  4250 ;;		Unchanged: 0/0
  4251 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4252 ;;      Params:         0       0       0       0       0
  4253 ;;      Locals:         0       0       0       0       0
  4254 ;;      Temps:          1       0       0       0       0
  4255 ;;      Totals:         1       0       0       0       0
  4256 ;;Total ram usage:        1 bytes
  4257 ;; Hardware stack levels used:    1
  4258 ;; This function calls:
  4259 ;;		Nothing
  4260 ;; This function is called by:
  4261 ;;		_LCD_out
  4262 ;; This function uses a non-reentrant model
  4263 ;;
  4264                           
  4265                           
  4266                           ;psect for function _LCD_latch
  4267  009B                     _LCD_latch:	
  4268                           
  4269                           ;LCD.c: 285:     ((((((*((volatile tRegister8 *)(0x09))).Reg))) = (((((*((volatile tRegi
      +                          ster8 *)(0x09))).Reg)) & (~(1 << ((1))))) | ((1) << ((1))))));
  4270                           
  4271                           ;incstack = 0
  4272                           ; Regs used in _LCD_latch: [wreg+status,2]
  4273  009B  1283               	bcf	3,5	;RP0=0, select bank0
  4274  009C  1303               	bcf	3,6	;RP1=0, select bank0
  4275  009D  0809               	movf	9,w	;volatile
  4276  009E  39FD               	andlw	253
  4277  009F  3802               	iorlw	2
  4278  00A0  00F0               	movwf	??_LCD_latch
  4279  00A1  0870               	movf	??_LCD_latch,w
  4280  00A2  0089               	movwf	9	;volatile
  4281                           
  4282                           ;LCD.c: 286:     _delay((unsigned long)((1)*(8000000/4000000.0)));
  4283  00A3  28A4               	nop2	;2 cycle nop
  4284                           
  4285                           ;LCD.c: 287:     ((((((*((volatile tRegister8 *)(0x09))).Reg))) = (((((*((volatile tRegi
      +                          ster8 *)(0x09))).Reg)) & (~(1 << ((1))))) | ((0) << ((1))))));
  4286  00A4  1283               	bcf	3,5	;RP0=0, select bank0
  4287  00A5  1303               	bcf	3,6	;RP1=0, select bank0
  4288  00A6  0809               	movf	9,w	;volatile
  4289  00A7  39FD               	andlw	253
  4290  00A8  00F0               	movwf	??_LCD_latch
  4291  00A9  0870               	movf	??_LCD_latch,w
  4292  00AA  0089               	movwf	9	;volatile
  4293                           
  4294                           ;LCD.c: 288:     _delay((unsigned long)((1)*(8000000/4000000.0)));
  4295  00AB  28AC               	nop2	;2 cycle nop
  4296  00AC  0008               	return
  4297  00AD                     __end_of_LCD_latch:	
  4298                           
  4299                           	psect	text25
  4300  0203                     __ptext25:	
  4301 ;; *************** function _EEPROM_writeStr *****************
  4302 ;; Defined at:
  4303 ;;		line 118 in file "EEPROM.c"
  4304 ;; Parameters:    Size  Location     Type
  4305 ;;  startAddress    1    wreg     unsigned char 
  4306 ;;  pStr            1    4[COMMON] PTR unsigned char 
  4307 ;;		 -> user_password(6), 
  4308 ;; Auto vars:     Size  Location     Type
  4309 ;;  startAddress    1    6[COMMON] unsigned char 
  4310 ;;  i               1    7[COMMON] unsigned char 
  4311 ;; Return value:  Size  Location     Type
  4312 ;;                  1    wreg      void 
  4313 ;; Registers used:
  4314 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  4315 ;; Tracked objects:
  4316 ;;		On entry : 0/0
  4317 ;;		On exit  : 0/0
  4318 ;;		Unchanged: 0/0
  4319 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4320 ;;      Params:         1       0       0       0       0
  4321 ;;      Locals:         2       0       0       0       0
  4322 ;;      Temps:          1       0       0       0       0
  4323 ;;      Totals:         4       0       0       0       0
  4324 ;;Total ram usage:        4 bytes
  4325 ;; Hardware stack levels used:    1
  4326 ;; Hardware stack levels required when called:    1
  4327 ;; This function calls:
  4328 ;;		_EEPROM_writeByte
  4329 ;; This function is called by:
  4330 ;;		_AC_authentication
  4331 ;; This function uses a non-reentrant model
  4332 ;;
  4333                           
  4334                           
  4335                           ;psect for function _EEPROM_writeStr
  4336  0203                     _EEPROM_writeStr:	
  4337                           
  4338                           ;incstack = 0
  4339                           ; Regs used in _EEPROM_writeStr: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  4340                           ;EEPROM_writeStr@startAddress stored from wreg
  4341  0203  00F6               	movwf	EEPROM_writeStr@startAddress
  4342                           
  4343                           ;EEPROM.c: 120:     tByte i = 0;
  4344  0204  01F7               	clrf	EEPROM_writeStr@i
  4345  0205                     l1715:	
  4346                           ;EEPROM.c: 122:     while(*pStr != '\0'){
  4347                           
  4348                           
  4349                           ;EEPROM.c: 122:     while(*pStr != '\0'){
  4350  0205  0874               	movf	EEPROM_writeStr@pStr,w
  4351  0206  0084               	movwf	4
  4352  0207  1383               	bcf	3,7	;select IRP bank0
  4353  0208  0800               	movf	0,w
  4354  0209  1903               	btfsc	3,2
  4355  020A  2A21               	goto	l1717
  4356                           
  4357                           ;EEPROM.c: 123:         EEPROM_writeByte(startAddress + i,*pStr);
  4358  020B  0874               	movf	EEPROM_writeStr@pStr,w
  4359  020C  0084               	movwf	4
  4360  020D  0800               	movf	0,w
  4361  020E  00F5               	movwf	??_EEPROM_writeStr
  4362  020F  0875               	movf	??_EEPROM_writeStr,w
  4363  0210  00F0               	movwf	EEPROM_writeByte@data
  4364  0211  0877               	movf	EEPROM_writeStr@i,w
  4365  0212  0776               	addwf	EEPROM_writeStr@startAddress,w
  4366  0213  120A  118A  21B7  120A  118A  	fcall	_EEPROM_writeByte
  4367                           
  4368                           ;EEPROM.c: 124:         i++;
  4369  0218  3001               	movlw	1
  4370  0219  00F5               	movwf	??_EEPROM_writeStr
  4371  021A  0875               	movf	??_EEPROM_writeStr,w
  4372  021B  07F7               	addwf	EEPROM_writeStr@i,f
  4373                           
  4374                           ;EEPROM.c: 125:         pStr++;
  4375  021C  3001               	movlw	1
  4376  021D  00F5               	movwf	??_EEPROM_writeStr
  4377  021E  0875               	movf	??_EEPROM_writeStr,w
  4378  021F  07F4               	addwf	EEPROM_writeStr@pStr,f
  4379  0220  2A05               	goto	l1715
  4380  0221                     l1717:	
  4381                           
  4382                           ;EEPROM.c: 127:     EEPROM_writeByte(startAddress + i,*pStr);
  4383  0221  0874               	movf	EEPROM_writeStr@pStr,w
  4384  0222  0084               	movwf	4
  4385  0223  0800               	movf	0,w
  4386  0224  00F5               	movwf	??_EEPROM_writeStr
  4387  0225  0875               	movf	??_EEPROM_writeStr,w
  4388  0226  00F0               	movwf	EEPROM_writeByte@data
  4389  0227  0877               	movf	EEPROM_writeStr@i,w
  4390  0228  0776               	addwf	EEPROM_writeStr@startAddress,w
  4391  0229  120A  118A  21B7   	fcall	_EEPROM_writeByte
  4392  022C  0008               	return
  4393  022D                     __end_of_EEPROM_writeStr:	
  4394                           
  4395                           	psect	text26
  4396  01B7                     __ptext26:	
  4397 ;; *************** function _EEPROM_writeByte *****************
  4398 ;; Defined at:
  4399 ;;		line 28 in file "EEPROM.c"
  4400 ;; Parameters:    Size  Location     Type
  4401 ;;  address         1    wreg     unsigned char 
  4402 ;;  data            1    0[COMMON] unsigned char 
  4403 ;; Auto vars:     Size  Location     Type
  4404 ;;  address         1    2[COMMON] unsigned char 
  4405 ;;  state           1    3[COMMON] unsigned char 
  4406 ;; Return value:  Size  Location     Type
  4407 ;;                  1    wreg      void 
  4408 ;; Registers used:
  4409 ;;		wreg, status,2, status,0
  4410 ;; Tracked objects:
  4411 ;;		On entry : 0/0
  4412 ;;		On exit  : 0/0
  4413 ;;		Unchanged: 0/0
  4414 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4415 ;;      Params:         1       0       0       0       0
  4416 ;;      Locals:         2       0       0       0       0
  4417 ;;      Temps:          1       0       0       0       0
  4418 ;;      Totals:         4       0       0       0       0
  4419 ;;Total ram usage:        4 bytes
  4420 ;; Hardware stack levels used:    1
  4421 ;; This function calls:
  4422 ;;		Nothing
  4423 ;; This function is called by:
  4424 ;;		_EEPROM_writeStr
  4425 ;;		_AC_authentication
  4426 ;;		_EEPROM_write4Bytes
  4427 ;; This function uses a non-reentrant model
  4428 ;;
  4429                           
  4430                           
  4431                           ;psect for function _EEPROM_writeByte
  4432  01B7                     _EEPROM_writeByte:	
  4433                           
  4434                           ;incstack = 0
  4435                           ; Regs used in _EEPROM_writeByte: [wreg+status,2+status,0]
  4436                           ;EEPROM_writeByte@address stored from wreg
  4437  01B7  00F2               	movwf	EEPROM_writeByte@address
  4438  01B8                     l110:	
  4439                           ;EEPROM.c: 35:        while(((*((volatile tRegister8 *)(0x18C))).Bits.BIT1 || (*((volati
      +                          le tRegister8 *)(0x18C))).Bits.BIT0));
  4440                           
  4441  01B8  1683               	bsf	3,5	;RP0=1, select bank3
  4442  01B9  1703               	bsf	3,6	;RP1=1, select bank3
  4443  01BA  188C               	btfsc	12,1	;volsfr
  4444  01BB  29B8               	goto	l110
  4445  01BC  180C               	btfsc	12,0	;volsfr
  4446  01BD  29B8               	goto	l110
  4447                           
  4448                           ;EEPROM.c: 38:         ((*((volatile tRegister8 *)(0x10D))).Reg = address);
  4449  01BE  0872               	movf	EEPROM_writeByte@address,w
  4450  01BF  00F1               	movwf	??_EEPROM_writeByte
  4451  01C0  0871               	movf	??_EEPROM_writeByte,w
  4452  01C1  1283               	bcf	3,5	;RP0=0, select bank2
  4453  01C2  1703               	bsf	3,6	;RP1=1, select bank2
  4454  01C3  008D               	movwf	13	;volatile
  4455                           
  4456                           ;EEPROM.c: 41:         ((*((volatile tRegister8 *)(0x10C))).Reg = data);
  4457  01C4  0870               	movf	EEPROM_writeByte@data,w
  4458  01C5  00F1               	movwf	??_EEPROM_writeByte
  4459  01C6  0871               	movf	??_EEPROM_writeByte,w
  4460  01C7  008C               	movwf	12	;volatile
  4461                           
  4462                           ;EEPROM.c: 45:         tByte state = ((*((volatile tRegister8 *)(0x0B))).Bits.BIT7);
  4463  01C8  3000               	movlw	0
  4464  01C9  1B8B               	btfsc	11,7	;volatile
  4465  01CA  3001               	movlw	1
  4466  01CB  00F3               	movwf	EEPROM_writeByte@state
  4467                           
  4468                           ;EEPROM.c: 48:         ((*((volatile tRegister8 *)(0x0B))).Bits.BIT7 = 0);
  4469  01CC  138B               	bcf	11,7	;volatile
  4470                           
  4471                           ;EEPROM.c: 51:         (*((volatile tRegister8 *)(0x18C))).Bits.BIT7 = 0; (*((volatile t
      +                          Register8 *)(0x18C))).Bits.BIT2 = 1; EECON2 = 0x55; EECON2 = 0xAA; (*((volatile tRegiste
      +                          r8 *)(0x18C))).Bits.BIT1 = 1; (*((volatile tRegister8 *)(0x18C))).Bits.BIT2 = 0;
  4472  01CD  1683               	bsf	3,5	;RP0=1, select bank3
  4473  01CE  1703               	bsf	3,6	;RP1=1, select bank3
  4474  01CF  138C               	bcf	12,7	;volsfr
  4475  01D0  150C               	bsf	12,2	;volsfr
  4476  01D1  3055               	movlw	85
  4477  01D2  008D               	movwf	13	;volsfr
  4478  01D3  30AA               	movlw	170
  4479  01D4  008D               	movwf	13	;volsfr
  4480  01D5  148C               	bsf	12,1	;volsfr
  4481  01D6  110C               	bcf	12,2	;volsfr
  4482                           
  4483                           ;EEPROM.c: 54:         if (state){
  4484  01D7  0873               	movf	EEPROM_writeByte@state,w
  4485  01D8  1903               	btfsc	3,2
  4486  01D9  0008               	return
  4487                           
  4488                           ;EEPROM.c: 55:             ((*((volatile tRegister8 *)(0x0B))).Bits.BIT7 = 1);
  4489  01DA  178B               	bsf	11,7	;volatile
  4490  01DB  0008               	return
  4491  01DC                     __end_of_EEPROM_writeByte:	
  4492                           
  4493                           	psect	text27
  4494  0194                     __ptext27:	
  4495 ;; *************** function _EEPROM_readStr *****************
  4496 ;; Defined at:
  4497 ;;		line 131 in file "EEPROM.c"
  4498 ;; Parameters:    Size  Location     Type
  4499 ;;  startAddress    1    wreg     unsigned char 
  4500 ;;  pStr            1    3[COMMON] PTR unsigned char 
  4501 ;;		 -> AC_authentication@password(6), 
  4502 ;; Auto vars:     Size  Location     Type
  4503 ;;  startAddress    1    6[COMMON] unsigned char 
  4504 ;;  ch              1    8[COMMON] unsigned char 
  4505 ;;  i               1    7[COMMON] unsigned char 
  4506 ;; Return value:  Size  Location     Type
  4507 ;;                  1    wreg      void 
  4508 ;; Registers used:
  4509 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  4510 ;; Tracked objects:
  4511 ;;		On entry : 0/0
  4512 ;;		On exit  : 0/0
  4513 ;;		Unchanged: 0/0
  4514 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4515 ;;      Params:         1       0       0       0       0
  4516 ;;      Locals:         3       0       0       0       0
  4517 ;;      Temps:          2       0       0       0       0
  4518 ;;      Totals:         6       0       0       0       0
  4519 ;;Total ram usage:        6 bytes
  4520 ;; Hardware stack levels used:    1
  4521 ;; Hardware stack levels required when called:    1
  4522 ;; This function calls:
  4523 ;;		_EEPROM_readByte
  4524 ;; This function is called by:
  4525 ;;		_AC_authentication
  4526 ;; This function uses a non-reentrant model
  4527 ;;
  4528                           
  4529                           
  4530                           ;psect for function _EEPROM_readStr
  4531  0194                     _EEPROM_readStr:	
  4532                           
  4533                           ;incstack = 0
  4534                           ; Regs used in _EEPROM_readStr: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  4535                           ;EEPROM_readStr@startAddress stored from wreg
  4536  0194  00F6               	movwf	EEPROM_readStr@startAddress
  4537                           
  4538                           ;EEPROM.c: 133:     tByte ch = 5;
  4539  0195  3005               	movlw	5
  4540  0196  00F4               	movwf	??_EEPROM_readStr
  4541  0197  0874               	movf	??_EEPROM_readStr,w
  4542  0198  00F8               	movwf	EEPROM_readStr@ch
  4543                           
  4544                           ;EEPROM.c: 134:     tByte i = 0;
  4545  0199  01F7               	clrf	EEPROM_readStr@i
  4546  019A                     l1729:	
  4547                           ;EEPROM.c: 136:     while (ch != '\0'){
  4548                           
  4549                           
  4550                           ;EEPROM.c: 136:     while (ch != '\0'){
  4551  019A  0878               	movf	EEPROM_readStr@ch,w
  4552  019B  1903               	btfsc	3,2
  4553  019C  0008               	return
  4554                           
  4555                           ;EEPROM.c: 137:         EEPROM_readByte(startAddress + i,&ch);
  4556  019D  3078               	movlw	(low (EEPROM_readStr@ch| 0))& (0+255)
  4557  019E  00F4               	movwf	??_EEPROM_readStr
  4558  019F  0874               	movf	??_EEPROM_readStr,w
  4559  01A0  00F0               	movwf	EEPROM_readByte@pData
  4560  01A1  0877               	movf	EEPROM_readStr@i,w
  4561  01A2  0776               	addwf	EEPROM_readStr@startAddress,w
  4562  01A3  120A  118A  2127  120A  118A  	fcall	_EEPROM_readByte
  4563                           
  4564                           ;EEPROM.c: 138:         pStr[i] = ch;
  4565  01A8  0878               	movf	EEPROM_readStr@ch,w
  4566  01A9  00F4               	movwf	??_EEPROM_readStr
  4567  01AA  0877               	movf	EEPROM_readStr@i,w
  4568  01AB  0773               	addwf	EEPROM_readStr@pStr,w
  4569  01AC  00F5               	movwf	??_EEPROM_readStr+1
  4570  01AD  0875               	movf	??_EEPROM_readStr+1,w
  4571  01AE  0084               	movwf	4
  4572  01AF  0874               	movf	??_EEPROM_readStr,w
  4573  01B0  1383               	bcf	3,7	;select IRP bank0
  4574  01B1  0080               	movwf	0
  4575                           
  4576                           ;EEPROM.c: 139:         i++;
  4577  01B2  3001               	movlw	1
  4578  01B3  00F4               	movwf	??_EEPROM_readStr
  4579  01B4  0874               	movf	??_EEPROM_readStr,w
  4580  01B5  07F7               	addwf	EEPROM_readStr@i,f
  4581  01B6  299A               	goto	l1729
  4582  01B7                     __end_of_EEPROM_readStr:	
  4583                           
  4584                           	psect	text28
  4585  0127                     __ptext28:	
  4586 ;; *************** function _EEPROM_readByte *****************
  4587 ;; Defined at:
  4588 ;;		line 66 in file "EEPROM.c"
  4589 ;; Parameters:    Size  Location     Type
  4590 ;;  address         1    wreg     unsigned char 
  4591 ;;  pData           1    0[COMMON] PTR unsigned char 
  4592 ;;		 -> flag(1), EEPROM_readStr@ch(1), EEPROM_read4Bytes@oneByte(1), 
  4593 ;; Auto vars:     Size  Location     Type
  4594 ;;  address         1    2[COMMON] unsigned char 
  4595 ;; Return value:  Size  Location     Type
  4596 ;;                  1    wreg      void 
  4597 ;; Registers used:
  4598 ;;		wreg, fsr0l, fsr0h
  4599 ;; Tracked objects:
  4600 ;;		On entry : 0/0
  4601 ;;		On exit  : 0/0
  4602 ;;		Unchanged: 0/0
  4603 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4604 ;;      Params:         1       0       0       0       0
  4605 ;;      Locals:         1       0       0       0       0
  4606 ;;      Temps:          1       0       0       0       0
  4607 ;;      Totals:         3       0       0       0       0
  4608 ;;Total ram usage:        3 bytes
  4609 ;; Hardware stack levels used:    1
  4610 ;; This function calls:
  4611 ;;		Nothing
  4612 ;; This function is called by:
  4613 ;;		_EEPROM_readStr
  4614 ;;		_AC_authentication
  4615 ;;		_EEPROM_read4Bytes
  4616 ;; This function uses a non-reentrant model
  4617 ;;
  4618                           
  4619                           
  4620                           ;psect for function _EEPROM_readByte
  4621  0127                     _EEPROM_readByte:	
  4622                           
  4623                           ;incstack = 0
  4624                           ; Regs used in _EEPROM_readByte: [wregfsr0]
  4625                           ;EEPROM_readByte@address stored from wreg
  4626  0127  00F2               	movwf	EEPROM_readByte@address
  4627                           
  4628                           ;EEPROM.c: 73:         ((*((volatile tRegister8 *)(0x10D))).Reg = address);
  4629  0128  0872               	movf	EEPROM_readByte@address,w
  4630  0129  00F1               	movwf	??_EEPROM_readByte
  4631  012A  0871               	movf	??_EEPROM_readByte,w
  4632  012B  1283               	bcf	3,5	;RP0=0, select bank2
  4633  012C  1703               	bsf	3,6	;RP1=1, select bank2
  4634  012D  008D               	movwf	13	;volatile
  4635  012E                     l118:	
  4636                           ;EEPROM.c: 76:         while(((*((volatile tRegister8 *)(0x18C))).Bits.BIT1 || (*((volat
      +                          ile tRegister8 *)(0x18C))).Bits.BIT0));
  4637                           
  4638  012E  1683               	bsf	3,5	;RP0=1, select bank3
  4639  012F  1703               	bsf	3,6	;RP1=1, select bank3
  4640  0130  188C               	btfsc	12,1	;volsfr
  4641  0131  292E               	goto	l118
  4642  0132  180C               	btfsc	12,0	;volsfr
  4643  0133  292E               	goto	l118
  4644                           
  4645                           ;EEPROM.c: 79:         (*((volatile tRegister8 *)(0x18C))).Bits.BIT7 = 0; (*((volatile t
      +                          Register8 *)(0x18C))).Bits.BIT0 = 1;;
  4646  0134  138C               	bcf	12,7	;volsfr
  4647  0135  140C               	bsf	12,0	;volsfr
  4648                           
  4649                           ;EEPROM.c: 82:         *pData = ((*((volatile tRegister8 *)(0x10C))).Reg);
  4650  0136  1283               	bcf	3,5	;RP0=0, select bank2
  4651  0137  1703               	bsf	3,6	;RP1=1, select bank2
  4652  0138  080C               	movf	12,w	;volatile
  4653  0139  00F1               	movwf	??_EEPROM_readByte
  4654  013A  0870               	movf	EEPROM_readByte@pData,w
  4655  013B  0084               	movwf	4
  4656  013C  0871               	movf	??_EEPROM_readByte,w
  4657  013D  1383               	bcf	3,7	;select IRP bank0
  4658  013E  0080               	movwf	0
  4659  013F  0008               	return
  4660  0140                     __end_of_EEPROM_readByte:	
  4661  007E                     btemp	set	126	;btemp
  4662  007E                     wtemp0	set	126


Data Sizes:
    Strings     60
    Constant    0
    Data        17
    BSS         27
    Persistent  1
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14     14      14
    BANK0            80     46      75
    BANK1            80      0      16
    BANK3            96      0       0
    BANK2            96      0       0

Pointer List with Targets:

    KPAD_waitKey@pKey	PTR unsigned char  size(1) Largest target is 1
		 -> PASSWORD_read@key(BANK0[1]), 

    KPAD_getKey@pKey	PTR unsigned char  size(1) Largest target is 1
		 -> KPAD_waitKey@key(COMMON[1]), 

    UTIL_STRlength@pStr	PTR unsigned char  size(1) Largest target is 6
		 -> user_password(BANK0[6]), REAL_PASSWORD(BANK0[6]), 

    UTIL_STRcopy@source	PTR unsigned char  size(1) Largest target is 6
		 -> user_password(BANK0[6]), AC_authentication@password(BANK0[6]), 

    UTIL_STRcopy@destination	PTR unsigned char  size(1) Largest target is 6
		 -> REAL_PASSWORD(BANK0[6]), 

    UTIL_STRcompare@strB	PTR unsigned char  size(1) Largest target is 6
		 -> REAL_PASSWORD(BANK0[6]), 

    UTIL_STRcompare@strA	PTR unsigned char  size(1) Largest target is 6
		 -> user_password(BANK0[6]), 

    UTIL_INTtoSTR@ppStr	PTR PTR unsigned char  size(1) Largest target is 1
		 -> LCD_num@pStr(BANK0[1]), 

    PASSWORD_check@password	PTR unsigned char  size(1) Largest target is 6
		 -> user_password(BANK0[6]), 

    PASSWORD_read@pPassword	PTR unsigned char  size(1) Largest target is 6
		 -> user_password(BANK0[6]), 

    PASSWORD_init@password	PTR unsigned char  size(1) Largest target is 6
		 -> user_password(BANK0[6]), AC_authentication@password(BANK0[6]), 

    EEPROM_readStr@pStr	PTR unsigned char  size(1) Largest target is 6
		 -> AC_authentication@password(BANK0[6]), 

    EEPROM_writeStr@pStr	PTR unsigned char  size(1) Largest target is 6
		 -> user_password(BANK0[6]), 

    EEPROM_readByte@pData	PTR unsigned char  size(1) Largest target is 1
		 -> flag(BANK0[1]), EEPROM_readStr@ch(COMMON[1]), EEPROM_read4Bytes@oneByte(COMMON[1]), 

    LCD_num@pStr	PTR unsigned char  size(1) Largest target is 17
		 -> LCD_num@str(BANK0[17]), 

    LCD_str@str	PTR unsigned char  size(2) Largest target is 17
		 -> STR_7(CODE[8]), STR_6(CODE[7]), STR_5(CODE[16]), STR_4(CODE[12]), 
		 -> STR_3(CODE[13]), STR_2(CODE[16]), STR_1(CODE[12]), LCD_num@str(BANK0[17]), 


Critical Paths under _main in COMMON

    _AC_init->_LCD_init
    _LCD_init->_LCD_cmd
    _AC_authentication->_PASSWORD_check
    _PASSWORD_read->_LCD_char
    _KPAD_waitKey->_KPAD_getKey
    _PASSWORD_init->_UTIL_STRcopy
    _PASSWORD_check->_UTIL_STRcompare
    _UTIL_STRcompare->_UTIL_STRlength
    _UTIL_INTtoSTR->___lldiv
    _LCD_str->_LCD_char
    _LCD_char->_LCD_goTo
    _LCD_goTo->_LCD_cmd
    _LCD_clear->_LCD_cmd
    _LCD_cmd->_LCD_out
    _LCD_out->_LCD_latch
    _EEPROM_writeStr->_EEPROM_writeByte
    _EEPROM_readStr->_EEPROM_readByte

Critical Paths under _main in BANK0

    _main->_AC_authentication
    _AC_authentication->_LCD_num
    _PASSWORD_read->_LCD_char
    _LCD_num->_LCD_str
    _LCD_num->_UTIL_INTtoSTR
    _LCD_str->_LCD_char

Critical Paths under _main in BANK1

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _main in BANK2

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 0     0      0   13490
                  _AC_authentication
                            _AC_init
 ---------------------------------------------------------------------------------
 (1) _AC_init                                              0     0      0     481
                        _EEPROM_init
                          _KPAD_init
                           _LCD_init
 ---------------------------------------------------------------------------------
 (2) _LCD_init                                             3     3      0     418
                                              7 COMMON     3     3      0
                            _LCD_cmd
 ---------------------------------------------------------------------------------
 (2) _KPAD_init                                            6     6      0      48
                                              0 COMMON     6     6      0
 ---------------------------------------------------------------------------------
 (2) _EEPROM_init                                          1     1      0      15
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (1) _AC_authentication                                   12    12      0   13009
                                             34 BANK0     12    12      0
                    _EEPROM_readByte
                     _EEPROM_readStr
                   _EEPROM_writeByte
                    _EEPROM_writeStr
                          _LCD_clear
                            _LCD_num
                            _LCD_str
                     _PASSWORD_check
                      _PASSWORD_init
                      _PASSWORD_read
 ---------------------------------------------------------------------------------
 (2) _PASSWORD_read                                        4     4      0    1873
                                              2 BANK0      4     4      0
                       _KPAD_waitKey
                           _LCD_char
 ---------------------------------------------------------------------------------
 (3) _KPAD_waitKey                                         3     3      0     408
                                              8 COMMON     3     3      0
                        _KPAD_getKey
 ---------------------------------------------------------------------------------
 (4) _KPAD_getKey                                          8     8      0     284
                                              0 COMMON     8     8      0
 ---------------------------------------------------------------------------------
 (2) _PASSWORD_init                                        2     2      0     309
                                              3 COMMON     2     2      0
                       _UTIL_STRcopy
 ---------------------------------------------------------------------------------
 (3) _UTIL_STRcopy                                         3     2      1     221
                                              0 COMMON     3     2      1
 ---------------------------------------------------------------------------------
 (2) _PASSWORD_check                                       4     4      0     502
                                             10 COMMON     4     4      0
                    _UTIL_STRcompare
 ---------------------------------------------------------------------------------
 (3) _UTIL_STRcompare                                      4     3      1     424
                                              6 COMMON     4     3      1
                     _UTIL_STRlength
 ---------------------------------------------------------------------------------
 (4) _UTIL_STRlength                                       6     4      2     113
                                              0 COMMON     6     4      2
 ---------------------------------------------------------------------------------
 (2) _LCD_num                                             26    20      6    4949
                                              8 BANK0     26    20      6
                            _LCD_str
                      _UTIL_INTtoSTR
 ---------------------------------------------------------------------------------
 (3) _UTIL_INTtoSTR                                        8     2      6    1422
                                              0 BANK0      8     2      6
                            ___lldiv
                            ___llmod
 ---------------------------------------------------------------------------------
 (4) ___llmod                                             10     2      8     463
                                              0 COMMON    10     2      8
 ---------------------------------------------------------------------------------
 (4) ___lldiv                                             14     6      8     466
                                              0 COMMON    14     6      8
 ---------------------------------------------------------------------------------
 (2) _LCD_str                                              6     2      4    3153
                                              2 BANK0      6     2      4
                           _LCD_char
 ---------------------------------------------------------------------------------
 (3) _LCD_char                                             4     2      2    1239
                                             12 COMMON     2     0      2
                                              0 BANK0      2     2      0
                           _LCD_goTo
                            _LCD_out
 ---------------------------------------------------------------------------------
 (4) _LCD_goTo                                             5     4      1     517
                                              7 COMMON     5     4      1
                            _LCD_cmd
 ---------------------------------------------------------------------------------
 (2) _LCD_clear                                            2     2      0     374
                                              7 COMMON     2     2      0
                            _LCD_cmd
 ---------------------------------------------------------------------------------
 (3) _LCD_cmd                                              2     2      0     374
                                              5 COMMON     2     2      0
                            _LCD_out
 ---------------------------------------------------------------------------------
 (4) _LCD_out                                              4     4      0     352
                                              1 COMMON     4     4      0
                          _LCD_latch
 ---------------------------------------------------------------------------------
 (5) _LCD_latch                                            1     1      0       0
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (2) _EEPROM_writeStr                                      4     3      1     604
                                              4 COMMON     4     3      1
                   _EEPROM_writeByte
 ---------------------------------------------------------------------------------
 (3) _EEPROM_writeByte                                     4     3      1     371
                                              0 COMMON     4     3      1
 ---------------------------------------------------------------------------------
 (2) _EEPROM_readStr                                       6     5      1     507
                                              3 COMMON     6     5      1
                    _EEPROM_readByte
 ---------------------------------------------------------------------------------
 (3) _EEPROM_readByte                                      3     2      1     272
                                              0 COMMON     3     2      1
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 5
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _AC_authentication
     _EEPROM_readByte
     _EEPROM_readStr
       _EEPROM_readByte
     _EEPROM_writeByte
     _EEPROM_writeStr
       _EEPROM_writeByte
     _LCD_clear
       _LCD_cmd
         _LCD_out
           _LCD_latch
     _LCD_num
       _LCD_str
         _LCD_char
           _LCD_goTo
             _LCD_cmd
               _LCD_out
                 _LCD_latch
           _LCD_out
             _LCD_latch
       _UTIL_INTtoSTR
         ___lldiv
         ___llmod
     _LCD_str
       _LCD_char
         _LCD_goTo
           _LCD_cmd
             _LCD_out
               _LCD_latch
         _LCD_out
           _LCD_latch
     _PASSWORD_check
       _UTIL_STRcompare
         _UTIL_STRlength
     _PASSWORD_init
       _UTIL_STRcopy
     _PASSWORD_read
       _KPAD_waitKey
         _KPAD_getKey
       _LCD_char
         _LCD_goTo
           _LCD_cmd
             _LCD_out
               _LCD_latch
         _LCD_out
           _LCD_latch
   _AC_init
     _EEPROM_init
     _KPAD_init
     _LCD_init
       _LCD_cmd
         _LCD_out
           _LCD_latch

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BANK3               60      0       0       9        0.0%
BITBANK3            60      0       0       8        0.0%
SFR3                 0      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
BANK2               60      0       0      11        0.0%
BITBANK2            60      0       0      10        0.0%
SFR2                 0      0       0       5        0.0%
BITSFR2              0      0       0       5        0.0%
BANK1               50      0      10       7       20.0%
BITBANK1            50      0       0       6        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR1              0      0       0       2        0.0%
BANK0               50     2E      4B       5       93.8%
BITBANK0            50      0       0       4        0.0%
SFR0                 0      0       0       1        0.0%
BITSFR0              0      0       0       1        0.0%
COMMON               E      E       E       1      100.0%
BITCOMMON            E      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
DATA                 0      0      69      12        0.0%
ABS                  0      0      69       3        0.0%
NULL                 0      0       0       0        0.0%
STACK                0      0       0       2        0.0%
EEDATA             100      0       0       0        0.0%


Microchip Technology PIC Macro Assembler V2.05 build -831301201 
Symbol Table                                                                                   Wed Sep 18 18:54:50 2019

 __size_of_AC_authentication 00FA        __size_of_UTIL_STRcopy 0021                            pc 0002  
                __CFG_CP$OFF 0000                           l96 006B                           fsr 0004  
    __size_of_UTIL_STRlength 0019                          l110 01B8                          l104 0076  
                        l118 012E                          l224 0469                 __CFG_CPD$OFF 0000  
                        u965 0686                          u975 0697                          u985 06A0  
                        u995 06AE                          fsr0 0004                          indf 0000  
               __CFG_FOSC$HS 0000     __size_of_UTIL_STRcompare 0041              __end_of_AC_init 00FB  
               __CFG_LVP$OFF 0000              __end_of_LCD_cmd 00C0              __end_of_LCD_num 025A  
            __end_of_LCD_out 07E2              __end_of_LCD_str 028B                         l1503 0467  
                       l1511 0473                         l1505 046C                         l1513 0489  
                       l1443 0739                         l1531 0370                         l1507 046E  
                       l1515 049E                         l1543 03A5                         l1471 0154  
                       l1631 0174                         l1529 0360                         l1553 030C  
                       l1633 018B                         l1715 0205                         l1539 0398  
                       l1555 031C                         l1563 0347                         l1803 0613  
                       l1717 0221                         l1469 0143                         l1653 02F2  
                       l1637 00C2                         l1575 025A                         l1559 033A  
                       l1655 02DB                         l1487 042E                         l1729 019A  
                       l1665 0302                         l1809 0629                         l1587 03CE  
                       l1659 02F8                         l1499 0462                         l1747 0290  
                       l1819 0658                         l1589 041A                         l1749 02BE  
                       l1693 055B                         l1677 0527                         l1787 05B3  
                       l1959 047B                         STR_1 0017                         STR_2 0023  
                       STR_3 0033                         STR_4 0017                         STR_5 0013  
                       STR_6 0048                         STR_7 0040                         u1005 06B7  
                       u1015 06C5                         u1105 0760                         u1025 06CE  
                       u1115 076E                         u1035 06F5                         u1205 07D3  
                       u1125 0777                         u1045 0703                         u1135 0785  
                       u1055 070C                         u1215 00D7                         u1145 078E  
                       u1065 071A                         u1155 079C                         u1075 0723  
                       u1315 0364                         u1244 043C                         u1165 07A5  
                       u1085 0749                         u1405 032A                         u1245 043A  
                       u1254 0447                         u1175 07B3                         u1095 0757  
                       u1335 0372                         u1415 033B                         u1255 0445  
                       u1185 07BC                         u1345 0387                         u1195 07CA  
                       u1355 0399                         u1295 048C                         u1385 0310  
                       u1660 0121                         u1670 0122                         u1907 0549  
                       u1917 057D                         u1927 05FA                         u1937 010B  
                       u1947 00BD                         u1957 06E0                         u1967 0735  
                       u1887 052B                         u1897 053A                         _KEYS 00A0  
               __CFG_WRT$OFF 0000                         _flag 0068                         _main 0061  
               _UTIL_STRcopy 0173                         btemp 007E       PASSWORD_check@password 007D  
               ?_KPAD_getKey 0070                __CFG_BOREN$ON 0000                         start 0000  
         __size_of_LCD_clear 0016           __size_of_LCD_latch 0012      __size_of_EEPROM_readStr 0023  
         __size_of_KPAD_init 0027           EEPROM_readStr@pStr 0073             __end_of_LCD_char 0173  
           __end_of_LCD_goTo 00E7                _UTIL_INTtoSTR 03AE             __end_of_LCD_init 0583  
                      ?_main 0070                __CFG_WDTE$OFF 0000              __end_of___lldiv 03AE  
            __end_of___llmod 0350                        _PCFG1 04F9                        _PCFG2 04FA  
              __CFG_PWRTE$ON 0000                  LCD_char@col 007D      EEPROM_writeByte@address 0072  
                      pclath 000A                  LCD_goTo@col 0077                        status 0003  
           _EEPROM_writeByte 01B7                        wtemp0 007E          UTIL_STRcompare@strA 0079  
        UTIL_STRcompare@strB 0076                ?_KPAD_waitKey 0070     __size_of_EEPROM_readByte 0019  
       __size_of_EEPROM_init 000E              __initialization 07E2              EEPROM_readStr@i 0077  
               __end_of_main 006C                  LCD_num@pStr 0041                  LCD_num@line 002C  
             ?_UTIL_INTtoSTR 0020                  LCD_out@data 0074                       ??_main 007E  
                LCD_str@line 0024                  LCD_update@i 0059                    ??_AC_init 007A  
        LCD_update@direction 005A                    ??_LCD_cmd 0075                    ??_LCD_num 002E  
                  ??_LCD_out 0071                    ??_LCD_str 0026            __end_of_LCD_clear 0111  
          __end_of_LCD_latch 00AD     __size_of_EEPROM_writeStr 002A                _KPAD_init$293 0072  
              _KPAD_init$294 0074            __end_of_KPAD_init 0203             ___llmod@dividend 0074  
                     _EECON2 018D            ??_UTIL_STRcompare 0077         EEPROM_readByte@pData 0070  
             KPAD_getKey@col 0077               KPAD_getKey@key 0075               KPAD_getKey@row 0076  
             ??_KPAD_waitKey 0078       __size_of_PASSWORD_init 000A       __size_of_PASSWORD_read 0038  
EEPROM_writeStr@startAddress 0076                    ??___lldiv 0078                    ??___llmod 0078  
               LCD_char@line 007C                _user_password 005C               _UTIL_STRlength 0140  
        EEPROM_writeStr@pStr 0074                _REAL_PASSWORD 0062                 LCD_goTo@line 007A  
    __end_of__initialization 07FC                    ?_LCD_char 007C                    ?_LCD_goTo 0077  
                  ?_LCD_init 0070             KPAD_waitKey@pKey 0079             EEPROM_init@state 0070  
      PASSWORD_init@password 0074               _EEPROM_readStr 0194                 LCD_init@mode 0079  
       __size_of_KPAD_getKey 0083             EEPROM_readStr@ch 0078               __pcstackCOMMON 0070  
               __pidataBANK0 0FFF                 __pidataBANK1 007A              ??_UTIL_INTtoSTR 0026  
     __end_of_UTIL_STRlength 0159            ??_EEPROM_readByte 0071                _PASSWORD_init 0057  
              _PASSWORD_read 028B                   __pbssBANK0 004E            ??_EEPROM_writeStr 0075  
                 ??_LCD_char 0020                   ??_LCD_goTo 0078       __end_of_EEPROM_readStr 01B7  
                 ??_LCD_init 0077                   __pmaintext 0061              ?_UTIL_STRlength 0070  
   __end_of_EEPROM_writeByte 01DC                      _AC_init 00E7                      _LCD_cmd 00AD  
       __end_of_KPAD_waitKey 00D3                      _LCD_num 022D                      _LCD_out 067D  
                    _LCD_str 025A               ?_PASSWORD_init 0070               ?_PASSWORD_read 0070  
                 __stringtab 0003              KPAD_getKey@pKey 0074         EEPROM_writeByte@data 0070  
            ?_EEPROM_readStr 0073      __size_of_PASSWORD_check 0016             EEPROM_writeStr@i 0077  
                    ___lldiv 0350                      ___llmod 0304                      __ptext1 00E7  
                    __ptext2 04A5                      __ptext3 01DC                      __ptext4 006C  
                    __ptext5 0583                      __ptext6 028B                      __ptext7 00C0  
                    __ptext8 0422                      __ptext9 0057   EEPROM_readStr@startAddress 0076  
    Convert_IntToString@nStr 004E              _UTIL_STRcompare 02C3                      clrloop0 0050  
                  _LCD_clear 00FB         end_of_initialization 07FC                    _LCD_latch 009B  
                  _KPAD_init 01DC                ??_EEPROM_init 0070              ___lldiv@divisor 0070  
            ___lldiv@counter 007D             UTIL_INTtoSTR@max 0025             UTIL_INTtoSTR@num 0020  
            ??_PASSWORD_init 0073              ??_PASSWORD_read 0022              LCD_update@Limit 006A  
                 ?_LCD_clear 0070                   ?_LCD_latch 0070                   ?_KPAD_init 0070  
            _EEPROM_readByte 0127            __size_of_LCD_char 001A            __size_of_LCD_goTo 0014  
          __size_of_LCD_init 00DE       PASSWORD_read@pPassword 0024          __end_of_EEPROM_init 007A  
      __size_of_KPAD_waitKey 0013      __end_of_UTIL_STRcompare 0304                   LCD_cmd@cmd 0076  
                 LCD_char@ch 0021              _EEPROM_writeStr 0203           UTIL_STRcompare@res 0078  
        start_initialization 07E2           UTIL_STRcopy@source 0072                   LCD_num@col 002D  
                 LCD_num@num 0028                   LCD_num@str 0030                   LCD_str@col 0025  
                 LCD_str@str 0022                ?_UTIL_STRcopy 0070                ??_KPAD_getKey 0070  
            ___llmod@divisor 0070              ___llmod@counter 0079             ??_UTIL_STRlength 0072  
               _KPAD_waitKey 00C0               _PASSWORD_check 0111                   init_fetch0 008A  
                __pdataBANK0 006A                  __pdataBANK1 00A0        __end_of_UTIL_INTtoSTR 0422  
          ?_EEPROM_writeByte 0070                     ?_AC_init 0070           UTIL_STRlength@pStr 0075  
                   ?_LCD_cmd 0070                     ?_LCD_num 0028                     ?_LCD_out 0070  
            KPAD_waitKey@key 007A                     ?_LCD_str 0022                    ___latbits 0002  
         ??_EEPROM_writeByte 0071                __pcstackBANK0 0020          PASSWORD_check@state 007C  
           ??_EEPROM_readStr 0074      __end_of_EEPROM_readByte 0140                  ??_LCD_clear 0077  
                ??_LCD_latch 0070                  ??_KPAD_init 0070               ??_UTIL_STRcopy 0071  
     __end_of_PASSWORD_check 0127                  _EEPROM_init 006C                    __pnvBANK0 0069  
        __end_of_KPAD_getKey 04A5                     ?___lldiv 0070                     ?___llmod 0070  
    __end_of_EEPROM_writeStr 022D                    __pstrings 0003             ?_UTIL_STRcompare 0076  
      LCD_update@LCD_counter 005B                     _LCD_char 0159                     _LCD_goTo 00D3  
                   _LCD_init 04A5                    clear_ram0 004F              ?_PASSWORD_check 0070  
                __stringbase 0012       EEPROM_readByte@address 0072             __size_of_AC_init 0014  
           __size_of_LCD_cmd 0013             __size_of_LCD_num 002D             __size_of_LCD_out 0165  
           __size_of_LCD_str 0031    AC_authentication@password 0047             ?_EEPROM_readByte 0070  
      EEPROM_writeByte@state 0073                  _KPAD_getKey 0422            _AC_authentication 0583  
           ?_EEPROM_writeStr 0074            UTIL_STRlength@len 0073             __size_of___lldiv 005E  
           __size_of___llmod 004C           __end_of__stringtab 0013           ?_AC_authentication 0070  
       __end_of_UTIL_STRcopy 0194                  _currentMode 0069        __end_of_PASSWORD_init 0061  
      __end_of_PASSWORD_read 02C3          ??_AC_authentication 0042                     __ptext10 0173  
                   __ptext11 0111                     __ptext20 00D3                     __ptext12 02C3  
                   __ptext21 00FB                     __ptext13 0140                     __ptext22 00AD  
                   __ptext14 022D                     __ptext23 067D                     __ptext15 03AE  
                   __ptext24 009B                     __ptext16 0304                     __ptext25 0203  
                   __ptext17 0350                     __ptext26 01B7                     __ptext18 025A  
                   __ptext27 0194                     __ptext19 0159                     __ptext28 0127  
            LCD_goTo@address 007B                __size_of_main 000B    __end_of_AC_authentication 067D  
         AC_authentication@i 004D      UTIL_STRcopy@destination 0070                     init_ram0 008E  
           ___lldiv@dividend 0074    __size_of_EEPROM_writeByte 0025                 ?_EEPROM_init 0070  
                  stringcode 000D           UTIL_INTtoSTR@ppStr 0024             ___lldiv@quotient 0079  
                   stringdir 000D                     stringtab 0003             PASSWORD_read@col 0023  
           ??_PASSWORD_check 007A             PASSWORD_read@key 0025       __size_of_UTIL_INTtoSTR 0074  
