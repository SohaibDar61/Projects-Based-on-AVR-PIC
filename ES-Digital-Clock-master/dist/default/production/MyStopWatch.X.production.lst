

Microchip MPLAB XC8 Assembler V2.05 build -831301201 
                                                                                               Sun Aug 11 14:38:58 2019

Microchip MPLAB XC8 C Compiler v2.05 (Free license) build 20181220022703 Og1 
     1                           	processor	16F877A
     2                           	opt	pw 120
     3                           	opt	flic
     4                           	psect	idataBANK1,global,class=CODE,delta=2
     5                           	psect	idataBANK3,global,class=CODE,delta=2
     6                           	psect	cinit,global,class=CODE,merge=1,delta=2
     7                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
     8                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1
     9                           	psect	dataBANK1,global,class=BANK1,space=1,delta=1
    10                           	psect	bssBANK3,global,class=BANK3,space=1,delta=1
    11                           	psect	dataBANK3,global,class=BANK3,space=1,delta=1
    12                           	psect	inittext,global,class=CODE,delta=2
    13                           	psect	clrtext,global,class=CODE,delta=2
    14                           	psect	cstackBANK2,global,class=BANK2,space=1,delta=1
    15                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
    16                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    17                           	psect	maintext,global,class=CODE,split=1,delta=2
    18                           	psect	text1,local,class=CODE,merge=1,delta=2
    19                           	psect	text2,local,class=CODE,merge=1,delta=2
    20                           	psect	text3,local,class=CODE,merge=1,delta=2
    21                           	psect	text4,local,class=CODE,merge=1,delta=2
    22                           	psect	text5,local,class=CODE,merge=1,delta=2
    23                           	psect	text6,local,class=CODE,merge=1,delta=2
    24                           	psect	text7,local,class=CODE,merge=1,delta=2
    25                           	psect	text8,local,class=CODE,merge=1,delta=2
    26                           	psect	text9,local,class=CODE,merge=1,delta=2
    27                           	psect	text10,local,class=CODE,merge=1,delta=2
    28                           	psect	text11,local,class=CODE,merge=1,delta=2
    29                           	psect	text12,local,class=CODE,merge=1,delta=2
    30                           	psect	text13,local,class=CODE,merge=1,delta=2
    31                           	psect	text14,local,class=CODE,merge=1,delta=2
    32                           	psect	text15,local,class=CODE,merge=1,delta=2
    33                           	psect	text16,local,class=CODE,merge=1,delta=2
    34                           	psect	text17,local,class=CODE,merge=1,delta=2,group=1
    35                           	psect	text18,local,class=CODE,merge=1,delta=2
    36                           	psect	text19,local,class=CODE,merge=1,delta=2
    37                           	psect	text20,local,class=CODE,merge=1,delta=2,group=1
    38                           	psect	text21,local,class=CODE,merge=1,delta=2,group=1
    39                           	psect	text22,local,class=CODE,merge=1,delta=2
    40                           	psect	intentry,global,class=CODE,delta=2
    41                           	psect	text23,local,class=CODE,merge=1,delta=2
    42                           	psect	text24,local,class=CODE,merge=1,delta=2
    43                           	psect	text25,local,class=CODE,merge=1,delta=2
    44                           	psect	text26,local,class=CODE,merge=1,delta=2
    45                           	psect	text27,local,class=CODE,merge=1,delta=2
    46                           	psect	text28,local,class=CODE,merge=1,delta=2
    47                           	psect	text29,local,class=CODE,merge=1,delta=2
    48                           	psect	text30,local,class=CODE,merge=1,delta=2
    49                           	psect	text31,local,class=CODE,merge=1,delta=2
    50                           	psect	text32,local,class=CODE,merge=1,delta=2
    51                           	psect	text33,local,class=CODE,merge=1,delta=2
    52                           	psect	text34,local,class=CODE,merge=1,delta=2
    53                           	psect	text35,local,class=CODE,merge=1,delta=2
    54                           	psect	text36,local,class=CODE,merge=1,delta=2
    55                           	psect	text37,local,class=CODE,merge=1,delta=2
    56                           	psect	text38,local,class=CODE,merge=1,delta=2
    57                           	psect	text39,local,class=CODE,merge=1,delta=2
    58                           	psect	text40,local,class=CODE,merge=1,delta=2
    59                           	psect	text41,local,class=CODE,merge=1,delta=2
    60                           	psect	text42,local,class=CODE,merge=1,delta=2
    61                           	psect	text43,local,class=CODE,merge=1,delta=2
    62                           	psect	text44,local,class=CODE,merge=1,delta=2
    63                           	psect	text45,local,class=CODE,merge=1,delta=2
    64                           	psect	text46,local,class=CODE,merge=1,delta=2
    65                           	psect	text47,local,class=CODE,merge=1,delta=2
    66                           	psect	text48,local,class=CODE,merge=1,delta=2
    67                           	dabs	1,0x7E,2
    68  0000                     
    69                           ; Version 2.05
    70                           ; Generated 20/12/2018 GMT
    71                           ; 
    72                           ; Copyright Â© 2018, Microchip Technology Inc. and its subsidiaries ("Microchip")
    73                           ; All rights reserved.
    74                           ; 
    75                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    76                           ; 
    77                           ; Redistribution and use in source and binary forms, with or without modification, are
    78                           ; permitted provided that the following conditions are met:
    79                           ; 
    80                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    81                           ;        conditions and the following disclaimer.
    82                           ; 
    83                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    84                           ;        of conditions and the following disclaimer in the documentation and/or other
    85                           ;        materials provided with the distribution.
    86                           ; 
    87                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    88                           ;        software without specific prior written permission.
    89                           ; 
    90                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    91                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    92                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    93                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    94                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    95                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    96                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    97                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    98                           ; 
    99                           ; 
   100                           ; Code-generator required, PIC16F877A Definitions
   101                           ; 
   102                           ; SFR Addresses
   103  0000                     	;# 
   104  0001                     	;# 
   105  0002                     	;# 
   106  0003                     	;# 
   107  0004                     	;# 
   108  0005                     	;# 
   109  0006                     	;# 
   110  0007                     	;# 
   111  0008                     	;# 
   112  0009                     	;# 
   113  000A                     	;# 
   114  000B                     	;# 
   115  000C                     	;# 
   116  000D                     	;# 
   117  000E                     	;# 
   118  000E                     	;# 
   119  000F                     	;# 
   120  0010                     	;# 
   121  0011                     	;# 
   122  0012                     	;# 
   123  0013                     	;# 
   124  0014                     	;# 
   125  0015                     	;# 
   126  0015                     	;# 
   127  0016                     	;# 
   128  0017                     	;# 
   129  0018                     	;# 
   130  0019                     	;# 
   131  001A                     	;# 
   132  001B                     	;# 
   133  001B                     	;# 
   134  001C                     	;# 
   135  001D                     	;# 
   136  001E                     	;# 
   137  001F                     	;# 
   138  0081                     	;# 
   139  0085                     	;# 
   140  0086                     	;# 
   141  0087                     	;# 
   142  0088                     	;# 
   143  0089                     	;# 
   144  008C                     	;# 
   145  008D                     	;# 
   146  008E                     	;# 
   147  0091                     	;# 
   148  0092                     	;# 
   149  0093                     	;# 
   150  0094                     	;# 
   151  0098                     	;# 
   152  0099                     	;# 
   153  009C                     	;# 
   154  009D                     	;# 
   155  009E                     	;# 
   156  009F                     	;# 
   157  010C                     	;# 
   158  010D                     	;# 
   159  010E                     	;# 
   160  010F                     	;# 
   161  018C                     	;# 
   162  018D                     	;# 
   163  0000                     	;# 
   164  0001                     	;# 
   165  0002                     	;# 
   166  0003                     	;# 
   167  0004                     	;# 
   168  0005                     	;# 
   169  0006                     	;# 
   170  0007                     	;# 
   171  0008                     	;# 
   172  0009                     	;# 
   173  000A                     	;# 
   174  000B                     	;# 
   175  000C                     	;# 
   176  000D                     	;# 
   177  000E                     	;# 
   178  000E                     	;# 
   179  000F                     	;# 
   180  0010                     	;# 
   181  0011                     	;# 
   182  0012                     	;# 
   183  0013                     	;# 
   184  0014                     	;# 
   185  0015                     	;# 
   186  0015                     	;# 
   187  0016                     	;# 
   188  0017                     	;# 
   189  0018                     	;# 
   190  0019                     	;# 
   191  001A                     	;# 
   192  001B                     	;# 
   193  001B                     	;# 
   194  001C                     	;# 
   195  001D                     	;# 
   196  001E                     	;# 
   197  001F                     	;# 
   198  0081                     	;# 
   199  0085                     	;# 
   200  0086                     	;# 
   201  0087                     	;# 
   202  0088                     	;# 
   203  0089                     	;# 
   204  008C                     	;# 
   205  008D                     	;# 
   206  008E                     	;# 
   207  0091                     	;# 
   208  0092                     	;# 
   209  0093                     	;# 
   210  0094                     	;# 
   211  0098                     	;# 
   212  0099                     	;# 
   213  009C                     	;# 
   214  009D                     	;# 
   215  009E                     	;# 
   216  009F                     	;# 
   217  010C                     	;# 
   218  010D                     	;# 
   219  010E                     	;# 
   220  010F                     	;# 
   221  018C                     	;# 
   222  018D                     	;# 
   223  0000                     	;# 
   224  0001                     	;# 
   225  0002                     	;# 
   226  0003                     	;# 
   227  0004                     	;# 
   228  0005                     	;# 
   229  0006                     	;# 
   230  0007                     	;# 
   231  0008                     	;# 
   232  0009                     	;# 
   233  000A                     	;# 
   234  000B                     	;# 
   235  000C                     	;# 
   236  000D                     	;# 
   237  000E                     	;# 
   238  000E                     	;# 
   239  000F                     	;# 
   240  0010                     	;# 
   241  0011                     	;# 
   242  0012                     	;# 
   243  0013                     	;# 
   244  0014                     	;# 
   245  0015                     	;# 
   246  0015                     	;# 
   247  0016                     	;# 
   248  0017                     	;# 
   249  0018                     	;# 
   250  0019                     	;# 
   251  001A                     	;# 
   252  001B                     	;# 
   253  001B                     	;# 
   254  001C                     	;# 
   255  001D                     	;# 
   256  001E                     	;# 
   257  001F                     	;# 
   258  0081                     	;# 
   259  0085                     	;# 
   260  0086                     	;# 
   261  0087                     	;# 
   262  0088                     	;# 
   263  0089                     	;# 
   264  008C                     	;# 
   265  008D                     	;# 
   266  008E                     	;# 
   267  0091                     	;# 
   268  0092                     	;# 
   269  0093                     	;# 
   270  0094                     	;# 
   271  0098                     	;# 
   272  0099                     	;# 
   273  009C                     	;# 
   274  009D                     	;# 
   275  009E                     	;# 
   276  009F                     	;# 
   277  010C                     	;# 
   278  010D                     	;# 
   279  010E                     	;# 
   280  010F                     	;# 
   281  018C                     	;# 
   282  018D                     	;# 
   283  0000                     	;# 
   284  0001                     	;# 
   285  0002                     	;# 
   286  0003                     	;# 
   287  0004                     	;# 
   288  0005                     	;# 
   289  0006                     	;# 
   290  0007                     	;# 
   291  0008                     	;# 
   292  0009                     	;# 
   293  000A                     	;# 
   294  000B                     	;# 
   295  000C                     	;# 
   296  000D                     	;# 
   297  000E                     	;# 
   298  000E                     	;# 
   299  000F                     	;# 
   300  0010                     	;# 
   301  0011                     	;# 
   302  0012                     	;# 
   303  0013                     	;# 
   304  0014                     	;# 
   305  0015                     	;# 
   306  0015                     	;# 
   307  0016                     	;# 
   308  0017                     	;# 
   309  0018                     	;# 
   310  0019                     	;# 
   311  001A                     	;# 
   312  001B                     	;# 
   313  001B                     	;# 
   314  001C                     	;# 
   315  001D                     	;# 
   316  001E                     	;# 
   317  001F                     	;# 
   318  0081                     	;# 
   319  0085                     	;# 
   320  0086                     	;# 
   321  0087                     	;# 
   322  0088                     	;# 
   323  0089                     	;# 
   324  008C                     	;# 
   325  008D                     	;# 
   326  008E                     	;# 
   327  0091                     	;# 
   328  0092                     	;# 
   329  0093                     	;# 
   330  0094                     	;# 
   331  0098                     	;# 
   332  0099                     	;# 
   333  009C                     	;# 
   334  009D                     	;# 
   335  009E                     	;# 
   336  009F                     	;# 
   337  010C                     	;# 
   338  010D                     	;# 
   339  010E                     	;# 
   340  010F                     	;# 
   341  018C                     	;# 
   342  018D                     	;# 
   343  0000                     	;# 
   344  0001                     	;# 
   345  0002                     	;# 
   346  0003                     	;# 
   347  0004                     	;# 
   348  0005                     	;# 
   349  0006                     	;# 
   350  0007                     	;# 
   351  0008                     	;# 
   352  0009                     	;# 
   353  000A                     	;# 
   354  000B                     	;# 
   355  000C                     	;# 
   356  000D                     	;# 
   357  000E                     	;# 
   358  000E                     	;# 
   359  000F                     	;# 
   360  0010                     	;# 
   361  0011                     	;# 
   362  0012                     	;# 
   363  0013                     	;# 
   364  0014                     	;# 
   365  0015                     	;# 
   366  0015                     	;# 
   367  0016                     	;# 
   368  0017                     	;# 
   369  0018                     	;# 
   370  0019                     	;# 
   371  001A                     	;# 
   372  001B                     	;# 
   373  001B                     	;# 
   374  001C                     	;# 
   375  001D                     	;# 
   376  001E                     	;# 
   377  001F                     	;# 
   378  0081                     	;# 
   379  0085                     	;# 
   380  0086                     	;# 
   381  0087                     	;# 
   382  0088                     	;# 
   383  0089                     	;# 
   384  008C                     	;# 
   385  008D                     	;# 
   386  008E                     	;# 
   387  0091                     	;# 
   388  0092                     	;# 
   389  0093                     	;# 
   390  0094                     	;# 
   391  0098                     	;# 
   392  0099                     	;# 
   393  009C                     	;# 
   394  009D                     	;# 
   395  009E                     	;# 
   396  009F                     	;# 
   397  010C                     	;# 
   398  010D                     	;# 
   399  010E                     	;# 
   400  010F                     	;# 
   401  018C                     	;# 
   402  018D                     	;# 
   403  0000                     	;# 
   404  0001                     	;# 
   405  0002                     	;# 
   406  0003                     	;# 
   407  0004                     	;# 
   408  0005                     	;# 
   409  0006                     	;# 
   410  0007                     	;# 
   411  0008                     	;# 
   412  0009                     	;# 
   413  000A                     	;# 
   414  000B                     	;# 
   415  000C                     	;# 
   416  000D                     	;# 
   417  000E                     	;# 
   418  000E                     	;# 
   419  000F                     	;# 
   420  0010                     	;# 
   421  0011                     	;# 
   422  0012                     	;# 
   423  0013                     	;# 
   424  0014                     	;# 
   425  0015                     	;# 
   426  0015                     	;# 
   427  0016                     	;# 
   428  0017                     	;# 
   429  0018                     	;# 
   430  0019                     	;# 
   431  001A                     	;# 
   432  001B                     	;# 
   433  001B                     	;# 
   434  001C                     	;# 
   435  001D                     	;# 
   436  001E                     	;# 
   437  001F                     	;# 
   438  0081                     	;# 
   439  0085                     	;# 
   440  0086                     	;# 
   441  0087                     	;# 
   442  0088                     	;# 
   443  0089                     	;# 
   444  008C                     	;# 
   445  008D                     	;# 
   446  008E                     	;# 
   447  0091                     	;# 
   448  0092                     	;# 
   449  0093                     	;# 
   450  0094                     	;# 
   451  0098                     	;# 
   452  0099                     	;# 
   453  009C                     	;# 
   454  009D                     	;# 
   455  009E                     	;# 
   456  009F                     	;# 
   457  010C                     	;# 
   458  010D                     	;# 
   459  010E                     	;# 
   460  010F                     	;# 
   461  018C                     	;# 
   462  018D                     	;# 
   463  0000                     	;# 
   464  0001                     	;# 
   465  0002                     	;# 
   466  0003                     	;# 
   467  0004                     	;# 
   468  0005                     	;# 
   469  0006                     	;# 
   470  0007                     	;# 
   471  0008                     	;# 
   472  0009                     	;# 
   473  000A                     	;# 
   474  000B                     	;# 
   475  000C                     	;# 
   476  000D                     	;# 
   477  000E                     	;# 
   478  000E                     	;# 
   479  000F                     	;# 
   480  0010                     	;# 
   481  0011                     	;# 
   482  0012                     	;# 
   483  0013                     	;# 
   484  0014                     	;# 
   485  0015                     	;# 
   486  0015                     	;# 
   487  0016                     	;# 
   488  0017                     	;# 
   489  0018                     	;# 
   490  0019                     	;# 
   491  001A                     	;# 
   492  001B                     	;# 
   493  001B                     	;# 
   494  001C                     	;# 
   495  001D                     	;# 
   496  001E                     	;# 
   497  001F                     	;# 
   498  0081                     	;# 
   499  0085                     	;# 
   500  0086                     	;# 
   501  0087                     	;# 
   502  0088                     	;# 
   503  0089                     	;# 
   504  008C                     	;# 
   505  008D                     	;# 
   506  008E                     	;# 
   507  0091                     	;# 
   508  0092                     	;# 
   509  0093                     	;# 
   510  0094                     	;# 
   511  0098                     	;# 
   512  0099                     	;# 
   513  009C                     	;# 
   514  009D                     	;# 
   515  009E                     	;# 
   516  009F                     	;# 
   517  010C                     	;# 
   518  010D                     	;# 
   519  010E                     	;# 
   520  010F                     	;# 
   521  018C                     	;# 
   522  018D                     	;# 
   523                           
   524                           	psect	idataBANK1
   525  0BE9                     __pidataBANK1:	
   526                           
   527                           ;initializer for ssd_schematic_init@F937
   528  0BE9  3488               	retlw	136
   529  0BEA  3400               	retlw	0
   530  0BEB  3408               	retlw	8
   531  0BEC  3400               	retlw	0
   532  0BED  3486               	retlw	134
   533  0BEE  3400               	retlw	0
   534  0BEF  3406               	retlw	6
   535  0BF0  3400               	retlw	0
   536  0BF1  3406               	retlw	6
   537  0BF2  340A               	retlw	10
   538                           
   539                           ;initializer for ssd_schematic_init@F935
   540  0BF3  3488               	retlw	136
   541  0BF4  3400               	retlw	0
   542  0BF5  3408               	retlw	8
   543  0BF6  3400               	retlw	0
   544  0BF7  3486               	retlw	134
   545  0BF8  3400               	retlw	0
   546  0BF9  3406               	retlw	6
   547  0BFA  3400               	retlw	0
   548  0BFB  3405               	retlw	5
   549  0BFC  340A               	retlw	10
   550                           
   551                           ;initializer for ssd_schematic_init@F933
   552  0BFD  3488               	retlw	136
   553  0BFE  3400               	retlw	0
   554  0BFF  3408               	retlw	8
   555  0C00  3400               	retlw	0
   556  0C01  3486               	retlw	134
   557  0C02  3400               	retlw	0
   558  0C03  3406               	retlw	6
   559  0C04  3400               	retlw	0
   560  0C05  3404               	retlw	4
   561  0C06  340A               	retlw	10
   562                           
   563                           	psect	idataBANK3
   564  0B17                     __pidataBANK3:	
   565                           
   566                           ;initializer for _ssd_decoder
   567  0B17  343F               	retlw	63
   568  0B18  3406               	retlw	6
   569  0B19  345B               	retlw	91
   570  0B1A  344F               	retlw	79
   571  0B1B  3466               	retlw	102
   572  0B1C  346D               	retlw	109
   573  0B1D  347D               	retlw	125
   574  0B1E  3407               	retlw	7
   575  0B1F  347F               	retlw	127
   576  0B20  346F               	retlw	111
   577  0B21  3400               	retlw	0
   578                           
   579                           ;initializer for ssd_schematic_init@F939
   580  0B22  3488               	retlw	136
   581  0B23  3400               	retlw	0
   582  0B24  3408               	retlw	8
   583  0B25  3400               	retlw	0
   584  0B26  3486               	retlw	134
   585  0B27  3400               	retlw	0
   586  0B28  3406               	retlw	6
   587  0B29  3400               	retlw	0
   588  0B2A  3407               	retlw	7
   589  0B2B  340A               	retlw	10
   590                           
   591                           ; #config settings
   592  0000                     
   593                           	psect	cinit
   594  0013                     start_initialization:	
   595  0013                     __initialization:	
   596                           
   597                           ; Initialize objects allocated to BANK3
   598  0013  1783               	bsf	3,7	;select IRP bank2
   599  0014  30CD               	movlw	low (__pdataBANK3+21)
   600  0015  00FD               	movwf	btemp+-1
   601  0016  300B               	movlw	high __pidataBANK3
   602  0017  00FE               	movwf	btemp
   603  0018  3017               	movlw	low __pidataBANK3
   604  0019  00FF               	movwf	btemp+1
   605  001A  30B8               	movlw	low __pdataBANK3
   606  001B  0084               	movwf	4
   607  001C  120A  158A  22CE  120A  118A  	fcall	init_ram0
   608                           
   609                           ; Initialize objects allocated to BANK1
   610  0021  1383               	bcf	3,7	;select IRP bank0
   611  0022  30DC               	movlw	low (__pdataBANK1+30)
   612  0023  00FD               	movwf	btemp+-1
   613  0024  300B               	movlw	high __pidataBANK1
   614  0025  00FE               	movwf	btemp
   615  0026  30E9               	movlw	low __pidataBANK1
   616  0027  00FF               	movwf	btemp+1
   617  0028  30BE               	movlw	low __pdataBANK1
   618  0029  0084               	movwf	4
   619  002A  120A  158A  22CE  120A  118A  	fcall	init_ram0
   620                           
   621                           ; Clear objects allocated to BANK3
   622  002F  1783               	bsf	3,7	;select IRP bank2
   623  0030  3090               	movlw	low __pbssBANK3
   624  0031  0084               	movwf	4
   625  0032  30B8               	movlw	low (__pbssBANK3+40)
   626  0033  120A  158A  2287  120A  118A  	fcall	clear_ram0
   627                           
   628                           ; Clear objects allocated to BANK1
   629  0038  1383               	bcf	3,7	;select IRP bank0
   630  0039  30A0               	movlw	low __pbssBANK1
   631  003A  0084               	movwf	4
   632  003B  30BE               	movlw	low (__pbssBANK1+30)
   633  003C  120A  158A  2287  120A  118A  	fcall	clear_ram0
   634                           
   635                           ; Clear objects allocated to BANK0
   636  0041  304B               	movlw	low __pbssBANK0
   637  0042  0084               	movwf	4
   638  0043  3059               	movlw	low (__pbssBANK0+14)
   639  0044  120A  158A  2287   	fcall	clear_ram0
   640  0047                     end_of_initialization:	
   641                           ;End of C runtime variable initialization code
   642                           
   643  0047                     __end_of__initialization:	
   644  0047  0183               	clrf	3
   645  0048  120A  158A  2D1F   	ljmp	_main	;jump to C main() function
   646                           
   647                           	psect	bssBANK0
   648  004B                     __pbssBANK0:	
   649  004B                     _current_time:	
   650  004B                     	ds	3
   651  004E                     display_update@current_disp_period:	
   652  004E                     	ds	1
   653  004F                     time_update@current_period:	
   654  004F                     	ds	1
   655  0050                     _current_mode:	
   656  0050                     	ds	1
   657  0051                     ssd_update@ssd_update_counter:	
   658  0051                     	ds	1
   659  0052                     _dot_state:	
   660  0052                     	ds	1
   661  0053                     _current_ssd:	
   662  0053                     	ds	1
   663  0054                     switch_update@sw_update_counter:	
   664  0054                     	ds	1
   665  0055                     _display_time:	
   666  0055                     	ds	3
   667  0058                     _display_mode:	
   668  0058                     	ds	1
   669                           
   670                           	psect	bssBANK1
   671  00A0                     __pbssBANK1:	
   672  00A0                     _switches_data:	
   673  00A0                     	ds	24
   674  00B8                     _mode_blink_counter:	
   675  00B8                     	ds	2
   676  00BA                     _dot_blink_counter:	
   677  00BA                     	ds	2
   678  00BC                     _current_sec_period:	
   679  00BC                     	ds	2
   680                           
   681                           	psect	dataBANK1
   682  00BE                     __pdataBANK1:	
   683  00BE                     ssd_schematic_init@F937:	
   684  00BE                     	ds	10
   685  00C8                     ssd_schematic_init@F935:	
   686  00C8                     	ds	10
   687  00D2                     ssd_schematic_init@F933:	
   688  00D2                     	ds	10
   689                           
   690                           	psect	bssBANK3
   691  0190                     __pbssBANK3:	
   692  0190                     _ssd_data:	
   693  0190                     	ds	40
   694                           
   695                           	psect	dataBANK3
   696  01B8                     __pdataBANK3:	
   697  01B8                     _ssd_decoder:	
   698  01B8                     	ds	11
   699  01C3                     ssd_schematic_init@F939:	
   700  01C3                     	ds	10
   701                           
   702                           	psect	inittext
   703  0ACA                     init_fetch0:	
   704                           ;	Called with low address in FSR and high address in W
   705                           
   706  0ACA  087E               	movf	126,w
   707  0ACB  008A               	movwf	10
   708  0ACC  087F               	movf	127,w
   709  0ACD  0082               	movwf	2
   710  0ACE                     init_ram0:	
   711                           ;Called with:
   712                           ;	high address of idata address in btemp 
   713                           ;	low address of idata address in btemp+1 
   714                           ;	low address of data in FSR
   715                           ;	high address + 1 of data in btemp-1
   716                           
   717  0ACE  22CA  120A  158A   	fcall	init_fetch0
   718  0AD1  0080               	movwf	0
   719  0AD2  0A84               	incf	4,f
   720  0AD3  0804               	movf	4,w
   721  0AD4  067D               	xorwf	125,w
   722  0AD5  1903               	btfsc	3,2
   723  0AD6  3400               	retlw	0
   724  0AD7  0AFF               	incf	127,f
   725  0AD8  1903               	btfsc	3,2
   726  0AD9  0AFE               	incf	126,f
   727  0ADA  2ACE               	goto	init_ram0
   728                           
   729                           	psect	clrtext
   730  0A87                     clear_ram0:	
   731                           ;	Called with FSR containing the base address, and
   732                           ;	W with the last address+1
   733                           
   734  0A87  0064               	clrwdt	;clear the watchdog before getting into this loop
   735  0A88                     clrloop0:	
   736  0A88  0180               	clrf	0	;clear RAM location pointed to by FSR
   737  0A89  0A84               	incf	4,f	;increment pointer
   738  0A8A  0604               	xorwf	4,w	;XOR with final address
   739  0A8B  1903               	btfsc	3,2	;have we reached the end yet?
   740  0A8C  3400               	retlw	0	;all done for this memory range, return
   741  0A8D  0604               	xorwf	4,w	;XOR again to restore value
   742  0A8E  2A88               	goto	clrloop0	;do the next byte
   743                           
   744                           	psect	cstackBANK2
   745  0110                     __pcstackBANK2:	
   746  0110                     ssd_schematic_init@934:	
   747                           
   748                           ; 10 bytes @ 0x0
   749  0110                     	ds	10
   750  011A                     ssd_schematic_init@936:	
   751                           
   752                           ; 10 bytes @ 0xA
   753  011A                     	ds	10
   754  0124                     ssd_schematic_init@938:	
   755                           
   756                           ; 10 bytes @ 0x14
   757  0124                     	ds	10
   758  012E                     ssd_schematic_init@940:	
   759                           
   760                           ; 10 bytes @ 0x1E
   761  012E                     	ds	10
   762                           
   763                           	psect	cstackCOMMON
   764  0070                     __pcstackCOMMON:	
   765  0070                     ?_switches_Schematic_init:	
   766  0070                     ?_time_init:	
   767                           ; 1 bytes @ 0x0
   768                           
   769  0070                     ?_display_init:	
   770                           ; 1 bytes @ 0x0
   771                           
   772  0070                     ?_timer0_reload:	
   773                           ; 1 bytes @ 0x0
   774                           
   775  0070                     ?_T0_timer_mode_state:	
   776                           ; 1 bytes @ 0x0
   777                           
   778  0070                     ?_ssd_update:	
   779                           ; 1 bytes @ 0x0
   780                           
   781  0070                     ?_time_update:	
   782                           ; 1 bytes @ 0x0
   783                           
   784  0070                     ?_display_update:	
   785                           ; 1 bytes @ 0x0
   786                           
   787  0070                     ?_ssd_schematic_init:	
   788                           ; 1 bytes @ 0x0
   789                           
   790  0070                     ?_ssd_off:	
   791                           ; 1 bytes @ 0x0
   792                           
   793  0070                     ?_ssd_on:	
   794                           ; 1 bytes @ 0x0
   795                           
   796  0070                     ?_dot_display:	
   797                           ; 1 bytes @ 0x0
   798                           
   799  0070                     ?_sw_plus_handler:	
   800                           ; 1 bytes @ 0x0
   801                           
   802  0070                     ?_sw_minus_handler:	
   803                           ; 1 bytes @ 0x0
   804                           
   805  0070                     ??_sw_minus_handler:	
   806                           ; 1 bytes @ 0x0
   807                           
   808  0070                     ?_sw_setting_handler:	
   809                           ; 1 bytes @ 0x0
   810                           
   811  0070                     ??_sw_setting_handler:	
   812                           ; 1 bytes @ 0x0
   813                           
   814  0070                     ?_update_current_time:	
   815                           ; 1 bytes @ 0x0
   816                           
   817  0070                     ?_normal_mode_display:	
   818                           ; 1 bytes @ 0x0
   819                           
   820  0070                     ?_adjust_hours_mode_display:	
   821                           ; 1 bytes @ 0x0
   822                           
   823  0070                     ?_adjust_minutes_mode_display:	
   824                           ; 1 bytes @ 0x0
   825                           
   826  0070                     ?_timer0_set_prescaller:	
   827                           ; 1 bytes @ 0x0
   828                           
   829  0070                     ?_timer0_set_mode:	
   830                           ; 1 bytes @ 0x0
   831                           
   832  0070                     ?_timer0_ovf_setState:	
   833                           ; 1 bytes @ 0x0
   834                           
   835  0070                     ?_T0_counter_mode_state:	
   836                           ; 1 bytes @ 0x0
   837                           
   838  0070                     ?_switch_init:	
   839                           ; 1 bytes @ 0x0
   840                           
   841  0070                     ?_switch_getState:	
   842                           ; 1 bytes @ 0x0
   843                           
   844  0070                     ??_switch_getState:	
   845                           ; 1 bytes @ 0x0
   846                           
   847  0070                     ?_switch_update:	
   848                           ; 1 bytes @ 0x0
   849                           
   850  0070                     ??_switch_update:	
   851                           ; 1 bytes @ 0x0
   852                           
   853  0070                     ?_main:	
   854                           ; 1 bytes @ 0x0
   855                           
   856  0070                     ?_APP_UPDATE:	
   857                           ; 1 bytes @ 0x0
   858                           
   859  0070                     ?_ssd_init:	
   860                           ; 1 bytes @ 0x0
   861                           
   862  0070                     ?_ssd_getSymbol:	
   863                           ; 1 bytes @ 0x0
   864                           
   865  0070                     ?_ssdDot_setState:	
   866                           ; 1 bytes @ 0x0
   867                           
   868  0070                     ?_ssdDot_getState:	
   869                           ; 1 bytes @ 0x0
   870                           
   871  0070                     ??_ssdDot_getState:	
   872                           ; 1 bytes @ 0x0
   873                           
   874  0070                     ?_get_time:	
   875                           ; 1 bytes @ 0x0
   876                           
   877  0070                     ?_get_mode:	
   878                           ; 1 bytes @ 0x0
   879                           
   880  0070                     ??_get_mode:	
   881                           ; 1 bytes @ 0x0
   882                           
   883  0070                     ?i1_ssdDot_setState:	
   884                           ; 1 bytes @ 0x0
   885                           
   886  0070                     ??i1_ssdDot_setState:	
   887                           ; 1 bytes @ 0x0
   888                           
   889  0070                     ?i1_dot_display:	
   890                           ; 1 bytes @ 0x0
   891                           
   892  0070                     ??i1_dot_display:	
   893                           ; 1 bytes @ 0x0
   894                           
   895  0070                     ?i1_get_time:	
   896                           ; 1 bytes @ 0x0
   897                           
   898  0070                     ??i1_get_time:	
   899                           ; 1 bytes @ 0x0
   900                           
   901  0070                     ?i1_timer0_reload:	
   902                           ; 1 bytes @ 0x0
   903                           
   904  0070                     ??i1_timer0_reload:	
   905                           ; 1 bytes @ 0x0
   906                           
   907  0070                     ?i1___bmul:	
   908                           ; 1 bytes @ 0x0
   909                           
   910  0070                     ?i1___awdiv:	
   911                           ; 1 bytes @ 0x0
   912                           
   913  0070                     ?i1___awmod:	
   914                           ; 2 bytes @ 0x0
   915                           
   916  0070                     i1___bmul@multiplicand:	
   917                           ; 2 bytes @ 0x0
   918                           
   919  0070                     i1___awdiv@divisor:	
   920                           ; 1 bytes @ 0x0
   921                           
   922  0070                     i1___awmod@divisor:	
   923                           ; 2 bytes @ 0x0
   924                           
   925                           
   926                           ; 2 bytes @ 0x0
   927  0070                     	ds	1
   928  0071                     ??i1___bmul:	
   929  0071                     get_mode@mode:	
   930                           ; 1 bytes @ 0x1
   931                           
   932  0071                     i1ssdDot_setState@state:	
   933                           ; 1 bytes @ 0x1
   934                           
   935  0071                     i1get_time@time:	
   936                           ; 1 bytes @ 0x1
   937                           
   938  0071                     i1timer0_reload@val:	
   939                           ; 1 bytes @ 0x1
   940                           
   941                           
   942                           ; 1 bytes @ 0x1
   943  0071                     	ds	1
   944  0072                     switch_getState@sw:	
   945  0072                     i1dot_display@state:	
   946                           ; 1 bytes @ 0x2
   947                           
   948  0072                     i1___bmul@multiplier:	
   949                           ; 1 bytes @ 0x2
   950                           
   951  0072                     i1___awdiv@dividend:	
   952                           ; 1 bytes @ 0x2
   953                           
   954  0072                     i1___awmod@dividend:	
   955                           ; 2 bytes @ 0x2
   956                           
   957                           
   958                           ; 2 bytes @ 0x2
   959  0072                     	ds	1
   960  0073                     switch_getState@ret:	
   961  0073                     i1___bmul@product:	
   962                           ; 1 bytes @ 0x3
   963                           
   964                           
   965                           ; 1 bytes @ 0x3
   966  0073                     	ds	1
   967  0074                     ??_ssd_getSymbol:	
   968  0074                     ?i1_ssd_display:	
   969                           ; 1 bytes @ 0x4
   970                           
   971  0074                     ??i1___awdiv:	
   972                           ; 1 bytes @ 0x4
   973                           
   974  0074                     ??i1___awmod:	
   975                           ; 1 bytes @ 0x4
   976                           
   977  0074                     ssd_on@ssd:	
   978                           ; 1 bytes @ 0x4
   979                           
   980  0074                     ssd_off@ssd:	
   981                           ; 1 bytes @ 0x4
   982                           
   983  0074                     i1ssd_display@symbol:	
   984                           ; 1 bytes @ 0x4
   985                           
   986                           
   987                           ; 1 bytes @ 0x4
   988  0074                     	ds	1
   989  0075                     ??i1_ssd_display:	
   990  0075                     ssd_getSymbol@ssd:	
   991                           ; 1 bytes @ 0x5
   992                           
   993  0075                     i1___awdiv@counter:	
   994                           ; 1 bytes @ 0x5
   995                           
   996  0075                     i1___awmod@counter:	
   997                           ; 1 bytes @ 0x5
   998                           
   999                           
  1000                           ; 1 bytes @ 0x5
  1001  0075                     	ds	1
  1002  0076                     i1___awdiv@sign:	
  1003  0076                     i1___awmod@sign:	
  1004                           ; 1 bytes @ 0x6
  1005                           
  1006                           
  1007                           ; 1 bytes @ 0x6
  1008  0076                     	ds	1
  1009  0077                     ??_sw_plus_handler:	
  1010  0077                     ??_update_current_time:	
  1011                           ; 1 bytes @ 0x7
  1012                           
  1013  0077                     switch_update@sample_index:	
  1014                           ; 1 bytes @ 0x7
  1015                           
  1016  0077                     i1___awdiv@quotient:	
  1017                           ; 1 bytes @ 0x7
  1018                           
  1019                           
  1020                           ; 2 bytes @ 0x7
  1021  0077                     	ds	1
  1022  0078                     switch_update@sw_index:	
  1023                           
  1024                           ; 1 bytes @ 0x8
  1025  0078                     	ds	1
  1026  0079                     ?i1_ssd_setSymbol:	
  1027  0079                     i1ssd_setSymbol@symbol:	
  1028                           ; 1 bytes @ 0x9
  1029                           
  1030  0079                     i1ssd_display@ssd:	
  1031                           ; 1 bytes @ 0x9
  1032                           
  1033                           
  1034                           ; 1 bytes @ 0x9
  1035  0079                     	ds	1
  1036  007A                     ??_ssd_update:	
  1037  007A                     ??_time_update:	
  1038                           ; 1 bytes @ 0xA
  1039                           
  1040  007A                     ??i1_ssd_setSymbol:	
  1041                           ; 1 bytes @ 0xA
  1042                           
  1043                           
  1044                           ; 1 bytes @ 0xA
  1045  007A                     	ds	2
  1046  007C                     time_update@index:	
  1047  007C                     i1ssd_setSymbol@ssd:	
  1048                           ; 1 bytes @ 0xC
  1049                           
  1050  007C                     _ssd_update$1597:	
  1051                           ; 1 bytes @ 0xC
  1052                           
  1053                           
  1054                           ; 1 bytes @ 0xC
  1055  007C                     	ds	1
  1056  007D                     ssd_update@index:	
  1057                           
  1058                           ; 1 bytes @ 0xD
  1059  007D                     	ds	1
  1060                           
  1061                           	psect	cstackBANK0
  1062  0020                     __pcstackBANK0:	
  1063  0020                     ??_ssd_off:	
  1064  0020                     ??_ssd_on:	
  1065                           ; 1 bytes @ 0x0
  1066                           
  1067  0020                     ??_normal_mode_display:	
  1068                           ; 1 bytes @ 0x0
  1069                           
  1070  0020                     ??_adjust_hours_mode_display:	
  1071                           ; 1 bytes @ 0x0
  1072                           
  1073  0020                     ??_adjust_minutes_mode_display:	
  1074                           ; 1 bytes @ 0x0
  1075                           
  1076                           
  1077                           ; 1 bytes @ 0x0
  1078  0020                     	ds	3
  1079  0023                     ??_display_update:	
  1080                           
  1081                           ; 1 bytes @ 0x3
  1082  0023                     	ds	9
  1083  002C                     ??_APP_UPDATE:	
  1084                           
  1085                           ; 1 bytes @ 0xC
  1086  002C                     	ds	3
  1087  002F                     ??_switches_Schematic_init:	
  1088  002F                     ??_time_init:	
  1089                           ; 1 bytes @ 0xF
  1090                           
  1091  002F                     ??_timer0_reload:	
  1092                           ; 1 bytes @ 0xF
  1093                           
  1094  002F                     ??_T0_timer_mode_state:	
  1095                           ; 1 bytes @ 0xF
  1096                           
  1097  002F                     ??_ssd_schematic_init:	
  1098                           ; 1 bytes @ 0xF
  1099                           
  1100  002F                     ??_dot_display:	
  1101                           ; 1 bytes @ 0xF
  1102                           
  1103  002F                     ??_timer0_set_prescaller:	
  1104                           ; 1 bytes @ 0xF
  1105                           
  1106  002F                     ??_timer0_set_mode:	
  1107                           ; 1 bytes @ 0xF
  1108                           
  1109  002F                     ??_timer0_ovf_setState:	
  1110                           ; 1 bytes @ 0xF
  1111                           
  1112  002F                     ??_T0_counter_mode_state:	
  1113                           ; 1 bytes @ 0xF
  1114                           
  1115  002F                     ??_ssdDot_setState:	
  1116                           ; 1 bytes @ 0xF
  1117                           
  1118  002F                     ??_get_time:	
  1119                           ; 1 bytes @ 0xF
  1120                           
  1121  002F                     ?___bmul:	
  1122                           ; 1 bytes @ 0xF
  1123                           
  1124  002F                     ?___awdiv:	
  1125                           ; 1 bytes @ 0xF
  1126                           
  1127  002F                     ?___awmod:	
  1128                           ; 2 bytes @ 0xF
  1129                           
  1130  002F                     ___bmul@multiplicand:	
  1131                           ; 2 bytes @ 0xF
  1132                           
  1133  002F                     ___awdiv@divisor:	
  1134                           ; 1 bytes @ 0xF
  1135                           
  1136  002F                     ___awmod@divisor:	
  1137                           ; 2 bytes @ 0xF
  1138                           
  1139                           
  1140                           ; 2 bytes @ 0xF
  1141  002F                     	ds	1
  1142  0030                     ??_switch_init:	
  1143  0030                     ??___bmul:	
  1144                           ; 1 bytes @ 0x10
  1145                           
  1146  0030                     ssdDot_setState@state:	
  1147                           ; 1 bytes @ 0x10
  1148                           
  1149  0030                     get_time@time:	
  1150                           ; 1 bytes @ 0x10
  1151                           
  1152  0030                     timer0_reload@val:	
  1153                           ; 1 bytes @ 0x10
  1154                           
  1155                           
  1156                           ; 1 bytes @ 0x10
  1157  0030                     	ds	1
  1158  0031                     dot_display@state:	
  1159  0031                     T0_timer_mode_state@s:	
  1160                           ; 1 bytes @ 0x11
  1161                           
  1162  0031                     T0_counter_mode_state@s:	
  1163                           ; 1 bytes @ 0x11
  1164                           
  1165  0031                     timer0_set_prescaller@p:	
  1166                           ; 1 bytes @ 0x11
  1167                           
  1168  0031                     timer0_set_mode@m:	
  1169                           ; 1 bytes @ 0x11
  1170                           
  1171  0031                     timer0_ovf_setState@o:	
  1172                           ; 1 bytes @ 0x11
  1173                           
  1174  0031                     ___bmul@product:	
  1175                           ; 1 bytes @ 0x11
  1176                           
  1177  0031                     ___awdiv@dividend:	
  1178                           ; 1 bytes @ 0x11
  1179                           
  1180  0031                     ___awmod@dividend:	
  1181                           ; 2 bytes @ 0x11
  1182                           
  1183                           
  1184                           ; 2 bytes @ 0x11
  1185  0031                     	ds	1
  1186  0032                     ?_timer0_init:	
  1187  0032                     timer0_init@m:	
  1188                           ; 1 bytes @ 0x12
  1189                           
  1190  0032                     ___bmul@multiplier:	
  1191                           ; 1 bytes @ 0x12
  1192                           
  1193                           
  1194                           ; 1 bytes @ 0x12
  1195  0032                     	ds	1
  1196  0033                     ?_ssd_display:	
  1197  0033                     ??___awdiv:	
  1198                           ; 1 bytes @ 0x13
  1199                           
  1200  0033                     ??___awmod:	
  1201                           ; 1 bytes @ 0x13
  1202                           
  1203  0033                     ssd_display@symbol:	
  1204                           ; 1 bytes @ 0x13
  1205                           
  1206  0033                     timer0_init@o:	
  1207                           ; 1 bytes @ 0x13
  1208                           
  1209                           
  1210                           ; 1 bytes @ 0x13
  1211  0033                     	ds	1
  1212  0034                     ??_timer0_init:	
  1213  0034                     ??_ssd_display:	
  1214                           ; 1 bytes @ 0x14
  1215                           
  1216  0034                     ___awdiv@counter:	
  1217                           ; 1 bytes @ 0x14
  1218                           
  1219  0034                     ___awmod@counter:	
  1220                           ; 1 bytes @ 0x14
  1221                           
  1222                           
  1223                           ; 1 bytes @ 0x14
  1224  0034                     	ds	1
  1225  0035                     ___awdiv@sign:	
  1226  0035                     ___awmod@sign:	
  1227                           ; 1 bytes @ 0x15
  1228                           
  1229                           
  1230                           ; 1 bytes @ 0x15
  1231  0035                     	ds	1
  1232  0036                     timer0_init@p:	
  1233  0036                     ___awdiv@quotient:	
  1234                           ; 1 bytes @ 0x16
  1235                           
  1236                           
  1237                           ; 2 bytes @ 0x16
  1238  0036                     	ds	2
  1239  0038                     ?_ssd_setSymbol:	
  1240  0038                     ssd_setSymbol@symbol:	
  1241                           ; 1 bytes @ 0x18
  1242                           
  1243  0038                     ssd_display@ssd:	
  1244                           ; 1 bytes @ 0x18
  1245                           
  1246                           
  1247                           ; 1 bytes @ 0x18
  1248  0038                     	ds	1
  1249  0039                     ??_ssd_init:	
  1250  0039                     ??_ssd_setSymbol:	
  1251                           ; 1 bytes @ 0x19
  1252                           
  1253                           
  1254                           ; 1 bytes @ 0x19
  1255  0039                     	ds	2
  1256  003B                     ssd_setSymbol@ssd:	
  1257                           
  1258                           ; 1 bytes @ 0x1B
  1259  003B                     	ds	1
  1260  003C                     switch_init@index:	
  1261                           
  1262                           ; 1 bytes @ 0x1C
  1263  003C                     	ds	1
  1264  003D                     switch_init@sw:	
  1265                           
  1266                           ; 1 bytes @ 0x1D
  1267  003D                     	ds	10
  1268  0047                     ssd_init@ssd:	
  1269                           
  1270                           ; 1 bytes @ 0x27
  1271  0047                     	ds	1
  1272  0048                     ??_display_init:	
  1273                           
  1274                           ; 1 bytes @ 0x28
  1275  0048                     	ds	3
  1276  004B                     ??_main:	
  1277                           
  1278                           	psect	maintext
  1279  0D1F                     __pmaintext:	
  1280                           ; 1 bytes @ 0x2B
  1281 ;;
  1282 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
  1283 ;;
  1284 ;; *************** function _main *****************
  1285 ;; Defined at:
  1286 ;;		line 16 in file "my_stop_watch.c"
  1287 ;; Parameters:    Size  Location     Type
  1288 ;;		None
  1289 ;; Auto vars:     Size  Location     Type
  1290 ;;		None
  1291 ;; Return value:  Size  Location     Type
  1292 ;;                  1    wreg      void 
  1293 ;; Registers used:
  1294 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  1295 ;; Tracked objects:
  1296 ;;		On entry : B00/0
  1297 ;;		On exit  : 0/0
  1298 ;;		Unchanged: 0/0
  1299 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1300 ;;      Params:         0       0       0       0       0
  1301 ;;      Locals:         0       0       0       0       0
  1302 ;;      Temps:          0       0       0       0       0
  1303 ;;      Totals:         0       0       0       0       0
  1304 ;;Total ram usage:        0 bytes
  1305 ;; Hardware stack levels required when called:    9
  1306 ;; This function calls:
  1307 ;;		_T0_timer_mode_state
  1308 ;;		_display_init
  1309 ;;		_switch_init
  1310 ;;		_time_init
  1311 ;;		_timer0_init
  1312 ;;		_timer0_reload
  1313 ;; This function is called by:
  1314 ;;		Startup code after reset
  1315 ;; This function uses a non-reentrant model
  1316 ;;
  1317                           
  1318                           
  1319                           ;psect for function _main
  1320  0D1F                     _main:	
  1321                           
  1322                           ;my_stop_watch.c: 19:     time_init();
  1323                           
  1324                           ;incstack = 0
  1325 ;; hardware stack exceeded
  1326                           ; Regs used in _main: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  1327  0D1F  120A  158A  2260  120A  158A  	fcall	_time_init
  1328                           
  1329                           ;my_stop_watch.c: 20:     display_init();
  1330  0D24  120A  118A  24A0  120A  158A  	fcall	_display_init
  1331                           
  1332                           ;my_stop_watch.c: 21:     switch_init(sw_plus);
  1333  0D29  3000               	movlw	0
  1334  0D2A  120A  118A  25D1  120A  158A  	fcall	_switch_init
  1335                           
  1336                           ;my_stop_watch.c: 22:     switch_init(sw_minus);
  1337  0D2F  3001               	movlw	1
  1338  0D30  120A  118A  25D1  120A  158A  	fcall	_switch_init
  1339                           
  1340                           ;my_stop_watch.c: 23:     switch_init(sw_setting);
  1341  0D35  3002               	movlw	2
  1342  0D36  120A  118A  25D1  120A  158A  	fcall	_switch_init
  1343                           
  1344                           ;my_stop_watch.c: 24:     timer0_init(T0_PRESCALLER_256,T0_TIMER_MODE,T0_OVF_ENABLE);
  1345  0D3B  1283               	bcf	3,5	;RP0=0, select bank0
  1346  0D3C  1303               	bcf	3,6	;RP1=0, select bank0
  1347  0D3D  01B2               	clrf	timer0_init@m
  1348  0D3E  01B3               	clrf	timer0_init@o
  1349  0D3F  3007               	movlw	7
  1350  0D40  120A  158A  25CD  120A  158A  	fcall	_timer0_init
  1351                           
  1352                           ;my_stop_watch.c: 25:     timer0_reload(216);
  1353  0D45  30D8               	movlw	216
  1354  0D46  120A  158A  227F  120A  158A  	fcall	_timer0_reload
  1355                           
  1356                           ;my_stop_watch.c: 26:     T0_timer_mode_state(T0_ON);
  1357  0D4B  3000               	movlw	0
  1358  0D4C  120A  158A  23AF  120A  158A  	fcall	_T0_timer_mode_state
  1359  0D51                     l62:	
  1360                           ;my_stop_watch.c: 28:     while(1){
  1361                           
  1362                           
  1363                           ;my_stop_watch.c: 36:     }
  1364  0D51  2D51               	goto	l62
  1365  0D52                     __end_of_main:	
  1366                           
  1367                           	psect	text1
  1368  0DCD                     __ptext1:	
  1369 ;; *************** function _timer0_init *****************
  1370 ;; Defined at:
  1371 ;;		line 8 in file "TIMER0.c"
  1372 ;; Parameters:    Size  Location     Type
  1373 ;;  p               1    wreg     enum E866
  1374 ;;  m               1   18[BANK0 ] enum E876
  1375 ;;  o               1   19[BANK0 ] enum E884
  1376 ;; Auto vars:     Size  Location     Type
  1377 ;;  p               1   22[BANK0 ] enum E866
  1378 ;; Return value:  Size  Location     Type
  1379 ;;                  1    wreg      void 
  1380 ;; Registers used:
  1381 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  1382 ;; Tracked objects:
  1383 ;;		On entry : 0/0
  1384 ;;		On exit  : 0/0
  1385 ;;		Unchanged: 0/0
  1386 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1387 ;;      Params:         0       2       0       0       0
  1388 ;;      Locals:         0       1       0       0       0
  1389 ;;      Temps:          0       2       0       0       0
  1390 ;;      Totals:         0       5       0       0       0
  1391 ;;Total ram usage:        5 bytes
  1392 ;; Hardware stack levels used:    1
  1393 ;; Hardware stack levels required when called:    6
  1394 ;; This function calls:
  1395 ;;		_T0_counter_mode_state
  1396 ;;		_T0_timer_mode_state
  1397 ;;		_timer0_ovf_setState
  1398 ;;		_timer0_reload
  1399 ;;		_timer0_set_mode
  1400 ;;		_timer0_set_prescaller
  1401 ;; This function is called by:
  1402 ;;		_main
  1403 ;; This function uses a non-reentrant model
  1404 ;;
  1405                           
  1406                           
  1407                           ;psect for function _timer0_init
  1408  0DCD                     _timer0_init:	
  1409                           
  1410                           ;incstack = 0
  1411                           ; Regs used in _timer0_init: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  1412                           ;timer0_init@p stored from wreg
  1413  0DCD  1283               	bcf	3,5	;RP0=0, select bank0
  1414  0DCE  1303               	bcf	3,6	;RP1=0, select bank0
  1415  0DCF  00B6               	movwf	timer0_init@p
  1416                           
  1417                           ;TIMER0.c: 9:     timer0_set_prescaller(p);
  1418  0DD0  0836               	movf	timer0_init@p,w
  1419  0DD1  120A  158A  27A1  120A  158A  	fcall	_timer0_set_prescaller
  1420                           
  1421                           ;TIMER0.c: 11:     timer0_set_mode(m);
  1422  0DD6  1283               	bcf	3,5	;RP0=0, select bank0
  1423  0DD7  1303               	bcf	3,6	;RP1=0, select bank0
  1424  0DD8  0832               	movf	timer0_init@m,w
  1425  0DD9  120A  158A  23CC  120A  158A  	fcall	_timer0_set_mode
  1426                           
  1427                           ;TIMER0.c: 13:     timer0_ovf_setState(o);
  1428  0DDE  1283               	bcf	3,5	;RP0=0, select bank0
  1429  0DDF  1303               	bcf	3,6	;RP1=0, select bank0
  1430  0DE0  0833               	movf	timer0_init@o,w
  1431  0DE1  120A  158A  235C  120A  158A  	fcall	_timer0_ovf_setState
  1432                           
  1433                           ;TIMER0.c: 15:     switch(m){
  1434  0DE6  2DF5               	goto	l2451
  1435  0DE7                     l2445:	
  1436                           
  1437                           ;TIMER0.c: 17:             T0_timer_mode_state(T0_OFF);
  1438  0DE7  3001               	movlw	1
  1439  0DE8  120A  158A  23AF  120A  158A  	fcall	_T0_timer_mode_state
  1440                           
  1441                           ;TIMER0.c: 18:             break;
  1442  0DED  2E07               	goto	l2453
  1443  0DEE                     l2447:	
  1444                           
  1445                           ;TIMER0.c: 20:             T0_counter_mode_state(T0_OFF);
  1446  0DEE  3001               	movlw	1
  1447  0DEF  120A  158A  2392  120A  158A  	fcall	_T0_counter_mode_state
  1448                           
  1449                           ;TIMER0.c: 21:             break;
  1450  0DF4  2E07               	goto	l2453
  1451  0DF5                     l2451:	
  1452  0DF5  1283               	bcf	3,5	;RP0=0, select bank0
  1453  0DF6  1303               	bcf	3,6	;RP1=0, select bank0
  1454  0DF7  0832               	movf	timer0_init@m,w
  1455  0DF8  00B4               	movwf	??_timer0_init
  1456  0DF9  01B5               	clrf	??_timer0_init+1
  1457                           
  1458                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  1459                           ; Switch size 1, requested type "simple"
  1460                           ; Number of cases is 1, Range of values is 0 to 0
  1461                           ; switch strategies available:
  1462                           ; Name         Instructions Cycles
  1463                           ; simple_byte            4     3 (average)
  1464                           ; direct_byte           11     8 (fixed)
  1465                           ; jumptable            260     6 (fixed)
  1466                           ;	Chosen strategy is simple_byte
  1467  0DFA  0835               	movf	??_timer0_init+1,w
  1468  0DFB  3A00               	xorlw	0	; case 0
  1469  0DFC  1903               	skipnz
  1470  0DFD  2DFF               	goto	l3165
  1471  0DFE  2E07               	goto	l2453
  1472  0DFF                     l3165:	
  1473                           
  1474                           ; Switch size 1, requested type "simple"
  1475                           ; Number of cases is 2, Range of values is 0 to 1
  1476                           ; switch strategies available:
  1477                           ; Name         Instructions Cycles
  1478                           ; simple_byte            7     4 (average)
  1479                           ; direct_byte           14     8 (fixed)
  1480                           ; jumptable            260     6 (fixed)
  1481                           ;	Chosen strategy is simple_byte
  1482  0DFF  0834               	movf	??_timer0_init,w
  1483  0E00  3A00               	xorlw	0	; case 0
  1484  0E01  1903               	skipnz
  1485  0E02  2DE7               	goto	l2445
  1486  0E03  3A01               	xorlw	1	; case 1
  1487  0E04  1903               	skipnz
  1488  0E05  2DEE               	goto	l2447
  1489  0E06  2E07               	goto	l2453
  1490  0E07                     l2453:	
  1491                           
  1492                           ;TIMER0.c: 27:     timer0_reload((0xFF));
  1493  0E07  30FF               	movlw	255
  1494  0E08  120A  158A  227F   	fcall	_timer0_reload
  1495  0E0B  0008               	return
  1496  0E0C                     __end_of_timer0_init:	
  1497                           
  1498                           	psect	text2
  1499  0FA1                     __ptext2:	
  1500 ;; *************** function _timer0_set_prescaller *****************
  1501 ;; Defined at:
  1502 ;;		line 70 in file "TIMER0.c"
  1503 ;; Parameters:    Size  Location     Type
  1504 ;;  p               1    wreg     enum E866
  1505 ;; Auto vars:     Size  Location     Type
  1506 ;;  p               1   17[BANK0 ] enum E866
  1507 ;; Return value:  Size  Location     Type
  1508 ;;                  1    wreg      void 
  1509 ;; Registers used:
  1510 ;;		wreg, fsr0l, fsr0h, status,2, status,0
  1511 ;; Tracked objects:
  1512 ;;		On entry : 0/0
  1513 ;;		On exit  : 0/0
  1514 ;;		Unchanged: 0/0
  1515 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1516 ;;      Params:         0       0       0       0       0
  1517 ;;      Locals:         0       1       0       0       0
  1518 ;;      Temps:          0       2       0       0       0
  1519 ;;      Totals:         0       3       0       0       0
  1520 ;;Total ram usage:        3 bytes
  1521 ;; Hardware stack levels used:    1
  1522 ;; Hardware stack levels required when called:    5
  1523 ;; This function calls:
  1524 ;;		Nothing
  1525 ;; This function is called by:
  1526 ;;		_timer0_init
  1527 ;; This function uses a non-reentrant model
  1528 ;;
  1529                           
  1530                           
  1531                           ;psect for function _timer0_set_prescaller
  1532  0FA1                     _timer0_set_prescaller:	
  1533                           
  1534                           ;incstack = 0
  1535                           ; Regs used in _timer0_set_prescaller: [wreg-fsr0h+status,2+status,0]
  1536                           ;timer0_set_prescaller@p stored from wreg
  1537  0FA1  1283               	bcf	3,5	;RP0=0, select bank0
  1538  0FA2  1303               	bcf	3,6	;RP1=0, select bank0
  1539  0FA3  00B1               	movwf	timer0_set_prescaller@p
  1540                           
  1541                           ;TIMER0.c: 72:     switch(p){
  1542  0FA4  2FDD               	goto	l2225
  1543  0FA5                     l337:	
  1544                           ;TIMER0.c: 73:         case T0_PRESCALLER_2:
  1545                           
  1546                           
  1547                           ;TIMER0.c: 74:             ((*((volatile tRegister *)(0x81))).Bits.BIT3) = (0); ((*((vol
      +                          atile tRegister *)(0x81))).Bits.BIT0) = 0; ((*((volatile tRegister *)(0x81))).Bits.BIT1)
      +                           = 0; ((*((volatile tRegister *)(0x81))).Bits.BIT2) = 0;
  1548  0FA5  1683               	bsf	3,5	;RP0=1, select bank1
  1549  0FA6  1303               	bcf	3,6	;RP1=0, select bank1
  1550  0FA7  1181               	bcf	1,3	;volatile
  1551  0FA8  1001               	bcf	1,0	;volatile
  1552  0FA9  1081               	bcf	1,1	;volatile
  1553  0FAA  1101               	bcf	1,2	;volatile
  1554                           
  1555                           ;TIMER0.c: 75:             break;
  1556  0FAB  0008               	return
  1557  0FAC                     l339:	
  1558                           ;TIMER0.c: 76:         case T0_PRESCALLER_4:
  1559                           
  1560                           
  1561                           ;TIMER0.c: 77:             ((*((volatile tRegister *)(0x81))).Bits.BIT3) = (0); ((*((vol
      +                          atile tRegister *)(0x81))).Bits.BIT0) = 1; ((*((volatile tRegister *)(0x81))).Bits.BIT1)
      +                           = 0; ((*((volatile tRegister *)(0x81))).Bits.BIT2) = 0;
  1562  0FAC  1683               	bsf	3,5	;RP0=1, select bank1
  1563  0FAD  1303               	bcf	3,6	;RP1=0, select bank1
  1564  0FAE  1181               	bcf	1,3	;volatile
  1565  0FAF  1401               	bsf	1,0	;volatile
  1566  0FB0  1081               	bcf	1,1	;volatile
  1567  0FB1  1101               	bcf	1,2	;volatile
  1568                           
  1569                           ;TIMER0.c: 78:             break;
  1570  0FB2  0008               	return
  1571  0FB3                     l340:	
  1572                           ;TIMER0.c: 79:         case T0_PRESCALLER_8:
  1573                           
  1574                           
  1575                           ;TIMER0.c: 80:             ((*((volatile tRegister *)(0x81))).Bits.BIT3) = (0); ((*((vol
      +                          atile tRegister *)(0x81))).Bits.BIT0) = 0; ((*((volatile tRegister *)(0x81))).Bits.BIT1)
      +                           = 1; ((*((volatile tRegister *)(0x81))).Bits.BIT2) = 0;
  1576  0FB3  1683               	bsf	3,5	;RP0=1, select bank1
  1577  0FB4  1303               	bcf	3,6	;RP1=0, select bank1
  1578  0FB5  1181               	bcf	1,3	;volatile
  1579  0FB6  1001               	bcf	1,0	;volatile
  1580  0FB7  1481               	bsf	1,1	;volatile
  1581  0FB8  1101               	bcf	1,2	;volatile
  1582                           
  1583                           ;TIMER0.c: 81:             break;
  1584  0FB9  0008               	return
  1585  0FBA                     l341:	
  1586                           ;TIMER0.c: 82:         case T0_PRESCALLER_16:
  1587                           
  1588                           
  1589                           ;TIMER0.c: 83:             ((*((volatile tRegister *)(0x81))).Bits.BIT3) = (0); ((*((vol
      +                          atile tRegister *)(0x81))).Bits.BIT0) = 1; ((*((volatile tRegister *)(0x81))).Bits.BIT1)
      +                           = 1; ((*((volatile tRegister *)(0x81))).Bits.BIT2) = 0;
  1590  0FBA  1683               	bsf	3,5	;RP0=1, select bank1
  1591  0FBB  1303               	bcf	3,6	;RP1=0, select bank1
  1592  0FBC  1181               	bcf	1,3	;volatile
  1593  0FBD  1401               	bsf	1,0	;volatile
  1594  0FBE  1481               	bsf	1,1	;volatile
  1595  0FBF  1101               	bcf	1,2	;volatile
  1596                           
  1597                           ;TIMER0.c: 84:             break;
  1598  0FC0  0008               	return
  1599  0FC1                     l342:	
  1600                           ;TIMER0.c: 85:         case T0_PRESCALLER_32:
  1601                           
  1602                           
  1603                           ;TIMER0.c: 86:             ((*((volatile tRegister *)(0x81))).Bits.BIT3) = (0); ((*((vol
      +                          atile tRegister *)(0x81))).Bits.BIT0) = 0; ((*((volatile tRegister *)(0x81))).Bits.BIT1)
      +                           = 0; ((*((volatile tRegister *)(0x81))).Bits.BIT2) = 1;
  1604  0FC1  1683               	bsf	3,5	;RP0=1, select bank1
  1605  0FC2  1303               	bcf	3,6	;RP1=0, select bank1
  1606  0FC3  1181               	bcf	1,3	;volatile
  1607  0FC4  1001               	bcf	1,0	;volatile
  1608  0FC5  1081               	bcf	1,1	;volatile
  1609  0FC6  1501               	bsf	1,2	;volatile
  1610                           
  1611                           ;TIMER0.c: 87:             break;
  1612  0FC7  0008               	return
  1613  0FC8                     l343:	
  1614                           ;TIMER0.c: 88:         case T0_PRESCALLER_64:
  1615                           
  1616                           
  1617                           ;TIMER0.c: 89:             ((*((volatile tRegister *)(0x81))).Bits.BIT3) = (0); ((*((vol
      +                          atile tRegister *)(0x81))).Bits.BIT0) = 1; ((*((volatile tRegister *)(0x81))).Bits.BIT1)
      +                           = 0; ((*((volatile tRegister *)(0x81))).Bits.BIT2) = 1;
  1618  0FC8  1683               	bsf	3,5	;RP0=1, select bank1
  1619  0FC9  1303               	bcf	3,6	;RP1=0, select bank1
  1620  0FCA  1181               	bcf	1,3	;volatile
  1621  0FCB  1401               	bsf	1,0	;volatile
  1622  0FCC  1081               	bcf	1,1	;volatile
  1623  0FCD  1501               	bsf	1,2	;volatile
  1624                           
  1625                           ;TIMER0.c: 90:             break;
  1626  0FCE  0008               	return
  1627  0FCF                     l344:	
  1628                           ;TIMER0.c: 91:         case T0_PRESCALLER_128:
  1629                           
  1630                           
  1631                           ;TIMER0.c: 92:             ((*((volatile tRegister *)(0x81))).Bits.BIT3) = (0); ((*((vol
      +                          atile tRegister *)(0x81))).Bits.BIT0) = 0; ((*((volatile tRegister *)(0x81))).Bits.BIT1)
      +                           = 1; ((*((volatile tRegister *)(0x81))).Bits.BIT2) = 1;
  1632  0FCF  1683               	bsf	3,5	;RP0=1, select bank1
  1633  0FD0  1303               	bcf	3,6	;RP1=0, select bank1
  1634  0FD1  1181               	bcf	1,3	;volatile
  1635  0FD2  1001               	bcf	1,0	;volatile
  1636  0FD3  1481               	bsf	1,1	;volatile
  1637  0FD4  1501               	bsf	1,2	;volatile
  1638                           
  1639                           ;TIMER0.c: 93:             break;
  1640  0FD5  0008               	return
  1641  0FD6                     l345:	
  1642                           ;TIMER0.c: 94:         case T0_PRESCALLER_256:
  1643                           
  1644                           
  1645                           ;TIMER0.c: 95:             ((*((volatile tRegister *)(0x81))).Bits.BIT3) = (0); ((*((vol
      +                          atile tRegister *)(0x81))).Bits.BIT0) = 1; ((*((volatile tRegister *)(0x81))).Bits.BIT1)
      +                           = 1; ((*((volatile tRegister *)(0x81))).Bits.BIT2) = 1;
  1646  0FD6  1683               	bsf	3,5	;RP0=1, select bank1
  1647  0FD7  1303               	bcf	3,6	;RP1=0, select bank1
  1648  0FD8  1181               	bcf	1,3	;volatile
  1649  0FD9  1401               	bsf	1,0	;volatile
  1650  0FDA  1481               	bsf	1,1	;volatile
  1651  0FDB  1501               	bsf	1,2	;volatile
  1652                           
  1653                           ;TIMER0.c: 96:             break;
  1654  0FDC  0008               	return
  1655  0FDD                     l2225:	
  1656  0FDD  0831               	movf	timer0_set_prescaller@p,w
  1657  0FDE  00AF               	movwf	??_timer0_set_prescaller
  1658  0FDF  01B0               	clrf	??_timer0_set_prescaller+1
  1659                           
  1660                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  1661                           ; Switch size 1, requested type "simple"
  1662                           ; Number of cases is 1, Range of values is 0 to 0
  1663                           ; switch strategies available:
  1664                           ; Name         Instructions Cycles
  1665                           ; simple_byte            4     3 (average)
  1666                           ; direct_byte           11     8 (fixed)
  1667                           ; jumptable            260     6 (fixed)
  1668                           ;	Chosen strategy is simple_byte
  1669  0FE0  0830               	movf	??_timer0_set_prescaller+1,w
  1670  0FE1  3A00               	xorlw	0	; case 0
  1671  0FE2  1903               	skipnz
  1672  0FE3  2FE5               	goto	l3167
  1673  0FE4  2FFF               	goto	l347
  1674  0FE5                     l3167:	
  1675                           
  1676                           ; Switch size 1, requested type "simple"
  1677                           ; Number of cases is 8, Range of values is 0 to 7
  1678                           ; switch strategies available:
  1679                           ; Name         Instructions Cycles
  1680                           ; simple_byte           25    13 (average)
  1681                           ; direct_byte           32     8 (fixed)
  1682                           ; jumptable            260     6 (fixed)
  1683                           ;	Chosen strategy is simple_byte
  1684  0FE5  082F               	movf	??_timer0_set_prescaller,w
  1685  0FE6  3A00               	xorlw	0	; case 0
  1686  0FE7  1903               	skipnz
  1687  0FE8  2FA5               	goto	l337
  1688  0FE9  3A01               	xorlw	1	; case 1
  1689  0FEA  1903               	skipnz
  1690  0FEB  2FAC               	goto	l339
  1691  0FEC  3A03               	xorlw	3	; case 2
  1692  0FED  1903               	skipnz
  1693  0FEE  2FB3               	goto	l340
  1694  0FEF  3A01               	xorlw	1	; case 3
  1695  0FF0  1903               	skipnz
  1696  0FF1  2FBA               	goto	l341
  1697  0FF2  3A07               	xorlw	7	; case 4
  1698  0FF3  1903               	skipnz
  1699  0FF4  2FC1               	goto	l342
  1700  0FF5  3A01               	xorlw	1	; case 5
  1701  0FF6  1903               	skipnz
  1702  0FF7  2FC8               	goto	l343
  1703  0FF8  3A03               	xorlw	3	; case 6
  1704  0FF9  1903               	skipnz
  1705  0FFA  2FCF               	goto	l344
  1706  0FFB  3A01               	xorlw	1	; case 7
  1707  0FFC  1903               	skipnz
  1708  0FFD  2FD6               	goto	l345
  1709  0FFE  2FFF               	goto	l347
  1710  0FFF                     l347:	
  1711  0FFF  0008               	return
  1712  1000                     __end_of_timer0_set_prescaller:	
  1713                           
  1714                           	psect	text3
  1715  0BCC                     __ptext3:	
  1716 ;; *************** function _timer0_set_mode *****************
  1717 ;; Defined at:
  1718 ;;		line 103 in file "TIMER0.c"
  1719 ;; Parameters:    Size  Location     Type
  1720 ;;  m               1    wreg     enum E876
  1721 ;; Auto vars:     Size  Location     Type
  1722 ;;  m               1   17[BANK0 ] enum E876
  1723 ;; Return value:  Size  Location     Type
  1724 ;;                  1    wreg      void 
  1725 ;; Registers used:
  1726 ;;		wreg, fsr0l, fsr0h, status,2, status,0
  1727 ;; Tracked objects:
  1728 ;;		On entry : 0/0
  1729 ;;		On exit  : 0/0
  1730 ;;		Unchanged: 0/0
  1731 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1732 ;;      Params:         0       0       0       0       0
  1733 ;;      Locals:         0       1       0       0       0
  1734 ;;      Temps:          0       2       0       0       0
  1735 ;;      Totals:         0       3       0       0       0
  1736 ;;Total ram usage:        3 bytes
  1737 ;; Hardware stack levels used:    1
  1738 ;; Hardware stack levels required when called:    5
  1739 ;; This function calls:
  1740 ;;		Nothing
  1741 ;; This function is called by:
  1742 ;;		_timer0_init
  1743 ;; This function uses a non-reentrant model
  1744 ;;
  1745                           
  1746                           
  1747                           ;psect for function _timer0_set_mode
  1748  0BCC                     _timer0_set_mode:	
  1749                           
  1750                           ;incstack = 0
  1751                           ; Regs used in _timer0_set_mode: [wreg-fsr0h+status,2+status,0]
  1752                           ;timer0_set_mode@m stored from wreg
  1753  0BCC  1283               	bcf	3,5	;RP0=0, select bank0
  1754  0BCD  1303               	bcf	3,6	;RP1=0, select bank0
  1755  0BCE  00B1               	movwf	timer0_set_mode@m
  1756                           
  1757                           ;TIMER0.c: 105:     switch(m){
  1758  0BCF  2BD8               	goto	l2237
  1759  0BD0                     l351:	
  1760                           ;TIMER0.c: 106:         case T0_TIMER_MODE:
  1761                           
  1762                           
  1763                           ;TIMER0.c: 107:             (((*((volatile tRegister *)(0x81))).Bits.BIT5) = 0);
  1764  0BD0  1683               	bsf	3,5	;RP0=1, select bank1
  1765  0BD1  1303               	bcf	3,6	;RP1=0, select bank1
  1766  0BD2  1281               	bcf	1,5	;volatile
  1767                           
  1768                           ;TIMER0.c: 108:             break;
  1769  0BD3  0008               	return
  1770  0BD4                     l353:	
  1771                           ;TIMER0.c: 109:         case T0_COUNTER_MODE :
  1772                           
  1773                           
  1774                           ;TIMER0.c: 110:             (((*((volatile tRegister *)(0x81))).Bits.BIT5) = 1);
  1775  0BD4  1683               	bsf	3,5	;RP0=1, select bank1
  1776  0BD5  1303               	bcf	3,6	;RP1=0, select bank1
  1777  0BD6  1681               	bsf	1,5	;volatile
  1778                           
  1779                           ;TIMER0.c: 111:             break;
  1780  0BD7  0008               	return
  1781  0BD8                     l2237:	
  1782  0BD8  0831               	movf	timer0_set_mode@m,w
  1783  0BD9  00AF               	movwf	??_timer0_set_mode
  1784  0BDA  01B0               	clrf	??_timer0_set_mode+1
  1785                           
  1786                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  1787                           ; Switch size 1, requested type "simple"
  1788                           ; Number of cases is 1, Range of values is 0 to 0
  1789                           ; switch strategies available:
  1790                           ; Name         Instructions Cycles
  1791                           ; simple_byte            4     3 (average)
  1792                           ; direct_byte           11     8 (fixed)
  1793                           ; jumptable            260     6 (fixed)
  1794                           ;	Chosen strategy is simple_byte
  1795  0BDB  0830               	movf	??_timer0_set_mode+1,w
  1796  0BDC  3A00               	xorlw	0	; case 0
  1797  0BDD  1903               	skipnz
  1798  0BDE  2BE0               	goto	l3169
  1799  0BDF  2BE8               	goto	l355
  1800  0BE0                     l3169:	
  1801                           
  1802                           ; Switch size 1, requested type "simple"
  1803                           ; Number of cases is 2, Range of values is 0 to 1
  1804                           ; switch strategies available:
  1805                           ; Name         Instructions Cycles
  1806                           ; simple_byte            7     4 (average)
  1807                           ; direct_byte           14     8 (fixed)
  1808                           ; jumptable            260     6 (fixed)
  1809                           ;	Chosen strategy is simple_byte
  1810  0BE0  082F               	movf	??_timer0_set_mode,w
  1811  0BE1  3A00               	xorlw	0	; case 0
  1812  0BE2  1903               	skipnz
  1813  0BE3  2BD0               	goto	l351
  1814  0BE4  3A01               	xorlw	1	; case 1
  1815  0BE5  1903               	skipnz
  1816  0BE6  2BD4               	goto	l353
  1817  0BE7  2BE8               	goto	l355
  1818  0BE8                     l355:	
  1819  0BE8  0008               	return
  1820  0BE9                     __end_of_timer0_set_mode:	
  1821                           
  1822                           	psect	text4
  1823  0A7F                     __ptext4:	
  1824 ;; *************** function _timer0_reload *****************
  1825 ;; Defined at:
  1826 ;;		line 31 in file "TIMER0.c"
  1827 ;; Parameters:    Size  Location     Type
  1828 ;;  val             1    wreg     unsigned char 
  1829 ;; Auto vars:     Size  Location     Type
  1830 ;;  val             1   16[BANK0 ] unsigned char 
  1831 ;; Return value:  Size  Location     Type
  1832 ;;                  1    wreg      void 
  1833 ;; Registers used:
  1834 ;;		wreg
  1835 ;; Tracked objects:
  1836 ;;		On entry : 0/0
  1837 ;;		On exit  : 0/0
  1838 ;;		Unchanged: 0/0
  1839 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1840 ;;      Params:         0       0       0       0       0
  1841 ;;      Locals:         0       1       0       0       0
  1842 ;;      Temps:          0       1       0       0       0
  1843 ;;      Totals:         0       2       0       0       0
  1844 ;;Total ram usage:        2 bytes
  1845 ;; Hardware stack levels used:    1
  1846 ;; Hardware stack levels required when called:    5
  1847 ;; This function calls:
  1848 ;;		Nothing
  1849 ;; This function is called by:
  1850 ;;		_main
  1851 ;;		_timer0_init
  1852 ;; This function uses a non-reentrant model
  1853 ;;
  1854                           
  1855                           
  1856                           ;psect for function _timer0_reload
  1857  0A7F                     _timer0_reload:	
  1858                           
  1859                           ;incstack = 0
  1860                           ; Regs used in _timer0_reload: [wreg]
  1861                           ;timer0_reload@val stored from wreg
  1862  0A7F  1283               	bcf	3,5	;RP0=0, select bank0
  1863  0A80  1303               	bcf	3,6	;RP1=0, select bank0
  1864  0A81  00B0               	movwf	timer0_reload@val
  1865                           
  1866                           ;TIMER0.c: 33:     ((*((volatile tRegister *)(0x01))).Reg) = val;
  1867  0A82  0830               	movf	timer0_reload@val,w
  1868  0A83  00AF               	movwf	??_timer0_reload
  1869  0A84  082F               	movf	??_timer0_reload,w
  1870  0A85  0081               	movwf	1	;volatile
  1871  0A86  0008               	return
  1872  0A87                     __end_of_timer0_reload:	
  1873                           
  1874                           	psect	text5
  1875  0B5C                     __ptext5:	
  1876 ;; *************** function _timer0_ovf_setState *****************
  1877 ;; Defined at:
  1878 ;;		line 118 in file "TIMER0.c"
  1879 ;; Parameters:    Size  Location     Type
  1880 ;;  o               1    wreg     enum E884
  1881 ;; Auto vars:     Size  Location     Type
  1882 ;;  o               1   17[BANK0 ] enum E884
  1883 ;; Return value:  Size  Location     Type
  1884 ;;                  1    wreg      void 
  1885 ;; Registers used:
  1886 ;;		wreg, fsr0l, fsr0h, status,2, status,0
  1887 ;; Tracked objects:
  1888 ;;		On entry : 0/0
  1889 ;;		On exit  : 0/0
  1890 ;;		Unchanged: 0/0
  1891 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1892 ;;      Params:         0       0       0       0       0
  1893 ;;      Locals:         0       1       0       0       0
  1894 ;;      Temps:          0       2       0       0       0
  1895 ;;      Totals:         0       3       0       0       0
  1896 ;;Total ram usage:        3 bytes
  1897 ;; Hardware stack levels used:    1
  1898 ;; Hardware stack levels required when called:    5
  1899 ;; This function calls:
  1900 ;;		Nothing
  1901 ;; This function is called by:
  1902 ;;		_timer0_init
  1903 ;; This function uses a non-reentrant model
  1904 ;;
  1905                           
  1906                           
  1907                           ;psect for function _timer0_ovf_setState
  1908  0B5C                     _timer0_ovf_setState:	
  1909                           
  1910                           ;incstack = 0
  1911                           ; Regs used in _timer0_ovf_setState: [wreg-fsr0h+status,2+status,0]
  1912                           ;timer0_ovf_setState@o stored from wreg
  1913  0B5C  1283               	bcf	3,5	;RP0=0, select bank0
  1914  0B5D  1303               	bcf	3,6	;RP1=0, select bank0
  1915  0B5E  00B1               	movwf	timer0_ovf_setState@o
  1916                           
  1917                           ;TIMER0.c: 119:     switch(o){
  1918  0B5F  2B65               	goto	l2249
  1919  0B60                     l359:	
  1920                           ;TIMER0.c: 120:         case T0_OVF_ENABLE :
  1921                           
  1922                           
  1923                           ;TIMER0.c: 121:             ((*((volatile tRegister *)(0x0B))).Bits.BIT7 = 1);
  1924  0B60  178B               	bsf	11,7	;volatile
  1925                           
  1926                           ;TIMER0.c: 122:             (((*((volatile tRegister *)(0x0B))).Bits.BIT5) = 1);
  1927  0B61  168B               	bsf	11,5	;volatile
  1928                           
  1929                           ;TIMER0.c: 123:             break;
  1930  0B62  0008               	return
  1931  0B63                     l361:	
  1932                           ;TIMER0.c: 124:         case T0_OVF_DISABLE :
  1933                           
  1934                           
  1935                           ;TIMER0.c: 125:             (((*((volatile tRegister *)(0x0B))).Bits.BIT5) = 0);
  1936  0B63  128B               	bcf	11,5	;volatile
  1937                           
  1938                           ;TIMER0.c: 126:             break;
  1939  0B64  0008               	return
  1940  0B65                     l2249:	
  1941  0B65  0831               	movf	timer0_ovf_setState@o,w
  1942  0B66  00AF               	movwf	??_timer0_ovf_setState
  1943  0B67  01B0               	clrf	??_timer0_ovf_setState+1
  1944                           
  1945                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  1946                           ; Switch size 1, requested type "simple"
  1947                           ; Number of cases is 1, Range of values is 0 to 0
  1948                           ; switch strategies available:
  1949                           ; Name         Instructions Cycles
  1950                           ; simple_byte            4     3 (average)
  1951                           ; direct_byte           11     8 (fixed)
  1952                           ; jumptable            260     6 (fixed)
  1953                           ;	Chosen strategy is simple_byte
  1954  0B68  0830               	movf	??_timer0_ovf_setState+1,w
  1955  0B69  3A00               	xorlw	0	; case 0
  1956  0B6A  1903               	skipnz
  1957  0B6B  2B6D               	goto	l3171
  1958  0B6C  2B75               	goto	l363
  1959  0B6D                     l3171:	
  1960                           
  1961                           ; Switch size 1, requested type "simple"
  1962                           ; Number of cases is 2, Range of values is 0 to 1
  1963                           ; switch strategies available:
  1964                           ; Name         Instructions Cycles
  1965                           ; simple_byte            7     4 (average)
  1966                           ; direct_byte           14     8 (fixed)
  1967                           ; jumptable            260     6 (fixed)
  1968                           ;	Chosen strategy is simple_byte
  1969  0B6D  082F               	movf	??_timer0_ovf_setState,w
  1970  0B6E  3A00               	xorlw	0	; case 0
  1971  0B6F  1903               	skipnz
  1972  0B70  2B60               	goto	l359
  1973  0B71  3A01               	xorlw	1	; case 1
  1974  0B72  1903               	skipnz
  1975  0B73  2B63               	goto	l361
  1976  0B74  2B75               	goto	l363
  1977  0B75                     l363:	
  1978  0B75  0008               	return
  1979  0B76                     __end_of_timer0_ovf_setState:	
  1980                           
  1981                           	psect	text6
  1982  0BAF                     __ptext6:	
  1983 ;; *************** function _T0_timer_mode_state *****************
  1984 ;; Defined at:
  1985 ;;		line 39 in file "TIMER0.c"
  1986 ;; Parameters:    Size  Location     Type
  1987 ;;  s               1    wreg     enum E880
  1988 ;; Auto vars:     Size  Location     Type
  1989 ;;  s               1   17[BANK0 ] enum E880
  1990 ;; Return value:  Size  Location     Type
  1991 ;;                  1    wreg      void 
  1992 ;; Registers used:
  1993 ;;		wreg, fsr0l, fsr0h, status,2, status,0
  1994 ;; Tracked objects:
  1995 ;;		On entry : 0/0
  1996 ;;		On exit  : 0/0
  1997 ;;		Unchanged: 0/0
  1998 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1999 ;;      Params:         0       0       0       0       0
  2000 ;;      Locals:         0       1       0       0       0
  2001 ;;      Temps:          0       2       0       0       0
  2002 ;;      Totals:         0       3       0       0       0
  2003 ;;Total ram usage:        3 bytes
  2004 ;; Hardware stack levels used:    1
  2005 ;; Hardware stack levels required when called:    5
  2006 ;; This function calls:
  2007 ;;		Nothing
  2008 ;; This function is called by:
  2009 ;;		_main
  2010 ;;		_timer0_init
  2011 ;; This function uses a non-reentrant model
  2012 ;;
  2013                           
  2014                           
  2015                           ;psect for function _T0_timer_mode_state
  2016  0BAF                     _T0_timer_mode_state:	
  2017                           
  2018                           ;incstack = 0
  2019                           ; Regs used in _T0_timer_mode_state: [wreg-fsr0h+status,2+status,0]
  2020                           ;T0_timer_mode_state@s stored from wreg
  2021  0BAF  1283               	bcf	3,5	;RP0=0, select bank0
  2022  0BB0  1303               	bcf	3,6	;RP1=0, select bank0
  2023  0BB1  00B1               	movwf	T0_timer_mode_state@s
  2024                           
  2025                           ;TIMER0.c: 41:     switch(s) {
  2026  0BB2  2BBB               	goto	l2075
  2027  0BB3                     l321:	
  2028                           ;TIMER0.c: 42:         case T0_ON :
  2029                           
  2030                           
  2031                           ;TIMER0.c: 43:             (((*((volatile tRegister *)(0x81))).Bits.BIT5) = 0);
  2032  0BB3  1683               	bsf	3,5	;RP0=1, select bank1
  2033  0BB4  1303               	bcf	3,6	;RP1=0, select bank1
  2034  0BB5  1281               	bcf	1,5	;volatile
  2035                           
  2036                           ;TIMER0.c: 44:             break;
  2037  0BB6  0008               	return
  2038  0BB7                     l323:	
  2039                           ;TIMER0.c: 45:         case T0_OFF :
  2040                           
  2041                           
  2042                           ;TIMER0.c: 46:             (((*((volatile tRegister *)(0x81))).Bits.BIT5) = 1);
  2043  0BB7  1683               	bsf	3,5	;RP0=1, select bank1
  2044  0BB8  1303               	bcf	3,6	;RP1=0, select bank1
  2045  0BB9  1681               	bsf	1,5	;volatile
  2046                           
  2047                           ;TIMER0.c: 47:             break;
  2048  0BBA  0008               	return
  2049  0BBB                     l2075:	
  2050  0BBB  0831               	movf	T0_timer_mode_state@s,w
  2051  0BBC  00AF               	movwf	??_T0_timer_mode_state
  2052  0BBD  01B0               	clrf	??_T0_timer_mode_state+1
  2053                           
  2054                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  2055                           ; Switch size 1, requested type "simple"
  2056                           ; Number of cases is 1, Range of values is 0 to 0
  2057                           ; switch strategies available:
  2058                           ; Name         Instructions Cycles
  2059                           ; simple_byte            4     3 (average)
  2060                           ; direct_byte           11     8 (fixed)
  2061                           ; jumptable            260     6 (fixed)
  2062                           ;	Chosen strategy is simple_byte
  2063  0BBE  0830               	movf	??_T0_timer_mode_state+1,w
  2064  0BBF  3A00               	xorlw	0	; case 0
  2065  0BC0  1903               	skipnz
  2066  0BC1  2BC3               	goto	l3173
  2067  0BC2  2BCB               	goto	l325
  2068  0BC3                     l3173:	
  2069                           
  2070                           ; Switch size 1, requested type "simple"
  2071                           ; Number of cases is 2, Range of values is 0 to 1
  2072                           ; switch strategies available:
  2073                           ; Name         Instructions Cycles
  2074                           ; simple_byte            7     4 (average)
  2075                           ; direct_byte           14     8 (fixed)
  2076                           ; jumptable            260     6 (fixed)
  2077                           ;	Chosen strategy is simple_byte
  2078  0BC3  082F               	movf	??_T0_timer_mode_state,w
  2079  0BC4  3A00               	xorlw	0	; case 0
  2080  0BC5  1903               	skipnz
  2081  0BC6  2BB3               	goto	l321
  2082  0BC7  3A01               	xorlw	1	; case 1
  2083  0BC8  1903               	skipnz
  2084  0BC9  2BB7               	goto	l323
  2085  0BCA  2BCB               	goto	l325
  2086  0BCB                     l325:	
  2087  0BCB  0008               	return
  2088  0BCC                     __end_of_T0_timer_mode_state:	
  2089                           
  2090                           	psect	text7
  2091  0B92                     __ptext7:	
  2092 ;; *************** function _T0_counter_mode_state *****************
  2093 ;; Defined at:
  2094 ;;		line 54 in file "TIMER0.c"
  2095 ;; Parameters:    Size  Location     Type
  2096 ;;  s               1    wreg     enum E880
  2097 ;; Auto vars:     Size  Location     Type
  2098 ;;  s               1   17[BANK0 ] enum E880
  2099 ;; Return value:  Size  Location     Type
  2100 ;;                  1    wreg      void 
  2101 ;; Registers used:
  2102 ;;		wreg, fsr0l, fsr0h, status,2, status,0
  2103 ;; Tracked objects:
  2104 ;;		On entry : 0/0
  2105 ;;		On exit  : 0/0
  2106 ;;		Unchanged: 0/0
  2107 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2108 ;;      Params:         0       0       0       0       0
  2109 ;;      Locals:         0       1       0       0       0
  2110 ;;      Temps:          0       2       0       0       0
  2111 ;;      Totals:         0       3       0       0       0
  2112 ;;Total ram usage:        3 bytes
  2113 ;; Hardware stack levels used:    1
  2114 ;; Hardware stack levels required when called:    5
  2115 ;; This function calls:
  2116 ;;		Nothing
  2117 ;; This function is called by:
  2118 ;;		_timer0_init
  2119 ;; This function uses a non-reentrant model
  2120 ;;
  2121                           
  2122                           
  2123                           ;psect for function _T0_counter_mode_state
  2124  0B92                     _T0_counter_mode_state:	
  2125                           
  2126                           ;incstack = 0
  2127                           ; Regs used in _T0_counter_mode_state: [wreg-fsr0h+status,2+status,0]
  2128                           ;T0_counter_mode_state@s stored from wreg
  2129  0B92  1283               	bcf	3,5	;RP0=0, select bank0
  2130  0B93  1303               	bcf	3,6	;RP1=0, select bank0
  2131  0B94  00B1               	movwf	T0_counter_mode_state@s
  2132                           
  2133                           ;TIMER0.c: 57:     switch(s) {
  2134  0B95  2B9E               	goto	l2261
  2135  0B96                     l329:	
  2136                           ;TIMER0.c: 58:         case T0_ON :
  2137                           
  2138                           
  2139                           ;TIMER0.c: 59:             (((*((volatile tRegister *)(0x81))).Bits.BIT5) = 1);
  2140  0B96  1683               	bsf	3,5	;RP0=1, select bank1
  2141  0B97  1303               	bcf	3,6	;RP1=0, select bank1
  2142  0B98  1681               	bsf	1,5	;volatile
  2143                           
  2144                           ;TIMER0.c: 60:             break;
  2145  0B99  0008               	return
  2146  0B9A                     l331:	
  2147                           ;TIMER0.c: 61:         case T0_OFF :
  2148                           
  2149                           
  2150                           ;TIMER0.c: 62:             (((*((volatile tRegister *)(0x81))).Bits.BIT5) = 0);
  2151  0B9A  1683               	bsf	3,5	;RP0=1, select bank1
  2152  0B9B  1303               	bcf	3,6	;RP1=0, select bank1
  2153  0B9C  1281               	bcf	1,5	;volatile
  2154                           
  2155                           ;TIMER0.c: 63:             break;
  2156  0B9D  0008               	return
  2157  0B9E                     l2261:	
  2158  0B9E  0831               	movf	T0_counter_mode_state@s,w
  2159  0B9F  00AF               	movwf	??_T0_counter_mode_state
  2160  0BA0  01B0               	clrf	??_T0_counter_mode_state+1
  2161                           
  2162                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  2163                           ; Switch size 1, requested type "simple"
  2164                           ; Number of cases is 1, Range of values is 0 to 0
  2165                           ; switch strategies available:
  2166                           ; Name         Instructions Cycles
  2167                           ; simple_byte            4     3 (average)
  2168                           ; direct_byte           11     8 (fixed)
  2169                           ; jumptable            260     6 (fixed)
  2170                           ;	Chosen strategy is simple_byte
  2171  0BA1  0830               	movf	??_T0_counter_mode_state+1,w
  2172  0BA2  3A00               	xorlw	0	; case 0
  2173  0BA3  1903               	skipnz
  2174  0BA4  2BA6               	goto	l3175
  2175  0BA5  2BAE               	goto	l333
  2176  0BA6                     l3175:	
  2177                           
  2178                           ; Switch size 1, requested type "simple"
  2179                           ; Number of cases is 2, Range of values is 0 to 1
  2180                           ; switch strategies available:
  2181                           ; Name         Instructions Cycles
  2182                           ; simple_byte            7     4 (average)
  2183                           ; direct_byte           14     8 (fixed)
  2184                           ; jumptable            260     6 (fixed)
  2185                           ;	Chosen strategy is simple_byte
  2186  0BA6  082F               	movf	??_T0_counter_mode_state,w
  2187  0BA7  3A00               	xorlw	0	; case 0
  2188  0BA8  1903               	skipnz
  2189  0BA9  2B96               	goto	l329
  2190  0BAA  3A01               	xorlw	1	; case 1
  2191  0BAB  1903               	skipnz
  2192  0BAC  2B9A               	goto	l331
  2193  0BAD  2BAE               	goto	l333
  2194  0BAE                     l333:	
  2195  0BAE  0008               	return
  2196  0BAF                     __end_of_T0_counter_mode_state:	
  2197                           
  2198                           	psect	text8
  2199  0A60                     __ptext8:	
  2200 ;; *************** function _time_init *****************
  2201 ;; Defined at:
  2202 ;;		line 28 in file "TIME.c"
  2203 ;; Parameters:    Size  Location     Type
  2204 ;;		None
  2205 ;; Auto vars:     Size  Location     Type
  2206 ;;		None
  2207 ;; Return value:  Size  Location     Type
  2208 ;;                  1    wreg      void 
  2209 ;; Registers used:
  2210 ;;		status,2
  2211 ;; Tracked objects:
  2212 ;;		On entry : 0/0
  2213 ;;		On exit  : 0/0
  2214 ;;		Unchanged: 0/0
  2215 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2216 ;;      Params:         0       0       0       0       0
  2217 ;;      Locals:         0       0       0       0       0
  2218 ;;      Temps:          0       0       0       0       0
  2219 ;;      Totals:         0       0       0       0       0
  2220 ;;Total ram usage:        0 bytes
  2221 ;; Hardware stack levels used:    1
  2222 ;; Hardware stack levels required when called:    5
  2223 ;; This function calls:
  2224 ;;		Nothing
  2225 ;; This function is called by:
  2226 ;;		_main
  2227 ;; This function uses a non-reentrant model
  2228 ;;
  2229                           
  2230                           
  2231                           ;psect for function _time_init
  2232  0A60                     _time_init:	
  2233                           
  2234                           ;TIME.c: 32:     current_time.secounds = 0;
  2235                           
  2236                           ;incstack = 0
  2237                           ; Regs used in _time_init: [status,2]
  2238  0A60  1283               	bcf	3,5	;RP0=0, select bank0
  2239  0A61  1303               	bcf	3,6	;RP1=0, select bank0
  2240  0A62  01CB               	clrf	_current_time
  2241                           
  2242                           ;TIME.c: 34:     current_time.minutes = 0;
  2243  0A63  01CC               	clrf	_current_time+1
  2244                           
  2245                           ;TIME.c: 36:     current_time.hours = 0;
  2246  0A64  01CD               	clrf	_current_time+2
  2247                           
  2248                           ;TIME.c: 40:     current_mode = MODE_NORMAL;
  2249  0A65  01D0               	clrf	_current_mode
  2250  0A66  0008               	return
  2251  0A67                     __end_of_time_init:	
  2252                           
  2253                           	psect	text9
  2254  05D1                     __ptext9:	
  2255 ;; *************** function _switch_init *****************
  2256 ;; Defined at:
  2257 ;;		line 31 in file "SWITCH.c"
  2258 ;; Parameters:    Size  Location     Type
  2259 ;;  sw              1    wreg     enum E866
  2260 ;; Auto vars:     Size  Location     Type
  2261 ;;  sw              1   29[BANK0 ] enum E866
  2262 ;;  index           1   28[BANK0 ] unsigned char 
  2263 ;; Return value:  Size  Location     Type
  2264 ;;                  1    wreg      void 
  2265 ;; Registers used:
  2266 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  2267 ;; Tracked objects:
  2268 ;;		On entry : 0/0
  2269 ;;		On exit  : 0/0
  2270 ;;		Unchanged: 0/0
  2271 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2272 ;;      Params:         0       0       0       0       0
  2273 ;;      Locals:         0       2       0       0       0
  2274 ;;      Temps:          0      12       0       0       0
  2275 ;;      Totals:         0      14       0       0       0
  2276 ;;Total ram usage:       14 bytes
  2277 ;; Hardware stack levels used:    1
  2278 ;; Hardware stack levels required when called:    6
  2279 ;; This function calls:
  2280 ;;		_switches_Schematic_init
  2281 ;; This function is called by:
  2282 ;;		_main
  2283 ;; This function uses a non-reentrant model
  2284 ;;
  2285                           
  2286                           
  2287                           ;psect for function _switch_init
  2288  05D1                     _switch_init:	
  2289                           
  2290                           ;incstack = 0
  2291                           ; Regs used in _switch_init: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  2292                           ;switch_init@sw stored from wreg
  2293  05D1  1283               	bcf	3,5	;RP0=0, select bank0
  2294  05D2  1303               	bcf	3,6	;RP1=0, select bank0
  2295  05D3  00BD               	movwf	switch_init@sw
  2296                           
  2297                           ;SWITCH.c: 35:     switches_Schematic_init();
  2298  05D4  120A  158A  2451  120A  118A  	fcall	_switches_Schematic_init
  2299                           
  2300                           ;SWITCH.c: 38:     ((*(switches_data[sw].ctrl_reg)) = ((*(switches_data[sw].ctrl_reg) & 
      +                          (~(1 << switches_data[sw].pin_number))) | (((1)) << switches_data[sw].pin_number)));
  2301  05D9  3001               	movlw	1
  2302  05DA  1283               	bcf	3,5	;RP0=0, select bank0
  2303  05DB  1303               	bcf	3,6	;RP1=0, select bank0
  2304  05DC  00B0               	movwf	??_switch_init
  2305  05DD  083D               	movf	switch_init@sw,w
  2306  05DE  00B1               	movwf	??_switch_init+1
  2307  05DF  3002               	movlw	2
  2308  05E0                     u2075:	
  2309  05E0  1003               	clrc
  2310  05E1  0DB1               	rlf	??_switch_init+1,f
  2311  05E2  3EFF               	addlw	-1
  2312  05E3  1D03               	skipz
  2313  05E4  2DE0               	goto	u2075
  2314  05E5  1003               	clrc
  2315  05E6  0D31               	rlf	??_switch_init+1,w
  2316  05E7  3EA4               	addlw	(low ((_switches_data| 0+4)))& (0+255)
  2317  05E8  0084               	movwf	4
  2318  05E9  1383               	bcf	3,7	;select IRP bank1
  2319  05EA  0A00               	incf	0,w
  2320  05EB  2DEE               	goto	u2084
  2321  05EC                     u2085:	
  2322  05EC  1003               	clrc
  2323  05ED  0DB0               	rlf	??_switch_init,f
  2324  05EE                     u2084:	
  2325  05EE  3EFF               	addlw	-1
  2326  05EF  1D03               	skipz
  2327  05F0  2DEC               	goto	u2085
  2328  05F1  083D               	movf	switch_init@sw,w
  2329  05F2  00B2               	movwf	??_switch_init+2
  2330  05F3  3002               	movlw	2
  2331  05F4                     u2095:	
  2332  05F4  1003               	clrc
  2333  05F5  0DB2               	rlf	??_switch_init+2,f
  2334  05F6  3EFF               	addlw	-1
  2335  05F7  1D03               	skipz
  2336  05F8  2DF4               	goto	u2095
  2337  05F9  1003               	clrc
  2338  05FA  0D32               	rlf	??_switch_init+2,w
  2339  05FB  3EA0               	addlw	(low (_switches_data| 0))& (0+255)
  2340  05FC  0084               	movwf	4
  2341  05FD  0800               	movf	0,w
  2342  05FE  00B3               	movwf	??_switch_init+3
  2343  05FF  0A84               	incf	4,f
  2344  0600  0800               	movf	0,w
  2345  0601  00B4               	movwf	??_switch_init+4
  2346  0602  0833               	movf	??_switch_init+3,w
  2347  0603  0084               	movwf	4
  2348  0604  1783               	bsf	3,7
  2349  0605  1C34               	btfss	??_switch_init+4,0
  2350  0606  1383               	bcf	3,7
  2351  0607  0800               	movf	0,w
  2352  0608  00B5               	movwf	??_switch_init+5
  2353  0609  3001               	movlw	1
  2354  060A  00B6               	movwf	??_switch_init+6
  2355  060B  083D               	movf	switch_init@sw,w
  2356  060C  00B7               	movwf	??_switch_init+7
  2357  060D  3002               	movlw	2
  2358  060E                     u2105:	
  2359  060E  1003               	clrc
  2360  060F  0DB7               	rlf	??_switch_init+7,f
  2361  0610  3EFF               	addlw	-1
  2362  0611  1D03               	skipz
  2363  0612  2E0E               	goto	u2105
  2364  0613  1003               	clrc
  2365  0614  0D37               	rlf	??_switch_init+7,w
  2366  0615  3EA4               	addlw	(low ((_switches_data| 0+4)))& (0+255)
  2367  0616  0084               	movwf	4
  2368  0617  1383               	bcf	3,7	;select IRP bank1
  2369  0618  0A00               	incf	0,w
  2370  0619  2E1C               	goto	u2114
  2371  061A                     u2115:	
  2372  061A  1003               	clrc
  2373  061B  0DB6               	rlf	??_switch_init+6,f
  2374  061C                     u2114:	
  2375  061C  3EFF               	addlw	-1
  2376  061D  1D03               	skipz
  2377  061E  2E1A               	goto	u2115
  2378  061F  0836               	movf	??_switch_init+6,w
  2379  0620  3AFF               	xorlw	255
  2380  0621  0535               	andwf	??_switch_init+5,w
  2381  0622  0430               	iorwf	??_switch_init,w
  2382  0623  00B8               	movwf	??_switch_init+8
  2383  0624  083D               	movf	switch_init@sw,w
  2384  0625  00B9               	movwf	??_switch_init+9
  2385  0626  3002               	movlw	2
  2386  0627                     u2125:	
  2387  0627  1003               	clrc
  2388  0628  0DB9               	rlf	??_switch_init+9,f
  2389  0629  3EFF               	addlw	-1
  2390  062A  1D03               	skipz
  2391  062B  2E27               	goto	u2125
  2392  062C  1003               	clrc
  2393  062D  0D39               	rlf	??_switch_init+9,w
  2394  062E  3EA0               	addlw	(low (_switches_data| 0))& (0+255)
  2395  062F  0084               	movwf	4
  2396  0630  0800               	movf	0,w
  2397  0631  00BA               	movwf	??_switch_init+10
  2398  0632  0A84               	incf	4,f
  2399  0633  0800               	movf	0,w
  2400  0634  00BB               	movwf	??_switch_init+11
  2401  0635  083A               	movf	??_switch_init+10,w
  2402  0636  0084               	movwf	4
  2403  0637  1783               	bsf	3,7
  2404  0638  1C3B               	btfss	??_switch_init+11,0
  2405  0639  1383               	bcf	3,7
  2406  063A  0838               	movf	??_switch_init+8,w
  2407  063B  0080               	movwf	0
  2408                           
  2409                           ;SWITCH.c: 42:     for (index = 0; index < (2);index++){
  2410  063C  01BC               	clrf	switch_init@index
  2411  063D                     l2373:	
  2412                           
  2413                           ;SWITCH.c: 44:         switches_data[sw].samples[index] = ((1));
  2414  063D  083D               	movf	switch_init@sw,w
  2415  063E  00B0               	movwf	??_switch_init
  2416  063F  3003               	movlw	3
  2417  0640                     u2135:	
  2418  0640  1003               	clrc
  2419  0641  0DB0               	rlf	??_switch_init,f
  2420  0642  3EFF               	addlw	-1
  2421  0643  1D03               	skipz
  2422  0644  2E40               	goto	u2135
  2423  0645  30A5               	movlw	(low ((_switches_data| 0+5)))& (0+255)
  2424  0646  0730               	addwf	??_switch_init,w
  2425  0647  00B1               	movwf	??_switch_init+1
  2426  0648  083C               	movf	switch_init@index,w
  2427  0649  0731               	addwf	??_switch_init+1,w
  2428  064A  00B2               	movwf	??_switch_init+2
  2429  064B  0832               	movf	??_switch_init+2,w
  2430  064C  0084               	movwf	4
  2431  064D  1383               	bcf	3,7	;select IRP bank1
  2432  064E  0180               	clrf	0
  2433  064F  0A80               	incf	0,f
  2434                           
  2435                           ;SWITCH.c: 45:     }
  2436  0650  3001               	movlw	1
  2437  0651  00B0               	movwf	??_switch_init
  2438  0652  0830               	movf	??_switch_init,w
  2439  0653  07BC               	addwf	switch_init@index,f
  2440  0654  3002               	movlw	2
  2441  0655  023C               	subwf	switch_init@index,w
  2442  0656  1C03               	skipc
  2443  0657  2E3D               	goto	l2373
  2444                           
  2445                           ;SWITCH.c: 47:     switches_data[sw].state = sw_released;
  2446  0658  083D               	movf	switch_init@sw,w
  2447  0659  00B0               	movwf	??_switch_init
  2448  065A  3002               	movlw	2
  2449  065B                     u2155:	
  2450  065B  1003               	clrc
  2451  065C  0DB0               	rlf	??_switch_init,f
  2452  065D  3EFF               	addlw	-1
  2453  065E  1D03               	skipz
  2454  065F  2E5B               	goto	u2155
  2455  0660  1003               	clrc
  2456  0661  0D30               	rlf	??_switch_init,w
  2457  0662  3EA7               	addlw	(low ((_switches_data| 0+7)))& (0+255)
  2458  0663  0084               	movwf	4
  2459  0664  0180               	clrf	0
  2460  0665  0008               	return
  2461  0666                     __end_of_switch_init:	
  2462                           
  2463                           	psect	text10
  2464  0C51                     __ptext10:	
  2465 ;; *************** function _switches_Schematic_init *****************
  2466 ;; Defined at:
  2467 ;;		line 123 in file "SWITCH.c"
  2468 ;; Parameters:    Size  Location     Type
  2469 ;;		None
  2470 ;; Auto vars:     Size  Location     Type
  2471 ;;		None
  2472 ;; Return value:  Size  Location     Type
  2473 ;;                  1    wreg      void 
  2474 ;; Registers used:
  2475 ;;		wreg, status,2
  2476 ;; Tracked objects:
  2477 ;;		On entry : 0/0
  2478 ;;		On exit  : 0/0
  2479 ;;		Unchanged: 0/0
  2480 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2481 ;;      Params:         0       0       0       0       0
  2482 ;;      Locals:         0       0       0       0       0
  2483 ;;      Temps:          0       1       0       0       0
  2484 ;;      Totals:         0       1       0       0       0
  2485 ;;Total ram usage:        1 bytes
  2486 ;; Hardware stack levels used:    1
  2487 ;; Hardware stack levels required when called:    5
  2488 ;; This function calls:
  2489 ;;		Nothing
  2490 ;; This function is called by:
  2491 ;;		_switch_init
  2492 ;; This function uses a non-reentrant model
  2493 ;;
  2494                           
  2495                           
  2496                           ;psect for function _switches_Schematic_init
  2497  0C51                     _switches_Schematic_init:	
  2498                           
  2499                           ;SWITCH.c: 127:     switches_data[sw_plus].ctrl_reg = &(((*((volatile tRegister *)(0x86)
      +                          )).Reg));
  2500                           
  2501                           ;incstack = 0
  2502                           ; Regs used in _switches_Schematic_init: [wreg+status,2]
  2503  0C51  3000               	movlw	0
  2504  0C52  1683               	bsf	3,5	;RP0=1, select bank1
  2505  0C53  1303               	bcf	3,6	;RP1=0, select bank1
  2506  0C54  00A1               	movwf	(_switches_data+1)^(0+128)
  2507  0C55  3086               	movlw	134
  2508  0C56  00A0               	movwf	_switches_data^(0+128)
  2509                           
  2510                           ;SWITCH.c: 128:     switches_data[sw_plus].data_reg = &(((*((volatile tRegister *)(0x06)
      +                          )).Reg));
  2511  0C57  3000               	movlw	0
  2512  0C58  00A3               	movwf	((low ((_switches_data| 0+2))+1))^(0+128)
  2513  0C59  3006               	movlw	6
  2514  0C5A  00A2               	movwf	(low ((_switches_data| 0+2)))^(0+128)
  2515                           
  2516                           ;SWITCH.c: 129:     switches_data[sw_plus].pin_number = ((0));
  2517  0C5B  01A4               	clrf	(_switches_data^(0+128)+4)
  2518                           
  2519                           ;SWITCH.c: 133:     switches_data[sw_minus].ctrl_reg = &(((*((volatile tRegister *)(0x86
      +                          ))).Reg));
  2520  0C5C  3000               	movlw	0
  2521  0C5D  00A9               	movwf	((low ((_switches_data| 0+8))+1))^(0+128)
  2522  0C5E  3086               	movlw	134
  2523  0C5F  00A8               	movwf	(low ((_switches_data| 0+8)))^(0+128)
  2524                           
  2525                           ;SWITCH.c: 134:     switches_data[sw_minus].data_reg = &(((*((volatile tRegister *)(0x06
      +                          ))).Reg));
  2526  0C60  3000               	movlw	0
  2527  0C61  00AB               	movwf	((low ((_switches_data| 0+10))+1))^(0+128)
  2528  0C62  3006               	movlw	6
  2529  0C63  00AA               	movwf	(low ((_switches_data| 0+10)))^(0+128)
  2530                           
  2531                           ;SWITCH.c: 135:     switches_data[sw_minus].pin_number = ((1));
  2532  0C64  01AC               	clrf	(_switches_data^(0+128)+12)
  2533  0C65  0AAC               	incf	(_switches_data^(0+128)+12),f
  2534                           
  2535                           ;SWITCH.c: 139:     switches_data[sw_setting].ctrl_reg = &(((*((volatile tRegister *)(0x
      +                          86))).Reg));
  2536  0C66  3000               	movlw	0
  2537  0C67  00B1               	movwf	((low ((_switches_data| 0+16))+1))^(0+128)
  2538  0C68  3086               	movlw	134
  2539  0C69  00B0               	movwf	(low ((_switches_data| 0+16)))^(0+128)
  2540                           
  2541                           ;SWITCH.c: 140:     switches_data[sw_setting].data_reg = &(((*((volatile tRegister *)(0x
      +                          06))).Reg));
  2542  0C6A  3000               	movlw	0
  2543  0C6B  00B3               	movwf	((low ((_switches_data| 0+18))+1))^(0+128)
  2544  0C6C  3006               	movlw	6
  2545  0C6D  00B2               	movwf	(low ((_switches_data| 0+18)))^(0+128)
  2546                           
  2547                           ;SWITCH.c: 141:     switches_data[sw_setting].pin_number = ((2));
  2548  0C6E  3002               	movlw	2
  2549  0C6F  1283               	bcf	3,5	;RP0=0, select bank0
  2550  0C70  1303               	bcf	3,6	;RP1=0, select bank0
  2551  0C71  00AF               	movwf	??_switches_Schematic_init
  2552  0C72  082F               	movf	??_switches_Schematic_init,w
  2553  0C73  1683               	bsf	3,5	;RP0=1, select bank1
  2554  0C74  1303               	bcf	3,6	;RP1=0, select bank1
  2555  0C75  00B4               	movwf	(_switches_data^(0+128)+20)
  2556  0C76  0008               	return
  2557  0C77                     __end_of_switches_Schematic_init:	
  2558                           
  2559                           	psect	text11
  2560  04A0                     __ptext11:	
  2561 ;; *************** function _display_init *****************
  2562 ;; Defined at:
  2563 ;;		line 18 in file "DISPLAY.c"
  2564 ;; Parameters:    Size  Location     Type
  2565 ;;		None
  2566 ;; Auto vars:     Size  Location     Type
  2567 ;;		None
  2568 ;; Return value:  Size  Location     Type
  2569 ;;                  1    wreg      void 
  2570 ;; Registers used:
  2571 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  2572 ;; Tracked objects:
  2573 ;;		On entry : 0/0
  2574 ;;		On exit  : 0/0
  2575 ;;		Unchanged: 0/0
  2576 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2577 ;;      Params:         0       0       0       0       0
  2578 ;;      Locals:         0       0       0       0       0
  2579 ;;      Temps:          0       3       0       0       0
  2580 ;;      Totals:         0       3       0       0       0
  2581 ;;Total ram usage:        3 bytes
  2582 ;; Hardware stack levels used:    1
  2583 ;; Hardware stack levels required when called:    8
  2584 ;; This function calls:
  2585 ;;		___awdiv
  2586 ;;		___awmod
  2587 ;;		_get_time
  2588 ;;		_ssdDot_setState
  2589 ;;		_ssd_init
  2590 ;;		_ssd_setSymbol
  2591 ;; This function is called by:
  2592 ;;		_main
  2593 ;; This function uses a non-reentrant model
  2594 ;;
  2595                           
  2596                           
  2597                           ;psect for function _display_init
  2598  04A0                     _display_init:	
  2599                           
  2600                           ;DISPLAY.c: 20:     get_time(&display_time);
  2601                           
  2602                           ;incstack = 0
  2603 ;; hardware stack exceeded
  2604                           ; Regs used in _display_init: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  2605  04A0  3055               	movlw	(low (_display_time| 0))& (0+255)
  2606  04A1  120A  158A  2344  120A  118A  	fcall	_get_time
  2607                           
  2608                           ;DISPLAY.c: 22:     ssd_init(ssd_minute_units);
  2609  04A6  3000               	movlw	0
  2610  04A7  120A  118A  219C  120A  118A  	fcall	_ssd_init
  2611                           
  2612                           ;DISPLAY.c: 23:     ssd_init(ssd_minute_tens);
  2613  04AC  3001               	movlw	1
  2614  04AD  120A  118A  219C  120A  118A  	fcall	_ssd_init
  2615                           
  2616                           ;DISPLAY.c: 24:     ssd_init(ssd_hour_units);
  2617  04B2  3002               	movlw	2
  2618  04B3  120A  118A  219C  120A  118A  	fcall	_ssd_init
  2619                           
  2620                           ;DISPLAY.c: 25:     ssd_init(ssd_hour_tens);
  2621  04B8  3003               	movlw	3
  2622  04B9  120A  118A  219C  120A  118A  	fcall	_ssd_init
  2623                           
  2624                           ;DISPLAY.c: 27:     ssd_setSymbol(ssd_minute_units , display_time.minutes % 10);
  2625  04BE  300A               	movlw	10
  2626  04BF  1283               	bcf	3,5	;RP0=0, select bank0
  2627  04C0  1303               	bcf	3,6	;RP1=0, select bank0
  2628  04C1  00AF               	movwf	___awmod@divisor
  2629  04C2  3000               	movlw	0
  2630  04C3  00B0               	movwf	___awmod@divisor+1
  2631  04C4  0856               	movf	_display_time+1,w
  2632  04C5  00C8               	movwf	??_display_init
  2633  04C6  01C9               	clrf	??_display_init+1
  2634  04C7  0848               	movf	??_display_init,w
  2635  04C8  00B1               	movwf	___awmod@dividend
  2636  04C9  0849               	movf	??_display_init+1,w
  2637  04CA  00B2               	movwf	___awmod@dividend+1
  2638  04CB  120A  118A  27B1  120A  118A  	fcall	___awmod
  2639  04D0  1283               	bcf	3,5	;RP0=0, select bank0
  2640  04D1  1303               	bcf	3,6	;RP1=0, select bank0
  2641  04D2  082F               	movf	?___awmod,w
  2642  04D3  00CA               	movwf	??_display_init+2
  2643  04D4  084A               	movf	??_display_init+2,w
  2644  04D5  00B8               	movwf	ssd_setSymbol@symbol
  2645  04D6  3000               	movlw	0
  2646  04D7  120A  158A  2302  120A  118A  	fcall	_ssd_setSymbol
  2647                           
  2648                           ;DISPLAY.c: 28:     ssd_setSymbol(ssd_minute_tens , display_time.minutes / 10);
  2649  04DC  300A               	movlw	10
  2650  04DD  1283               	bcf	3,5	;RP0=0, select bank0
  2651  04DE  1303               	bcf	3,6	;RP1=0, select bank0
  2652  04DF  00AF               	movwf	___awdiv@divisor
  2653  04E0  3000               	movlw	0
  2654  04E1  00B0               	movwf	___awdiv@divisor+1
  2655  04E2  0856               	movf	_display_time+1,w
  2656  04E3  00C8               	movwf	??_display_init
  2657  04E4  01C9               	clrf	??_display_init+1
  2658  04E5  0848               	movf	??_display_init,w
  2659  04E6  00B1               	movwf	___awdiv@dividend
  2660  04E7  0849               	movf	??_display_init+1,w
  2661  04E8  00B2               	movwf	___awdiv@dividend+1
  2662  04E9  120A  158A  2746  120A  118A  	fcall	___awdiv
  2663  04EE  1283               	bcf	3,5	;RP0=0, select bank0
  2664  04EF  1303               	bcf	3,6	;RP1=0, select bank0
  2665  04F0  082F               	movf	?___awdiv,w
  2666  04F1  00CA               	movwf	??_display_init+2
  2667  04F2  084A               	movf	??_display_init+2,w
  2668  04F3  00B8               	movwf	ssd_setSymbol@symbol
  2669  04F4  3001               	movlw	1
  2670  04F5  120A  158A  2302  120A  118A  	fcall	_ssd_setSymbol
  2671                           
  2672                           ;DISPLAY.c: 29:     ssd_setSymbol(ssd_hour_units , display_time.hours % 10);
  2673  04FA  300A               	movlw	10
  2674  04FB  1283               	bcf	3,5	;RP0=0, select bank0
  2675  04FC  1303               	bcf	3,6	;RP1=0, select bank0
  2676  04FD  00AF               	movwf	___awmod@divisor
  2677  04FE  3000               	movlw	0
  2678  04FF  00B0               	movwf	___awmod@divisor+1
  2679  0500  0857               	movf	_display_time+2,w
  2680  0501  00C8               	movwf	??_display_init
  2681  0502  01C9               	clrf	??_display_init+1
  2682  0503  0848               	movf	??_display_init,w
  2683  0504  00B1               	movwf	___awmod@dividend
  2684  0505  0849               	movf	??_display_init+1,w
  2685  0506  00B2               	movwf	___awmod@dividend+1
  2686  0507  120A  118A  27B1  120A  118A  	fcall	___awmod
  2687  050C  1283               	bcf	3,5	;RP0=0, select bank0
  2688  050D  1303               	bcf	3,6	;RP1=0, select bank0
  2689  050E  082F               	movf	?___awmod,w
  2690  050F  00CA               	movwf	??_display_init+2
  2691  0510  084A               	movf	??_display_init+2,w
  2692  0511  00B8               	movwf	ssd_setSymbol@symbol
  2693  0512  3002               	movlw	2
  2694  0513  120A  158A  2302  120A  118A  	fcall	_ssd_setSymbol
  2695                           
  2696                           ;DISPLAY.c: 30:     ssd_setSymbol(ssd_hour_tens , display_time.hours / 10);
  2697  0518  300A               	movlw	10
  2698  0519  1283               	bcf	3,5	;RP0=0, select bank0
  2699  051A  1303               	bcf	3,6	;RP1=0, select bank0
  2700  051B  00AF               	movwf	___awdiv@divisor
  2701  051C  3000               	movlw	0
  2702  051D  00B0               	movwf	___awdiv@divisor+1
  2703  051E  0857               	movf	_display_time+2,w
  2704  051F  00C8               	movwf	??_display_init
  2705  0520  01C9               	clrf	??_display_init+1
  2706  0521  0848               	movf	??_display_init,w
  2707  0522  00B1               	movwf	___awdiv@dividend
  2708  0523  0849               	movf	??_display_init+1,w
  2709  0524  00B2               	movwf	___awdiv@dividend+1
  2710  0525  120A  158A  2746  120A  118A  	fcall	___awdiv
  2711  052A  1283               	bcf	3,5	;RP0=0, select bank0
  2712  052B  1303               	bcf	3,6	;RP1=0, select bank0
  2713  052C  082F               	movf	?___awdiv,w
  2714  052D  00CA               	movwf	??_display_init+2
  2715  052E  084A               	movf	??_display_init+2,w
  2716  052F  00B8               	movwf	ssd_setSymbol@symbol
  2717  0530  3003               	movlw	3
  2718  0531  120A  158A  2302  120A  118A  	fcall	_ssd_setSymbol
  2719                           
  2720                           ;DISPLAY.c: 31:     ssdDot_setState(DOT_OFF);
  2721  0536  3000               	movlw	0
  2722  0537  120A  158A  2277   	fcall	_ssdDot_setState
  2723  053A  0008               	return
  2724  053B                     __end_of_display_init:	
  2725                           
  2726                           	psect	text12
  2727  0B02                     __ptext12:	
  2728 ;; *************** function _ssd_setSymbol *****************
  2729 ;; Defined at:
  2730 ;;		line 58 in file "SSD.c"
  2731 ;; Parameters:    Size  Location     Type
  2732 ;;  ssd             1    wreg     enum E15
  2733 ;;  symbol          1   24[BANK0 ] enum E2
  2734 ;; Auto vars:     Size  Location     Type
  2735 ;;  ssd             1   27[BANK0 ] enum E15
  2736 ;; Return value:  Size  Location     Type
  2737 ;;                  1    wreg      void 
  2738 ;; Registers used:
  2739 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  2740 ;; Tracked objects:
  2741 ;;		On entry : 0/0
  2742 ;;		On exit  : 0/0
  2743 ;;		Unchanged: 0/0
  2744 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2745 ;;      Params:         0       1       0       0       0
  2746 ;;      Locals:         0       1       0       0       0
  2747 ;;      Temps:          0       2       0       0       0
  2748 ;;      Totals:         0       4       0       0       0
  2749 ;;Total ram usage:        4 bytes
  2750 ;; Hardware stack levels used:    1
  2751 ;; Hardware stack levels required when called:    6
  2752 ;; This function calls:
  2753 ;;		___bmul
  2754 ;; This function is called by:
  2755 ;;		_display_init
  2756 ;; This function uses a non-reentrant model
  2757 ;;
  2758                           
  2759                           
  2760                           ;psect for function _ssd_setSymbol
  2761  0B02                     _ssd_setSymbol:	
  2762                           
  2763                           ;incstack = 0
  2764                           ; Regs used in _ssd_setSymbol: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  2765                           ;ssd_setSymbol@ssd stored from wreg
  2766  0B02  1283               	bcf	3,5	;RP0=0, select bank0
  2767  0B03  1303               	bcf	3,6	;RP1=0, select bank0
  2768  0B04  00BB               	movwf	ssd_setSymbol@ssd
  2769                           
  2770                           ;SSD.c: 59:     ssd_data[ssd].symbol = symbol;
  2771  0B05  0838               	movf	ssd_setSymbol@symbol,w
  2772  0B06  00B9               	movwf	??_ssd_setSymbol
  2773  0B07  300A               	movlw	10
  2774  0B08  00BA               	movwf	??_ssd_setSymbol+1
  2775  0B09  083A               	movf	??_ssd_setSymbol+1,w
  2776  0B0A  00AF               	movwf	___bmul@multiplicand
  2777  0B0B  083B               	movf	ssd_setSymbol@ssd,w
  2778  0B0C  120A  158A  22DB   	fcall	___bmul
  2779  0B0F  3E99               	addlw	(low ((_ssd_data| (0+256)+9)))& (0+255)
  2780  0B10  0084               	movwf	4
  2781  0B11  1283               	bcf	3,5	;RP0=0, select bank0
  2782  0B12  1303               	bcf	3,6	;RP1=0, select bank0
  2783  0B13  0839               	movf	??_ssd_setSymbol,w
  2784  0B14  1783               	bsf	3,7	;select IRP bank3
  2785  0B15  0080               	movwf	0
  2786  0B16  0008               	return
  2787  0B17                     __end_of_ssd_setSymbol:	
  2788                           
  2789                           	psect	text13
  2790  019C                     __ptext13:	
  2791 ;; *************** function _ssd_init *****************
  2792 ;; Defined at:
  2793 ;;		line 44 in file "SSD.c"
  2794 ;; Parameters:    Size  Location     Type
  2795 ;;  ssd             1    wreg     enum E15
  2796 ;; Auto vars:     Size  Location     Type
  2797 ;;  ssd             1   39[BANK0 ] enum E15
  2798 ;; Return value:  Size  Location     Type
  2799 ;;                  1    wreg      void 
  2800 ;; Registers used:
  2801 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  2802 ;; Tracked objects:
  2803 ;;		On entry : 0/0
  2804 ;;		On exit  : 0/0
  2805 ;;		Unchanged: 0/0
  2806 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2807 ;;      Params:         0       0       0       0       0
  2808 ;;      Locals:         0       3       0       0       0
  2809 ;;      Temps:          0      12       0       0       0
  2810 ;;      Totals:         0      15       0       0       0
  2811 ;;Total ram usage:       15 bytes
  2812 ;; Hardware stack levels used:    1
  2813 ;; Hardware stack levels required when called:    7
  2814 ;; This function calls:
  2815 ;;		___bmul
  2816 ;;		_ssd_display
  2817 ;;		_ssd_schematic_init
  2818 ;; This function is called by:
  2819 ;;		_display_init
  2820 ;; This function uses a non-reentrant model
  2821 ;;
  2822                           
  2823                           
  2824                           ;psect for function _ssd_init
  2825  019C                     _ssd_init:	
  2826                           
  2827                           ;incstack = 0
  2828 ;; hardware stack exceeded
  2829                           ; Regs used in _ssd_init: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  2830                           ;ssd_init@ssd stored from wreg
  2831  019C  1283               	bcf	3,5	;RP0=0, select bank0
  2832  019D  1303               	bcf	3,6	;RP1=0, select bank0
  2833  019E  00C7               	movwf	ssd_init@ssd
  2834                           
  2835                           ;SSD.c: 48:     ((*(ssd_data[ssd].data_direction_reg)) = ((((0))) ? (~(0)) : ((0))));
  2836  019F  120A  118A  22A1  120A  118A  	fcall	_ssd_schematic_init
  2837  01A4  300A               	movlw	10
  2838  01A5  1283               	bcf	3,5	;RP0=0, select bank0
  2839  01A6  1303               	bcf	3,6	;RP1=0, select bank0
  2840  01A7  00B9               	movwf	??_ssd_init
  2841  01A8  0839               	movf	??_ssd_init,w
  2842  01A9  00AF               	movwf	___bmul@multiplicand
  2843  01AA  0847               	movf	ssd_init@ssd,w
  2844  01AB  120A  158A  22DB  120A  118A  	fcall	___bmul
  2845  01B0  3E90               	addlw	(low (_ssd_data| (0+256)))& (0+255)
  2846  01B1  0084               	movwf	4
  2847  01B2  1783               	bsf	3,7	;select IRP bank3
  2848  01B3  0800               	movf	0,w
  2849  01B4  1283               	bcf	3,5	;RP0=0, select bank0
  2850  01B5  1303               	bcf	3,6	;RP1=0, select bank0
  2851  01B6  00BA               	movwf	??_ssd_init+1
  2852  01B7  0A84               	incf	4,f
  2853  01B8  0800               	movf	0,w
  2854  01B9  00BB               	movwf	??_ssd_init+2
  2855  01BA  083A               	movf	??_ssd_init+1,w
  2856  01BB  0084               	movwf	4
  2857  01BC  1783               	bsf	3,7
  2858  01BD  1C3B               	btfss	??_ssd_init+2,0
  2859  01BE  1383               	bcf	3,7
  2860  01BF  0180               	clrf	0
  2861                           
  2862                           ;SSD.c: 50:     ssd_display(ssd,SSD_NULL);
  2863  01C0  300A               	movlw	10
  2864  01C1  00B9               	movwf	??_ssd_init
  2865  01C2  0839               	movf	??_ssd_init,w
  2866  01C3  00B3               	movwf	ssd_display@symbol
  2867  01C4  0847               	movf	ssd_init@ssd,w
  2868  01C5  120A  158A  24F2  120A  118A  	fcall	_ssd_display
  2869                           
  2870                           ;SSD.c: 53:     ((*(ssd_data[ssd].ctrl_direction_reg)) = ((*(ssd_data[ssd].ctrl_directio
      +                          n_reg) & (~(1 << ssd_data[ssd].ctrl_pin))) | (((0)) << ssd_data[ssd].ctrl_pin)));
  2871  01CA  3000               	movlw	0
  2872  01CB  1283               	bcf	3,5	;RP0=0, select bank0
  2873  01CC  1303               	bcf	3,6	;RP1=0, select bank0
  2874  01CD  00B9               	movwf	??_ssd_init
  2875  01CE  300A               	movlw	10
  2876  01CF  00BA               	movwf	??_ssd_init+1
  2877  01D0  083A               	movf	??_ssd_init+1,w
  2878  01D1  00AF               	movwf	___bmul@multiplicand
  2879  01D2  0847               	movf	ssd_init@ssd,w
  2880  01D3  120A  158A  22DB  120A  118A  	fcall	___bmul
  2881  01D8  3E98               	addlw	(low ((_ssd_data| (0+256)+8)))& (0+255)
  2882  01D9  0084               	movwf	4
  2883  01DA  1783               	bsf	3,7	;select IRP bank3
  2884  01DB  0A00               	incf	0,w
  2885  01DC  1283               	bcf	3,5	;RP0=0, select bank0
  2886  01DD  1303               	bcf	3,6	;RP1=0, select bank0
  2887  01DE  29E1               	goto	u2694
  2888  01DF                     u2695:	
  2889  01DF  1003               	clrc
  2890  01E0  0DB9               	rlf	??_ssd_init,f
  2891  01E1                     u2694:	
  2892  01E1  3EFF               	addlw	-1
  2893  01E2  1D03               	skipz
  2894  01E3  29DF               	goto	u2695
  2895  01E4  300A               	movlw	10
  2896  01E5  00BB               	movwf	??_ssd_init+2
  2897  01E6  083B               	movf	??_ssd_init+2,w
  2898  01E7  00AF               	movwf	___bmul@multiplicand
  2899  01E8  0847               	movf	ssd_init@ssd,w
  2900  01E9  120A  158A  22DB  120A  118A  	fcall	___bmul
  2901  01EE  3E94               	addlw	(low ((_ssd_data| (0+256)+4)))& (0+255)
  2902  01EF  0084               	movwf	4
  2903  01F0  1783               	bsf	3,7	;select IRP bank3
  2904  01F1  0800               	movf	0,w
  2905  01F2  1283               	bcf	3,5	;RP0=0, select bank0
  2906  01F3  1303               	bcf	3,6	;RP1=0, select bank0
  2907  01F4  00BC               	movwf	??_ssd_init+3
  2908  01F5  0A84               	incf	4,f
  2909  01F6  0800               	movf	0,w
  2910  01F7  00BD               	movwf	??_ssd_init+4
  2911  01F8  083C               	movf	??_ssd_init+3,w
  2912  01F9  0084               	movwf	4
  2913  01FA  1783               	bsf	3,7
  2914  01FB  1C3D               	btfss	??_ssd_init+4,0
  2915  01FC  1383               	bcf	3,7
  2916  01FD  0800               	movf	0,w
  2917  01FE  00BE               	movwf	??_ssd_init+5
  2918  01FF  3001               	movlw	1
  2919  0200  00BF               	movwf	??_ssd_init+6
  2920  0201  300A               	movlw	10
  2921  0202  00C0               	movwf	??_ssd_init+7
  2922  0203  0840               	movf	??_ssd_init+7,w
  2923  0204  00AF               	movwf	___bmul@multiplicand
  2924  0205  0847               	movf	ssd_init@ssd,w
  2925  0206  120A  158A  22DB  120A  118A  	fcall	___bmul
  2926  020B  3E98               	addlw	(low ((_ssd_data| (0+256)+8)))& (0+255)
  2927  020C  0084               	movwf	4
  2928  020D  1783               	bsf	3,7	;select IRP bank3
  2929  020E  0A00               	incf	0,w
  2930  020F  1283               	bcf	3,5	;RP0=0, select bank0
  2931  0210  1303               	bcf	3,6	;RP1=0, select bank0
  2932  0211  2A14               	goto	u2704
  2933  0212                     u2705:	
  2934  0212  1003               	clrc
  2935  0213  0DBF               	rlf	??_ssd_init+6,f
  2936  0214                     u2704:	
  2937  0214  3EFF               	addlw	-1
  2938  0215  1D03               	skipz
  2939  0216  2A12               	goto	u2705
  2940  0217  083F               	movf	??_ssd_init+6,w
  2941  0218  3AFF               	xorlw	255
  2942  0219  053E               	andwf	??_ssd_init+5,w
  2943  021A  0439               	iorwf	??_ssd_init,w
  2944  021B  00C1               	movwf	??_ssd_init+8
  2945  021C  300A               	movlw	10
  2946  021D  00C2               	movwf	??_ssd_init+9
  2947  021E  0842               	movf	??_ssd_init+9,w
  2948  021F  00AF               	movwf	___bmul@multiplicand
  2949  0220  0847               	movf	ssd_init@ssd,w
  2950  0221  120A  158A  22DB  120A  118A  	fcall	___bmul
  2951  0226  3E94               	addlw	(low ((_ssd_data| (0+256)+4)))& (0+255)
  2952  0227  0084               	movwf	4
  2953  0228  1783               	bsf	3,7	;select IRP bank3
  2954  0229  0800               	movf	0,w
  2955  022A  1283               	bcf	3,5	;RP0=0, select bank0
  2956  022B  1303               	bcf	3,6	;RP1=0, select bank0
  2957  022C  00C3               	movwf	??_ssd_init+10
  2958  022D  0A84               	incf	4,f
  2959  022E  0800               	movf	0,w
  2960  022F  00C4               	movwf	??_ssd_init+11
  2961  0230  0843               	movf	??_ssd_init+10,w
  2962  0231  0084               	movwf	4
  2963  0232  1783               	bsf	3,7
  2964  0233  1C44               	btfss	??_ssd_init+11,0
  2965  0234  1383               	bcf	3,7
  2966  0235  0841               	movf	??_ssd_init+8,w
  2967  0236  0080               	movwf	0
  2968                           
  2969                           ;SSD.c: 54:     (((*(ssd_data[ssd].ctrl_value_reg)) = ((*(ssd_data[ssd].ctrl_value_reg) 
      +                          & (~(1 << ssd_data[ssd].ctrl_pin))) | (((0)) << ssd_data[ssd].ctrl_pin))));
  2970  0237  3000               	movlw	0
  2971  0238  00B9               	movwf	??_ssd_init
  2972  0239  300A               	movlw	10
  2973  023A  00BA               	movwf	??_ssd_init+1
  2974  023B  083A               	movf	??_ssd_init+1,w
  2975  023C  00AF               	movwf	___bmul@multiplicand
  2976  023D  0847               	movf	ssd_init@ssd,w
  2977  023E  120A  158A  22DB  120A  118A  	fcall	___bmul
  2978  0243  3E98               	addlw	(low ((_ssd_data| (0+256)+8)))& (0+255)
  2979  0244  0084               	movwf	4
  2980  0245  1783               	bsf	3,7	;select IRP bank3
  2981  0246  0A00               	incf	0,w
  2982  0247  1283               	bcf	3,5	;RP0=0, select bank0
  2983  0248  1303               	bcf	3,6	;RP1=0, select bank0
  2984  0249  2A4C               	goto	u2714
  2985  024A                     u2715:	
  2986  024A  1003               	clrc
  2987  024B  0DB9               	rlf	??_ssd_init,f
  2988  024C                     u2714:	
  2989  024C  3EFF               	addlw	-1
  2990  024D  1D03               	skipz
  2991  024E  2A4A               	goto	u2715
  2992  024F  300A               	movlw	10
  2993  0250  00BB               	movwf	??_ssd_init+2
  2994  0251  083B               	movf	??_ssd_init+2,w
  2995  0252  00AF               	movwf	___bmul@multiplicand
  2996  0253  0847               	movf	ssd_init@ssd,w
  2997  0254  120A  158A  22DB  120A  118A  	fcall	___bmul
  2998  0259  3E96               	addlw	(low ((_ssd_data| (0+256)+6)))& (0+255)
  2999  025A  0084               	movwf	4
  3000  025B  1783               	bsf	3,7	;select IRP bank3
  3001  025C  0800               	movf	0,w
  3002  025D  1283               	bcf	3,5	;RP0=0, select bank0
  3003  025E  1303               	bcf	3,6	;RP1=0, select bank0
  3004  025F  00BC               	movwf	??_ssd_init+3
  3005  0260  0A84               	incf	4,f
  3006  0261  0800               	movf	0,w
  3007  0262  00BD               	movwf	??_ssd_init+4
  3008  0263  083C               	movf	??_ssd_init+3,w
  3009  0264  0084               	movwf	4
  3010  0265  1783               	bsf	3,7
  3011  0266  1C3D               	btfss	??_ssd_init+4,0
  3012  0267  1383               	bcf	3,7
  3013  0268  0800               	movf	0,w
  3014  0269  00BE               	movwf	??_ssd_init+5
  3015  026A  3001               	movlw	1
  3016  026B  00BF               	movwf	??_ssd_init+6
  3017  026C  300A               	movlw	10
  3018  026D  00C0               	movwf	??_ssd_init+7
  3019  026E  0840               	movf	??_ssd_init+7,w
  3020  026F  00AF               	movwf	___bmul@multiplicand
  3021  0270  0847               	movf	ssd_init@ssd,w
  3022  0271  120A  158A  22DB  120A  118A  	fcall	___bmul
  3023  0276  3E98               	addlw	(low ((_ssd_data| (0+256)+8)))& (0+255)
  3024  0277  0084               	movwf	4
  3025  0278  1783               	bsf	3,7	;select IRP bank3
  3026  0279  0A00               	incf	0,w
  3027  027A  1283               	bcf	3,5	;RP0=0, select bank0
  3028  027B  1303               	bcf	3,6	;RP1=0, select bank0
  3029  027C  2A7F               	goto	u2724
  3030  027D                     u2725:	
  3031  027D  1003               	clrc
  3032  027E  0DBF               	rlf	??_ssd_init+6,f
  3033  027F                     u2724:	
  3034  027F  3EFF               	addlw	-1
  3035  0280  1D03               	skipz
  3036  0281  2A7D               	goto	u2725
  3037  0282  083F               	movf	??_ssd_init+6,w
  3038  0283  3AFF               	xorlw	255
  3039  0284  053E               	andwf	??_ssd_init+5,w
  3040  0285  0439               	iorwf	??_ssd_init,w
  3041  0286  00C1               	movwf	??_ssd_init+8
  3042  0287  300A               	movlw	10
  3043  0288  00C2               	movwf	??_ssd_init+9
  3044  0289  0842               	movf	??_ssd_init+9,w
  3045  028A  00AF               	movwf	___bmul@multiplicand
  3046  028B  0847               	movf	ssd_init@ssd,w
  3047  028C  120A  158A  22DB   	fcall	___bmul
  3048  028F  3E96               	addlw	(low ((_ssd_data| (0+256)+6)))& (0+255)
  3049  0290  0084               	movwf	4
  3050  0291  1783               	bsf	3,7	;select IRP bank3
  3051  0292  0800               	movf	0,w
  3052  0293  1283               	bcf	3,5	;RP0=0, select bank0
  3053  0294  1303               	bcf	3,6	;RP1=0, select bank0
  3054  0295  00C3               	movwf	??_ssd_init+10
  3055  0296  0A84               	incf	4,f
  3056  0297  0800               	movf	0,w
  3057  0298  00C4               	movwf	??_ssd_init+11
  3058  0299  0843               	movf	??_ssd_init+10,w
  3059  029A  0084               	movwf	4
  3060  029B  1783               	bsf	3,7
  3061  029C  1C44               	btfss	??_ssd_init+11,0
  3062  029D  1383               	bcf	3,7
  3063  029E  0841               	movf	??_ssd_init+8,w
  3064  029F  0080               	movwf	0
  3065  02A0  0008               	return
  3066  02A1                     __end_of_ssd_init:	
  3067                           
  3068                           	psect	text14
  3069  02A1                     __ptext14:	
  3070 ;; *************** function _ssd_schematic_init *****************
  3071 ;; Defined at:
  3072 ;;		line 100 in file "SSD.c"
  3073 ;; Parameters:    Size  Location     Type
  3074 ;;		None
  3075 ;; Auto vars:     Size  Location     Type
  3076 ;;  940            10   30[BANK2 ] struct .
  3077 ;;  938            10   20[BANK2 ] struct .
  3078 ;;  936            10   10[BANK2 ] struct .
  3079 ;;  934            10    0[BANK2 ] struct .
  3080 ;; Return value:  Size  Location     Type
  3081 ;;                  1    wreg      void 
  3082 ;; Registers used:
  3083 ;;		wreg, fsr0l, fsr0h, status,2, status,0
  3084 ;; Tracked objects:
  3085 ;;		On entry : 0/0
  3086 ;;		On exit  : 0/0
  3087 ;;		Unchanged: 0/0
  3088 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3089 ;;      Params:         0       0       0       0       0
  3090 ;;      Locals:         0       0       0       0      40
  3091 ;;      Temps:          0       4       0       0       0
  3092 ;;      Totals:         0       4       0       0      40
  3093 ;;Total ram usage:       44 bytes
  3094 ;; Hardware stack levels used:    1
  3095 ;; Hardware stack levels required when called:    5
  3096 ;; This function calls:
  3097 ;;		Nothing
  3098 ;; This function is called by:
  3099 ;;		_ssd_init
  3100 ;; This function uses a non-reentrant model
  3101 ;;
  3102                           
  3103                           
  3104                           ;psect for function _ssd_schematic_init
  3105  02A1                     _ssd_schematic_init:	
  3106                           
  3107                           ;SSD.c: 103:      ssd_data[0] = (tSSD_INFO){&(((*((volatile tRegister *)(0x88))).Reg)),&
      +                          (((*((volatile tRegister *)(0x08))).Reg)),&(((*((volatile tRegister *)(0x86))).Reg)),&((
      +                          (*((volatile tRegister *)(0x06))).Reg)),((4)),SSD_NULL};;SSD.c: 104:      ssd_data[1] = 
      +                          (tSSD_INFO){&(((*((volatile tRegister *)(0x88))).Reg)),&(((*((volatile tRegister *)(0x08
      +                          ))).Reg)),&(((*((volatile tRegister *)(0x86))).Reg)),&(((*((volatile tRegister *)(0x06))
      +                          ).Reg)),((5)),SSD_NULL};;SSD.c: 105:      ssd_data[2] = (tSSD_INFO){&(((*((volatile tReg
      +                          ister *)(0x88))).Reg)),&(((*((volatile tRegister *)(0x08))).Reg)),&(((*((volatile tRegis
      +                          ter *)(0x86))).Reg)),&(((*((volatile tRegister *)(0x06))).Reg)),((6)),SSD_NULL};
  3108                           
  3109                           ;incstack = 0
  3110                           ; Regs used in _ssd_schematic_init: [wreg-fsr0h+status,2+status,0]
  3111  02A1  3010               	movlw	ssd_schematic_init@934& (0+255)
  3112  02A2  0084               	movwf	4
  3113  02A3  30D2               	movlw	low ssd_schematic_init@F933
  3114  02A4  1283               	bcf	3,5	;RP0=0, select bank0
  3115  02A5  1303               	bcf	3,6	;RP1=0, select bank0
  3116  02A6  00AF               	movwf	??_ssd_schematic_init
  3117  02A7  0804               	movf	4,w
  3118  02A8  00B0               	movwf	??_ssd_schematic_init+1
  3119  02A9  300A               	movlw	10
  3120  02AA  00B1               	movwf	??_ssd_schematic_init+2
  3121  02AB                     u2610:	
  3122  02AB  082F               	movf	??_ssd_schematic_init,w
  3123  02AC  0084               	movwf	4
  3124  02AD  1383               	bcf	3,7	;select IRP bank1
  3125  02AE  0800               	movf	0,w
  3126  02AF  00B2               	movwf	??_ssd_schematic_init+3
  3127  02B0  0AAF               	incf	??_ssd_schematic_init,f
  3128  02B1  0830               	movf	??_ssd_schematic_init+1,w
  3129  02B2  0084               	movwf	4
  3130  02B3  1783               	bsf	3,7	;select IRP bank2
  3131  02B4  0832               	movf	??_ssd_schematic_init+3,w
  3132  02B5  0080               	movwf	0
  3133  02B6  0AB0               	incf	??_ssd_schematic_init+1,f
  3134  02B7  0BB1               	decfsz	??_ssd_schematic_init+2,f
  3135  02B8  2AAB               	goto	u2610
  3136  02B9  3090               	movlw	_ssd_data& (0+255)
  3137  02BA  0084               	movwf	4
  3138  02BB  3010               	movlw	low ssd_schematic_init@934
  3139  02BC  00AF               	movwf	??_ssd_schematic_init
  3140  02BD  0804               	movf	4,w
  3141  02BE  00B0               	movwf	??_ssd_schematic_init+1
  3142  02BF  300A               	movlw	10
  3143  02C0  00B1               	movwf	??_ssd_schematic_init+2
  3144  02C1                     u2620:	
  3145  02C1  082F               	movf	??_ssd_schematic_init,w
  3146  02C2  0084               	movwf	4
  3147  02C3  1783               	bsf	3,7	;select IRP bank2
  3148  02C4  0800               	movf	0,w
  3149  02C5  00B2               	movwf	??_ssd_schematic_init+3
  3150  02C6  0AAF               	incf	??_ssd_schematic_init,f
  3151  02C7  0830               	movf	??_ssd_schematic_init+1,w
  3152  02C8  0084               	movwf	4
  3153  02C9  0832               	movf	??_ssd_schematic_init+3,w
  3154  02CA  0080               	movwf	0
  3155  02CB  0AB0               	incf	??_ssd_schematic_init+1,f
  3156  02CC  0BB1               	decfsz	??_ssd_schematic_init+2,f
  3157  02CD  2AC1               	goto	u2620
  3158                           
  3159                           ;SSD.c: 104:      ssd_data[1] = (tSSD_INFO){&(((*((volatile tRegister *)(0x88))).Reg)),&
      +                          (((*((volatile tRegister *)(0x08))).Reg)),&(((*((volatile tRegister *)(0x86))).Reg)),&((
      +                          (*((volatile tRegister *)(0x06))).Reg)),((5)),SSD_NULL};
  3160  02CE  301A               	movlw	ssd_schematic_init@936& (0+255)
  3161  02CF  0084               	movwf	4
  3162  02D0  30C8               	movlw	low ssd_schematic_init@F935
  3163  02D1  00AF               	movwf	??_ssd_schematic_init
  3164  02D2  0804               	movf	4,w
  3165  02D3  00B0               	movwf	??_ssd_schematic_init+1
  3166  02D4  300A               	movlw	10
  3167  02D5  00B1               	movwf	??_ssd_schematic_init+2
  3168  02D6                     u2630:	
  3169  02D6  082F               	movf	??_ssd_schematic_init,w
  3170  02D7  0084               	movwf	4
  3171  02D8  1383               	bcf	3,7	;select IRP bank1
  3172  02D9  0800               	movf	0,w
  3173  02DA  00B2               	movwf	??_ssd_schematic_init+3
  3174  02DB  0AAF               	incf	??_ssd_schematic_init,f
  3175  02DC  0830               	movf	??_ssd_schematic_init+1,w
  3176  02DD  0084               	movwf	4
  3177  02DE  1783               	bsf	3,7	;select IRP bank2
  3178  02DF  0832               	movf	??_ssd_schematic_init+3,w
  3179  02E0  0080               	movwf	0
  3180  02E1  0AB0               	incf	??_ssd_schematic_init+1,f
  3181  02E2  0BB1               	decfsz	??_ssd_schematic_init+2,f
  3182  02E3  2AD6               	goto	u2630
  3183  02E4  300A               	movlw	10
  3184  02E5  3E90               	addlw	(low (_ssd_data| (0+256)))& (0+255)
  3185  02E6  0084               	movwf	4
  3186  02E7  301A               	movlw	low ssd_schematic_init@936
  3187  02E8  00AF               	movwf	??_ssd_schematic_init
  3188  02E9  0804               	movf	4,w
  3189  02EA  00B0               	movwf	??_ssd_schematic_init+1
  3190  02EB  300A               	movlw	10
  3191  02EC  00B1               	movwf	??_ssd_schematic_init+2
  3192  02ED                     u2640:	
  3193  02ED  082F               	movf	??_ssd_schematic_init,w
  3194  02EE  0084               	movwf	4
  3195  02EF  1783               	bsf	3,7	;select IRP bank2
  3196  02F0  0800               	movf	0,w
  3197  02F1  00B2               	movwf	??_ssd_schematic_init+3
  3198  02F2  0AAF               	incf	??_ssd_schematic_init,f
  3199  02F3  0830               	movf	??_ssd_schematic_init+1,w
  3200  02F4  0084               	movwf	4
  3201  02F5  0832               	movf	??_ssd_schematic_init+3,w
  3202  02F6  0080               	movwf	0
  3203  02F7  0AB0               	incf	??_ssd_schematic_init+1,f
  3204  02F8  0BB1               	decfsz	??_ssd_schematic_init+2,f
  3205  02F9  2AED               	goto	u2640
  3206                           
  3207                           ;SSD.c: 105:      ssd_data[2] = (tSSD_INFO){&(((*((volatile tRegister *)(0x88))).Reg)),&
      +                          (((*((volatile tRegister *)(0x08))).Reg)),&(((*((volatile tRegister *)(0x86))).Reg)),&((
      +                          (*((volatile tRegister *)(0x06))).Reg)),((6)),SSD_NULL};
  3208  02FA  3024               	movlw	ssd_schematic_init@938& (0+255)
  3209  02FB  0084               	movwf	4
  3210  02FC  30BE               	movlw	low ssd_schematic_init@F937
  3211  02FD  00AF               	movwf	??_ssd_schematic_init
  3212  02FE  0804               	movf	4,w
  3213  02FF  00B0               	movwf	??_ssd_schematic_init+1
  3214  0300  300A               	movlw	10
  3215  0301  00B1               	movwf	??_ssd_schematic_init+2
  3216  0302                     u2650:	
  3217  0302  082F               	movf	??_ssd_schematic_init,w
  3218  0303  0084               	movwf	4
  3219  0304  1383               	bcf	3,7	;select IRP bank1
  3220  0305  0800               	movf	0,w
  3221  0306  00B2               	movwf	??_ssd_schematic_init+3
  3222  0307  0AAF               	incf	??_ssd_schematic_init,f
  3223  0308  0830               	movf	??_ssd_schematic_init+1,w
  3224  0309  0084               	movwf	4
  3225  030A  1783               	bsf	3,7	;select IRP bank2
  3226  030B  0832               	movf	??_ssd_schematic_init+3,w
  3227  030C  0080               	movwf	0
  3228  030D  0AB0               	incf	??_ssd_schematic_init+1,f
  3229  030E  0BB1               	decfsz	??_ssd_schematic_init+2,f
  3230  030F  2B02               	goto	u2650
  3231  0310  3014               	movlw	20
  3232  0311  3E90               	addlw	(low (_ssd_data| (0+256)))& (0+255)
  3233  0312  0084               	movwf	4
  3234  0313  3024               	movlw	low ssd_schematic_init@938
  3235  0314  00AF               	movwf	??_ssd_schematic_init
  3236  0315  0804               	movf	4,w
  3237  0316  00B0               	movwf	??_ssd_schematic_init+1
  3238  0317  300A               	movlw	10
  3239  0318  00B1               	movwf	??_ssd_schematic_init+2
  3240  0319                     u2660:	
  3241  0319  082F               	movf	??_ssd_schematic_init,w
  3242  031A  0084               	movwf	4
  3243  031B  1783               	bsf	3,7	;select IRP bank2
  3244  031C  0800               	movf	0,w
  3245  031D  00B2               	movwf	??_ssd_schematic_init+3
  3246  031E  0AAF               	incf	??_ssd_schematic_init,f
  3247  031F  0830               	movf	??_ssd_schematic_init+1,w
  3248  0320  0084               	movwf	4
  3249  0321  0832               	movf	??_ssd_schematic_init+3,w
  3250  0322  0080               	movwf	0
  3251  0323  0AB0               	incf	??_ssd_schematic_init+1,f
  3252  0324  0BB1               	decfsz	??_ssd_schematic_init+2,f
  3253  0325  2B19               	goto	u2660
  3254                           
  3255                           ;SSD.c: 106:      ssd_data[3] = (tSSD_INFO){&(((*((volatile tRegister *)(0x88))).Reg)),&
      +                          (((*((volatile tRegister *)(0x08))).Reg)),&(((*((volatile tRegister *)(0x86))).Reg)),&((
      +                          (*((volatile tRegister *)(0x06))).Reg)),((7)),SSD_NULL};
  3256  0326  302E               	movlw	ssd_schematic_init@940& (0+255)
  3257  0327  0084               	movwf	4
  3258  0328  30C3               	movlw	low ssd_schematic_init@F939
  3259  0329  00AF               	movwf	??_ssd_schematic_init
  3260  032A  0804               	movf	4,w
  3261  032B  00B0               	movwf	??_ssd_schematic_init+1
  3262  032C  300A               	movlw	10
  3263  032D  00B1               	movwf	??_ssd_schematic_init+2
  3264  032E                     u2670:	
  3265  032E  082F               	movf	??_ssd_schematic_init,w
  3266  032F  0084               	movwf	4
  3267  0330  1783               	bsf	3,7	;select IRP bank3
  3268  0331  0800               	movf	0,w
  3269  0332  00B2               	movwf	??_ssd_schematic_init+3
  3270  0333  0AAF               	incf	??_ssd_schematic_init,f
  3271  0334  0830               	movf	??_ssd_schematic_init+1,w
  3272  0335  0084               	movwf	4
  3273  0336  0832               	movf	??_ssd_schematic_init+3,w
  3274  0337  0080               	movwf	0
  3275  0338  0AB0               	incf	??_ssd_schematic_init+1,f
  3276  0339  0BB1               	decfsz	??_ssd_schematic_init+2,f
  3277  033A  2B2E               	goto	u2670
  3278  033B  301E               	movlw	30
  3279  033C  3E90               	addlw	(low (_ssd_data| (0+256)))& (0+255)
  3280  033D  0084               	movwf	4
  3281  033E  302E               	movlw	low ssd_schematic_init@940
  3282  033F  00AF               	movwf	??_ssd_schematic_init
  3283  0340  0804               	movf	4,w
  3284  0341  00B0               	movwf	??_ssd_schematic_init+1
  3285  0342  300A               	movlw	10
  3286  0343  00B1               	movwf	??_ssd_schematic_init+2
  3287  0344                     u2680:	
  3288  0344  082F               	movf	??_ssd_schematic_init,w
  3289  0345  0084               	movwf	4
  3290  0346  1783               	bsf	3,7	;select IRP bank2
  3291  0347  0800               	movf	0,w
  3292  0348  00B2               	movwf	??_ssd_schematic_init+3
  3293  0349  0AAF               	incf	??_ssd_schematic_init,f
  3294  034A  0830               	movf	??_ssd_schematic_init+1,w
  3295  034B  0084               	movwf	4
  3296  034C  0832               	movf	??_ssd_schematic_init+3,w
  3297  034D  0080               	movwf	0
  3298  034E  0AB0               	incf	??_ssd_schematic_init+1,f
  3299  034F  0BB1               	decfsz	??_ssd_schematic_init+2,f
  3300  0350  2B44               	goto	u2680
  3301  0351  0008               	return
  3302  0352                     __end_of_ssd_schematic_init:	
  3303                           
  3304                           	psect	text15
  3305  0CF2                     __ptext15:	
  3306 ;; *************** function _ssd_display *****************
  3307 ;; Defined at:
  3308 ;;		line 110 in file "SSD.c"
  3309 ;; Parameters:    Size  Location     Type
  3310 ;;  ssd             1    wreg     enum E15
  3311 ;;  symbol          1   19[BANK0 ] enum E2
  3312 ;; Auto vars:     Size  Location     Type
  3313 ;;  ssd             1   24[BANK0 ] enum E15
  3314 ;; Return value:  Size  Location     Type
  3315 ;;                  1    wreg      void 
  3316 ;; Registers used:
  3317 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  3318 ;; Tracked objects:
  3319 ;;		On entry : 0/0
  3320 ;;		On exit  : 0/0
  3321 ;;		Unchanged: 0/0
  3322 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3323 ;;      Params:         0       1       0       0       0
  3324 ;;      Locals:         0       1       0       0       0
  3325 ;;      Temps:          0       4       0       0       0
  3326 ;;      Totals:         0       6       0       0       0
  3327 ;;Total ram usage:        6 bytes
  3328 ;; Hardware stack levels used:    1
  3329 ;; Hardware stack levels required when called:    6
  3330 ;; This function calls:
  3331 ;;		___bmul
  3332 ;;		_dot_display
  3333 ;; This function is called by:
  3334 ;;		_ssd_init
  3335 ;; This function uses a non-reentrant model
  3336 ;;
  3337                           
  3338                           
  3339                           ;psect for function _ssd_display
  3340  0CF2                     _ssd_display:	
  3341                           
  3342                           ;incstack = 0
  3343 ;; hardware stack exceeded
  3344                           ; Regs used in _ssd_display: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  3345                           ;ssd_display@ssd stored from wreg
  3346  0CF2  1283               	bcf	3,5	;RP0=0, select bank0
  3347  0CF3  1303               	bcf	3,6	;RP1=0, select bank0
  3348  0CF4  00B8               	movwf	ssd_display@ssd
  3349                           
  3350                           ;SSD.c: 111:     ((*(ssd_data[ssd].data_value_reg)) = (ssd_decoder[symbol]));
  3351  0CF5  0833               	movf	ssd_display@symbol,w
  3352  0CF6  3EB8               	addlw	(low (_ssd_decoder| (0+256)))& (0+255)
  3353  0CF7  0084               	movwf	4
  3354  0CF8  1783               	bsf	3,7	;select IRP bank3
  3355  0CF9  0800               	movf	0,w
  3356  0CFA  00B4               	movwf	??_ssd_display
  3357  0CFB  300A               	movlw	10
  3358  0CFC  00B5               	movwf	??_ssd_display+1
  3359  0CFD  0835               	movf	??_ssd_display+1,w
  3360  0CFE  00AF               	movwf	___bmul@multiplicand
  3361  0CFF  0838               	movf	ssd_display@ssd,w
  3362  0D00  120A  158A  22DB  120A  158A  	fcall	___bmul
  3363  0D05  3E92               	addlw	(low ((_ssd_data| (0+256)+2)))& (0+255)
  3364  0D06  0084               	movwf	4
  3365  0D07  1783               	bsf	3,7	;select IRP bank3
  3366  0D08  0800               	movf	0,w
  3367  0D09  1283               	bcf	3,5	;RP0=0, select bank0
  3368  0D0A  1303               	bcf	3,6	;RP1=0, select bank0
  3369  0D0B  00B6               	movwf	??_ssd_display+2
  3370  0D0C  0A84               	incf	4,f
  3371  0D0D  0800               	movf	0,w
  3372  0D0E  00B7               	movwf	??_ssd_display+3
  3373  0D0F  0836               	movf	??_ssd_display+2,w
  3374  0D10  0084               	movwf	4
  3375  0D11  1783               	bsf	3,7
  3376  0D12  1C37               	btfss	??_ssd_display+3,0
  3377  0D13  1383               	bcf	3,7
  3378  0D14  0834               	movf	??_ssd_display,w
  3379  0D15  0080               	movwf	0
  3380                           
  3381                           ;SSD.c: 112:     if(ssd == ssd_hour_units) {
  3382  0D16  3002               	movlw	2
  3383  0D17  0638               	xorwf	ssd_display@ssd,w
  3384  0D18  1D03               	btfss	3,2
  3385  0D19  0008               	return
  3386                           
  3387                           ;SSD.c: 113:         dot_display(dot_state);
  3388  0D1A  0852               	movf	_dot_state,w
  3389  0D1B  120A  158A  2407   	fcall	_dot_display
  3390                           
  3391                           ;SSD.c: 114:     }else {
  3392  0D1E  0008               	return
  3393  0D1F                     __end_of_ssd_display:	
  3394                           
  3395                           	psect	text16
  3396  0C07                     __ptext16:	
  3397 ;; *************** function _dot_display *****************
  3398 ;; Defined at:
  3399 ;;		line 134 in file "SSD.c"
  3400 ;; Parameters:    Size  Location     Type
  3401 ;;  state           1    wreg     enum E21
  3402 ;; Auto vars:     Size  Location     Type
  3403 ;;  state           1   17[BANK0 ] enum E21
  3404 ;; Return value:  Size  Location     Type
  3405 ;;                  1    wreg      void 
  3406 ;; Registers used:
  3407 ;;		wreg, fsr0l, fsr0h, status,2, status,0
  3408 ;; Tracked objects:
  3409 ;;		On entry : 0/0
  3410 ;;		On exit  : 0/0
  3411 ;;		Unchanged: 0/0
  3412 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3413 ;;      Params:         0       0       0       0       0
  3414 ;;      Locals:         0       1       0       0       0
  3415 ;;      Temps:          0       2       0       0       0
  3416 ;;      Totals:         0       3       0       0       0
  3417 ;;Total ram usage:        3 bytes
  3418 ;; Hardware stack levels used:    1
  3419 ;; Hardware stack levels required when called:    5
  3420 ;; This function calls:
  3421 ;;		Nothing
  3422 ;; This function is called by:
  3423 ;;		_ssd_display
  3424 ;; This function uses a non-reentrant model
  3425 ;;
  3426                           
  3427                           
  3428                           ;psect for function _dot_display
  3429  0C07                     _dot_display:	
  3430                           
  3431                           ;incstack = 0
  3432 ;; hardware stack exceeded
  3433                           ; Regs used in _dot_display: [wreg-fsr0h+status,2+status,0]
  3434                           ;dot_display@state stored from wreg
  3435  0C07  1283               	bcf	3,5	;RP0=0, select bank0
  3436  0C08  1303               	bcf	3,6	;RP1=0, select bank0
  3437  0C09  00B1               	movwf	dot_display@state
  3438                           
  3439                           ;SSD.c: 135:     (((*(ssd_data[ssd_hour_units].data_value_reg)) = ((*(ssd_data[ssd_hour_
      +                          units].data_value_reg) & (~(1 << ((7))))) | (state << ((7))))));
  3440  0C0A  0831               	movf	dot_display@state,w
  3441  0C0B  00AF               	movwf	??_dot_display
  3442  0C0C  3007               	movlw	7
  3443  0C0D                     u1315:	
  3444  0C0D  1003               	clrc
  3445  0C0E  0DAF               	rlf	??_dot_display,f
  3446  0C0F  3EFF               	addlw	-1
  3447  0C10  1D03               	skipz
  3448  0C11  2C0D               	goto	u1315
  3449  0C12  1683               	bsf	3,5	;RP0=1, select bank3
  3450  0C13  1703               	bsf	3,6	;RP1=1, select bank3
  3451  0C14  0826               	movf	(low ((_ssd_data| (0+256)+22)))^(0+128),w
  3452  0C15  0084               	movwf	4
  3453  0C16  1783               	bsf	3,7
  3454  0C17  1C27               	btfss	((low ((_ssd_data| (0+256)+22))+1))^(0+128),0
  3455  0C18  1383               	bcf	3,7
  3456  0C19  0800               	movf	0,w
  3457  0C1A  397F               	andlw	127
  3458  0C1B  1283               	bcf	3,5	;RP0=0, select bank0
  3459  0C1C  1303               	bcf	3,6	;RP1=0, select bank0
  3460  0C1D  042F               	iorwf	??_dot_display,w
  3461  0C1E  00B0               	movwf	??_dot_display+1
  3462  0C1F  1683               	bsf	3,5	;RP0=1, select bank3
  3463  0C20  1703               	bsf	3,6	;RP1=1, select bank3
  3464  0C21  0826               	movf	(low ((_ssd_data| (0+256)+22)))^(0+128),w
  3465  0C22  0084               	movwf	4
  3466  0C23  1783               	bsf	3,7
  3467  0C24  1C27               	btfss	((low ((_ssd_data| (0+256)+22))+1))^(0+128),0
  3468  0C25  1383               	bcf	3,7
  3469  0C26  1283               	bcf	3,5	;RP0=0, select bank0
  3470  0C27  1303               	bcf	3,6	;RP1=0, select bank0
  3471  0C28  0830               	movf	??_dot_display+1,w
  3472  0C29  0080               	movwf	0
  3473  0C2A  0008               	return
  3474  0C2B                     __end_of_dot_display:	
  3475                           
  3476                           	psect	text17
  3477  0ADB                     __ptext17:	
  3478 ;; *************** function ___bmul *****************
  3479 ;; Defined at:
  3480 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\common\Umul8.c"
  3481 ;; Parameters:    Size  Location     Type
  3482 ;;  multiplier      1    wreg     unsigned char 
  3483 ;;  multiplicand    1   15[BANK0 ] unsigned char 
  3484 ;; Auto vars:     Size  Location     Type
  3485 ;;  multiplier      1   18[BANK0 ] unsigned char 
  3486 ;;  product         1   17[BANK0 ] unsigned char 
  3487 ;; Return value:  Size  Location     Type
  3488 ;;                  1    wreg      unsigned char 
  3489 ;; Registers used:
  3490 ;;		wreg, status,2, status,0
  3491 ;; Tracked objects:
  3492 ;;		On entry : 0/0
  3493 ;;		On exit  : 0/0
  3494 ;;		Unchanged: 0/0
  3495 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3496 ;;      Params:         0       1       0       0       0
  3497 ;;      Locals:         0       2       0       0       0
  3498 ;;      Temps:          0       1       0       0       0
  3499 ;;      Totals:         0       4       0       0       0
  3500 ;;Total ram usage:        4 bytes
  3501 ;; Hardware stack levels used:    1
  3502 ;; Hardware stack levels required when called:    5
  3503 ;; This function calls:
  3504 ;;		Nothing
  3505 ;; This function is called by:
  3506 ;;		_ssd_init
  3507 ;;		_ssd_setSymbol
  3508 ;;		_ssd_getSymbol
  3509 ;;		_ssd_update
  3510 ;;		_ssd_display
  3511 ;;		_ssd_on
  3512 ;;		_ssd_off
  3513 ;;		i1_ssd_setSymbol
  3514 ;;		i1_ssd_display
  3515 ;; This function uses a non-reentrant model
  3516 ;;
  3517                           
  3518                           
  3519                           ;psect for function ___bmul
  3520  0ADB                     ___bmul:	
  3521                           
  3522                           ;incstack = 0
  3523                           ; Regs used in ___bmul: [wreg+status,2+status,0]
  3524                           ;___bmul@multiplier stored from wreg
  3525  0ADB  1283               	bcf	3,5	;RP0=0, select bank0
  3526  0ADC  1303               	bcf	3,6	;RP1=0, select bank0
  3527  0ADD  00B2               	movwf	___bmul@multiplier
  3528  0ADE  01B1               	clrf	___bmul@product
  3529  0ADF                     l1909:	
  3530  0ADF  1C32               	btfss	___bmul@multiplier,0
  3531  0AE0  2AE5               	goto	l1913
  3532  0AE1  082F               	movf	___bmul@multiplicand,w
  3533  0AE2  00B0               	movwf	??___bmul
  3534  0AE3  0830               	movf	??___bmul,w
  3535  0AE4  07B1               	addwf	___bmul@product,f
  3536  0AE5                     l1913:	
  3537  0AE5  1003               	clrc
  3538  0AE6  0DAF               	rlf	___bmul@multiplicand,f
  3539  0AE7  1003               	clrc
  3540  0AE8  0CB2               	rrf	___bmul@multiplier,f
  3541  0AE9  0832               	movf	___bmul@multiplier,w
  3542  0AEA  1D03               	btfss	3,2
  3543  0AEB  2ADF               	goto	l1909
  3544  0AEC  0831               	movf	___bmul@product,w
  3545  0AED  0008               	return
  3546  0AEE                     __end_of___bmul:	
  3547                           
  3548                           	psect	text18
  3549  0A77                     __ptext18:	
  3550 ;; *************** function _ssdDot_setState *****************
  3551 ;; Defined at:
  3552 ;;		line 127 in file "SSD.c"
  3553 ;; Parameters:    Size  Location     Type
  3554 ;;  state           1    wreg     enum E21
  3555 ;; Auto vars:     Size  Location     Type
  3556 ;;  state           1   16[BANK0 ] enum E21
  3557 ;; Return value:  Size  Location     Type
  3558 ;;                  1    wreg      void 
  3559 ;; Registers used:
  3560 ;;		wreg
  3561 ;; Tracked objects:
  3562 ;;		On entry : 0/0
  3563 ;;		On exit  : 0/0
  3564 ;;		Unchanged: 0/0
  3565 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3566 ;;      Params:         0       0       0       0       0
  3567 ;;      Locals:         0       1       0       0       0
  3568 ;;      Temps:          0       1       0       0       0
  3569 ;;      Totals:         0       2       0       0       0
  3570 ;;Total ram usage:        2 bytes
  3571 ;; Hardware stack levels used:    1
  3572 ;; Hardware stack levels required when called:    5
  3573 ;; This function calls:
  3574 ;;		Nothing
  3575 ;; This function is called by:
  3576 ;;		_display_init
  3577 ;; This function uses a non-reentrant model
  3578 ;;
  3579                           
  3580                           
  3581                           ;psect for function _ssdDot_setState
  3582  0A77                     _ssdDot_setState:	
  3583                           
  3584                           ;incstack = 0
  3585                           ; Regs used in _ssdDot_setState: [wreg]
  3586                           ;ssdDot_setState@state stored from wreg
  3587  0A77  1283               	bcf	3,5	;RP0=0, select bank0
  3588  0A78  1303               	bcf	3,6	;RP1=0, select bank0
  3589  0A79  00B0               	movwf	ssdDot_setState@state
  3590                           
  3591                           ;SSD.c: 128:     dot_state = state;
  3592  0A7A  0830               	movf	ssdDot_setState@state,w
  3593  0A7B  00AF               	movwf	??_ssdDot_setState
  3594  0A7C  082F               	movf	??_ssdDot_setState,w
  3595  0A7D  00D2               	movwf	_dot_state
  3596  0A7E  0008               	return
  3597  0A7F                     __end_of_ssdDot_setState:	
  3598                           
  3599                           	psect	text19
  3600  0B44                     __ptext19:	
  3601 ;; *************** function _get_time *****************
  3602 ;; Defined at:
  3603 ;;		line 43 in file "TIME.c"
  3604 ;; Parameters:    Size  Location     Type
  3605 ;;  time            1    wreg     PTR struct .
  3606 ;;		 -> display_time(3), 
  3607 ;; Auto vars:     Size  Location     Type
  3608 ;;  time            1   16[BANK0 ] PTR struct .
  3609 ;;		 -> display_time(3), 
  3610 ;; Return value:  Size  Location     Type
  3611 ;;                  1    wreg      void 
  3612 ;; Registers used:
  3613 ;;		wreg, fsr0l, fsr0h, status,2, status,0
  3614 ;; Tracked objects:
  3615 ;;		On entry : 0/0
  3616 ;;		On exit  : 0/0
  3617 ;;		Unchanged: 0/0
  3618 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3619 ;;      Params:         0       0       0       0       0
  3620 ;;      Locals:         0       1       0       0       0
  3621 ;;      Temps:          0       1       0       0       0
  3622 ;;      Totals:         0       2       0       0       0
  3623 ;;Total ram usage:        2 bytes
  3624 ;; Hardware stack levels used:    1
  3625 ;; Hardware stack levels required when called:    5
  3626 ;; This function calls:
  3627 ;;		Nothing
  3628 ;; This function is called by:
  3629 ;;		_display_init
  3630 ;; This function uses a non-reentrant model
  3631 ;;
  3632                           
  3633                           
  3634                           ;psect for function _get_time
  3635  0B44                     _get_time:	
  3636                           
  3637                           ;incstack = 0
  3638                           ; Regs used in _get_time: [wreg-fsr0h+status,2+status,0]
  3639                           ;get_time@time stored from wreg
  3640  0B44  1283               	bcf	3,5	;RP0=0, select bank0
  3641  0B45  1303               	bcf	3,6	;RP1=0, select bank0
  3642  0B46  00B0               	movwf	get_time@time
  3643                           
  3644                           ;TIME.c: 47:     time->secounds = current_time.secounds;
  3645  0B47  084B               	movf	_current_time,w
  3646  0B48  00AF               	movwf	??_get_time
  3647  0B49  0830               	movf	get_time@time,w
  3648  0B4A  0084               	movwf	4
  3649  0B4B  082F               	movf	??_get_time,w
  3650  0B4C  1383               	bcf	3,7	;select IRP bank0
  3651  0B4D  0080               	movwf	0
  3652                           
  3653                           ;TIME.c: 49:     time->minutes = current_time.minutes;
  3654  0B4E  084C               	movf	_current_time+1,w
  3655  0B4F  00AF               	movwf	??_get_time
  3656  0B50  0A30               	incf	get_time@time,w
  3657  0B51  0084               	movwf	4
  3658  0B52  082F               	movf	??_get_time,w
  3659  0B53  0080               	movwf	0
  3660                           
  3661                           ;TIME.c: 51:     time->hours = current_time.hours;
  3662  0B54  084D               	movf	_current_time+2,w
  3663  0B55  00AF               	movwf	??_get_time
  3664  0B56  0830               	movf	get_time@time,w
  3665  0B57  3E02               	addlw	2
  3666  0B58  0084               	movwf	4
  3667  0B59  082F               	movf	??_get_time,w
  3668  0B5A  0080               	movwf	0
  3669  0B5B  0008               	return
  3670  0B5C                     __end_of_get_time:	
  3671                           
  3672                           	psect	text20
  3673  07B1                     __ptext20:	
  3674 ;; *************** function ___awmod *****************
  3675 ;; Defined at:
  3676 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\common\awmod.c"
  3677 ;; Parameters:    Size  Location     Type
  3678 ;;  divisor         2   15[BANK0 ] int 
  3679 ;;  dividend        2   17[BANK0 ] int 
  3680 ;; Auto vars:     Size  Location     Type
  3681 ;;  sign            1   21[BANK0 ] unsigned char 
  3682 ;;  counter         1   20[BANK0 ] unsigned char 
  3683 ;; Return value:  Size  Location     Type
  3684 ;;                  2   15[BANK0 ] int 
  3685 ;; Registers used:
  3686 ;;		wreg, status,2, status,0
  3687 ;; Tracked objects:
  3688 ;;		On entry : 0/0
  3689 ;;		On exit  : 0/0
  3690 ;;		Unchanged: 0/0
  3691 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3692 ;;      Params:         0       4       0       0       0
  3693 ;;      Locals:         0       2       0       0       0
  3694 ;;      Temps:          0       1       0       0       0
  3695 ;;      Totals:         0       7       0       0       0
  3696 ;;Total ram usage:        7 bytes
  3697 ;; Hardware stack levels used:    1
  3698 ;; Hardware stack levels required when called:    5
  3699 ;; This function calls:
  3700 ;;		Nothing
  3701 ;; This function is called by:
  3702 ;;		_display_init
  3703 ;; This function uses a non-reentrant model
  3704 ;;
  3705                           
  3706                           
  3707                           ;psect for function ___awmod
  3708  07B1                     ___awmod:	
  3709                           
  3710                           ;incstack = 0
  3711                           ; Regs used in ___awmod: [wreg+status,2+status,0]
  3712  07B1  1283               	bcf	3,5	;RP0=0, select bank0
  3713  07B2  1303               	bcf	3,6	;RP1=0, select bank0
  3714  07B3  01B5               	clrf	___awmod@sign
  3715  07B4  1FB2               	btfss	___awmod@dividend+1,7
  3716  07B5  2FBD               	goto	l2321
  3717  07B6  09B1               	comf	___awmod@dividend,f
  3718  07B7  09B2               	comf	___awmod@dividend+1,f
  3719  07B8  0AB1               	incf	___awmod@dividend,f
  3720  07B9  1903               	skipnz
  3721  07BA  0AB2               	incf	___awmod@dividend+1,f
  3722  07BB  01B5               	clrf	___awmod@sign
  3723  07BC  0AB5               	incf	___awmod@sign,f
  3724  07BD                     l2321:	
  3725  07BD  1FB0               	btfss	___awmod@divisor+1,7
  3726  07BE  2FC4               	goto	l2325
  3727  07BF  09AF               	comf	___awmod@divisor,f
  3728  07C0  09B0               	comf	___awmod@divisor+1,f
  3729  07C1  0AAF               	incf	___awmod@divisor,f
  3730  07C2  1903               	skipnz
  3731  07C3  0AB0               	incf	___awmod@divisor+1,f
  3732  07C4                     l2325:	
  3733  07C4  082F               	movf	___awmod@divisor,w
  3734  07C5  0430               	iorwf	___awmod@divisor+1,w
  3735  07C6  1903               	btfsc	3,2
  3736  07C7  2FF1               	goto	l2343
  3737  07C8  01B4               	clrf	___awmod@counter
  3738  07C9  0AB4               	incf	___awmod@counter,f
  3739  07CA                     l2333:	
  3740  07CA  1BB0               	btfsc	___awmod@divisor+1,7
  3741  07CB  2FD8               	goto	l2335
  3742  07CC  3001               	movlw	1
  3743  07CD                     u2005:	
  3744  07CD  1003               	clrc
  3745  07CE  0DAF               	rlf	___awmod@divisor,f
  3746  07CF  0DB0               	rlf	___awmod@divisor+1,f
  3747  07D0  3EFF               	addlw	-1
  3748  07D1  1D03               	skipz
  3749  07D2  2FCD               	goto	u2005
  3750  07D3  3001               	movlw	1
  3751  07D4  00B3               	movwf	??___awmod
  3752  07D5  0833               	movf	??___awmod,w
  3753  07D6  07B4               	addwf	___awmod@counter,f
  3754  07D7  2FCA               	goto	l2333
  3755  07D8                     l2335:	
  3756  07D8  0830               	movf	___awmod@divisor+1,w
  3757  07D9  0232               	subwf	___awmod@dividend+1,w
  3758  07DA  1D03               	skipz
  3759  07DB  2FDE               	goto	u2025
  3760  07DC  082F               	movf	___awmod@divisor,w
  3761  07DD  0231               	subwf	___awmod@dividend,w
  3762  07DE                     u2025:	
  3763  07DE  1C03               	skipc
  3764  07DF  2FE6               	goto	l2339
  3765  07E0  082F               	movf	___awmod@divisor,w
  3766  07E1  02B1               	subwf	___awmod@dividend,f
  3767  07E2  0830               	movf	___awmod@divisor+1,w
  3768  07E3  1C03               	skipc
  3769  07E4  03B2               	decf	___awmod@dividend+1,f
  3770  07E5  02B2               	subwf	___awmod@dividend+1,f
  3771  07E6                     l2339:	
  3772  07E6  3001               	movlw	1
  3773  07E7                     u2035:	
  3774  07E7  1003               	clrc
  3775  07E8  0CB0               	rrf	___awmod@divisor+1,f
  3776  07E9  0CAF               	rrf	___awmod@divisor,f
  3777  07EA  3EFF               	addlw	-1
  3778  07EB  1D03               	skipz
  3779  07EC  2FE7               	goto	u2035
  3780  07ED  3001               	movlw	1
  3781  07EE  02B4               	subwf	___awmod@counter,f
  3782  07EF  1D03               	btfss	3,2
  3783  07F0  2FD8               	goto	l2335
  3784  07F1                     l2343:	
  3785  07F1  0835               	movf	___awmod@sign,w
  3786  07F2  1903               	btfsc	3,2
  3787  07F3  2FF9               	goto	l2347
  3788  07F4  09B1               	comf	___awmod@dividend,f
  3789  07F5  09B2               	comf	___awmod@dividend+1,f
  3790  07F6  0AB1               	incf	___awmod@dividend,f
  3791  07F7  1903               	skipnz
  3792  07F8  0AB2               	incf	___awmod@dividend+1,f
  3793  07F9                     l2347:	
  3794  07F9  0832               	movf	___awmod@dividend+1,w
  3795  07FA  00B0               	movwf	?___awmod+1
  3796  07FB  0831               	movf	___awmod@dividend,w
  3797  07FC  00AF               	movwf	?___awmod
  3798  07FD  0008               	return
  3799  07FE                     __end_of___awmod:	
  3800                           
  3801                           	psect	text21
  3802  0F46                     __ptext21:	
  3803 ;; *************** function ___awdiv *****************
  3804 ;; Defined at:
  3805 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\common\awdiv.c"
  3806 ;; Parameters:    Size  Location     Type
  3807 ;;  divisor         2   15[BANK0 ] int 
  3808 ;;  dividend        2   17[BANK0 ] int 
  3809 ;; Auto vars:     Size  Location     Type
  3810 ;;  quotient        2   22[BANK0 ] int 
  3811 ;;  sign            1   21[BANK0 ] unsigned char 
  3812 ;;  counter         1   20[BANK0 ] unsigned char 
  3813 ;; Return value:  Size  Location     Type
  3814 ;;                  2   15[BANK0 ] int 
  3815 ;; Registers used:
  3816 ;;		wreg, status,2, status,0
  3817 ;; Tracked objects:
  3818 ;;		On entry : 0/0
  3819 ;;		On exit  : 0/0
  3820 ;;		Unchanged: 0/0
  3821 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3822 ;;      Params:         0       4       0       0       0
  3823 ;;      Locals:         0       4       0       0       0
  3824 ;;      Temps:          0       1       0       0       0
  3825 ;;      Totals:         0       9       0       0       0
  3826 ;;Total ram usage:        9 bytes
  3827 ;; Hardware stack levels used:    1
  3828 ;; Hardware stack levels required when called:    5
  3829 ;; This function calls:
  3830 ;;		Nothing
  3831 ;; This function is called by:
  3832 ;;		_display_init
  3833 ;; This function uses a non-reentrant model
  3834 ;;
  3835                           
  3836                           
  3837                           ;psect for function ___awdiv
  3838  0F46                     ___awdiv:	
  3839                           
  3840                           ;incstack = 0
  3841                           ; Regs used in ___awdiv: [wreg+status,2+status,0]
  3842  0F46  1283               	bcf	3,5	;RP0=0, select bank0
  3843  0F47  1303               	bcf	3,6	;RP1=0, select bank0
  3844  0F48  01B5               	clrf	___awdiv@sign
  3845  0F49  1FB0               	btfss	___awdiv@divisor+1,7
  3846  0F4A  2F52               	goto	l2277
  3847  0F4B  09AF               	comf	___awdiv@divisor,f
  3848  0F4C  09B0               	comf	___awdiv@divisor+1,f
  3849  0F4D  0AAF               	incf	___awdiv@divisor,f
  3850  0F4E  1903               	skipnz
  3851  0F4F  0AB0               	incf	___awdiv@divisor+1,f
  3852  0F50  01B5               	clrf	___awdiv@sign
  3853  0F51  0AB5               	incf	___awdiv@sign,f
  3854  0F52                     l2277:	
  3855  0F52  1FB2               	btfss	___awdiv@dividend+1,7
  3856  0F53  2F5D               	goto	l2283
  3857  0F54  09B1               	comf	___awdiv@dividend,f
  3858  0F55  09B2               	comf	___awdiv@dividend+1,f
  3859  0F56  0AB1               	incf	___awdiv@dividend,f
  3860  0F57  1903               	skipnz
  3861  0F58  0AB2               	incf	___awdiv@dividend+1,f
  3862  0F59  3001               	movlw	1
  3863  0F5A  00B3               	movwf	??___awdiv
  3864  0F5B  0833               	movf	??___awdiv,w
  3865  0F5C  06B5               	xorwf	___awdiv@sign,f
  3866  0F5D                     l2283:	
  3867  0F5D  01B6               	clrf	___awdiv@quotient
  3868  0F5E  01B7               	clrf	___awdiv@quotient+1
  3869  0F5F  082F               	movf	___awdiv@divisor,w
  3870  0F60  0430               	iorwf	___awdiv@divisor+1,w
  3871  0F61  1903               	btfsc	3,2
  3872  0F62  2F94               	goto	l2305
  3873  0F63  01B4               	clrf	___awdiv@counter
  3874  0F64  0AB4               	incf	___awdiv@counter,f
  3875  0F65                     l2293:	
  3876  0F65  1BB0               	btfsc	___awdiv@divisor+1,7
  3877  0F66  2F73               	goto	l2295
  3878  0F67  3001               	movlw	1
  3879  0F68                     u1905:	
  3880  0F68  1003               	clrc
  3881  0F69  0DAF               	rlf	___awdiv@divisor,f
  3882  0F6A  0DB0               	rlf	___awdiv@divisor+1,f
  3883  0F6B  3EFF               	addlw	-1
  3884  0F6C  1D03               	skipz
  3885  0F6D  2F68               	goto	u1905
  3886  0F6E  3001               	movlw	1
  3887  0F6F  00B3               	movwf	??___awdiv
  3888  0F70  0833               	movf	??___awdiv,w
  3889  0F71  07B4               	addwf	___awdiv@counter,f
  3890  0F72  2F65               	goto	l2293
  3891  0F73                     l2295:	
  3892  0F73  3001               	movlw	1
  3893  0F74                     u1925:	
  3894  0F74  1003               	clrc
  3895  0F75  0DB6               	rlf	___awdiv@quotient,f
  3896  0F76  0DB7               	rlf	___awdiv@quotient+1,f
  3897  0F77  3EFF               	addlw	-1
  3898  0F78  1D03               	skipz
  3899  0F79  2F74               	goto	u1925
  3900  0F7A  0830               	movf	___awdiv@divisor+1,w
  3901  0F7B  0232               	subwf	___awdiv@dividend+1,w
  3902  0F7C  1D03               	skipz
  3903  0F7D  2F80               	goto	u1935
  3904  0F7E  082F               	movf	___awdiv@divisor,w
  3905  0F7F  0231               	subwf	___awdiv@dividend,w
  3906  0F80                     u1935:	
  3907  0F80  1C03               	skipc
  3908  0F81  2F89               	goto	l2301
  3909  0F82  082F               	movf	___awdiv@divisor,w
  3910  0F83  02B1               	subwf	___awdiv@dividend,f
  3911  0F84  0830               	movf	___awdiv@divisor+1,w
  3912  0F85  1C03               	skipc
  3913  0F86  03B2               	decf	___awdiv@dividend+1,f
  3914  0F87  02B2               	subwf	___awdiv@dividend+1,f
  3915  0F88  1436               	bsf	___awdiv@quotient,0
  3916  0F89                     l2301:	
  3917  0F89  3001               	movlw	1
  3918  0F8A                     u1945:	
  3919  0F8A  1003               	clrc
  3920  0F8B  0CB0               	rrf	___awdiv@divisor+1,f
  3921  0F8C  0CAF               	rrf	___awdiv@divisor,f
  3922  0F8D  3EFF               	addlw	-1
  3923  0F8E  1D03               	skipz
  3924  0F8F  2F8A               	goto	u1945
  3925  0F90  3001               	movlw	1
  3926  0F91  02B4               	subwf	___awdiv@counter,f
  3927  0F92  1D03               	btfss	3,2
  3928  0F93  2F73               	goto	l2295
  3929  0F94                     l2305:	
  3930  0F94  0835               	movf	___awdiv@sign,w
  3931  0F95  1903               	btfsc	3,2
  3932  0F96  2F9C               	goto	l2309
  3933  0F97  09B6               	comf	___awdiv@quotient,f
  3934  0F98  09B7               	comf	___awdiv@quotient+1,f
  3935  0F99  0AB6               	incf	___awdiv@quotient,f
  3936  0F9A  1903               	skipnz
  3937  0F9B  0AB7               	incf	___awdiv@quotient+1,f
  3938  0F9C                     l2309:	
  3939  0F9C  0837               	movf	___awdiv@quotient+1,w
  3940  0F9D  00B0               	movwf	?___awdiv+1
  3941  0F9E  0836               	movf	___awdiv@quotient,w
  3942  0F9F  00AF               	movwf	?___awdiv
  3943  0FA0  0008               	return
  3944  0FA1                     __end_of___awdiv:	
  3945                           
  3946                           	psect	text22
  3947  0C9F                     __ptext22:	
  3948 ;; *************** function _APP_UPDATE *****************
  3949 ;; Defined at:
  3950 ;;		line 39 in file "my_stop_watch.c"
  3951 ;; Parameters:    Size  Location     Type
  3952 ;;		None
  3953 ;; Auto vars:     Size  Location     Type
  3954 ;;		None
  3955 ;; Return value:  Size  Location     Type
  3956 ;;                  1    wreg      void 
  3957 ;; Registers used:
  3958 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  3959 ;; Tracked objects:
  3960 ;;		On entry : 0/0
  3961 ;;		On exit  : 0/0
  3962 ;;		Unchanged: 0/0
  3963 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3964 ;;      Params:         0       0       0       0       0
  3965 ;;      Locals:         0       0       0       0       0
  3966 ;;      Temps:          0       3       0       0       0
  3967 ;;      Totals:         0       3       0       0       0
  3968 ;;Total ram usage:        3 bytes
  3969 ;; Hardware stack levels used:    1
  3970 ;; Hardware stack levels required when called:    4
  3971 ;; This function calls:
  3972 ;;		_display_update
  3973 ;;		_ssd_update
  3974 ;;		_switch_update
  3975 ;;		_time_update
  3976 ;;		i1_timer0_reload
  3977 ;; This function is called by:
  3978 ;;		Interrupt level 1
  3979 ;; This function uses a non-reentrant model
  3980 ;;
  3981                           
  3982                           
  3983                           ;psect for function _APP_UPDATE
  3984  0C9F                     _APP_UPDATE:	
  3985                           
  3986                           ;my_stop_watch.c: 41:     if((((*((volatile tRegister *)(0x0B))).Bits.BIT2))){
  3987  0C9F  1D0B               	btfss	11,2	;volatile
  3988  0CA0  2CBC               	goto	i1l71
  3989                           
  3990                           ;my_stop_watch.c: 42:         (((*((volatile tRegister *)(0x0B))).Bits.BIT2)) = (0);
  3991  0CA1  110B               	bcf	11,2	;volatile
  3992                           
  3993                           ;my_stop_watch.c: 43:         timer0_reload(216);
  3994  0CA2  30D8               	movlw	216
  3995  0CA3  120A  158A  226F  120A  158A  	fcall	i1_timer0_reload
  3996                           
  3997                           ;my_stop_watch.c: 45:         ssd_update();
  3998  0CA8  120A  158A  26A1  120A  158A  	fcall	_ssd_update
  3999                           
  4000                           ;my_stop_watch.c: 46:         switch_update();
  4001  0CAD  120A  118A  204B  120A  158A  	fcall	_switch_update
  4002                           
  4003                           ;my_stop_watch.c: 47:         time_update();
  4004  0CB2  120A  118A  2666  120A  158A  	fcall	_time_update
  4005                           
  4006                           ;my_stop_watch.c: 48:         display_update();
  4007  0CB7  120A  158A  260C  120A  158A  	fcall	_display_update
  4008  0CBC                     i1l71:	
  4009  0CBC  1283               	bcf	3,5	;RP0=0, select bank0
  4010  0CBD  1303               	bcf	3,6	;RP1=0, select bank0
  4011  0CBE  082E               	movf	??_APP_UPDATE+2,w
  4012  0CBF  008A               	movwf	10
  4013  0CC0  082D               	movf	??_APP_UPDATE+1,w
  4014  0CC1  0084               	movwf	4
  4015  0CC2  0E2C               	swapf	??_APP_UPDATE^0,w
  4016  0CC3  0083               	movwf	3
  4017  0CC4  0EFE               	swapf	126,f
  4018  0CC5  0E7E               	swapf	126,w
  4019  0CC6  0009               	retfie
  4020  0CC7                     __end_of_APP_UPDATE:	
  4021                           
  4022                           	psect	intentry
  4023  0004                     __pintentry:	
  4024                           ;incstack = 0
  4025 ;; hardware stack exceeded
  4026                           ; Regs used in _APP_UPDATE: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  4027                           
  4028  0004                     interrupt_function:	
  4029  007E                     saved_w	set	btemp
  4030  0004  00FE               	movwf	btemp
  4031  0005  0E03               	swapf	3,w
  4032  0006  1283               	bcf	3,5	;RP0=0, select bank0
  4033  0007  1303               	bcf	3,6	;RP1=0, select bank0
  4034  0008  00AC               	movwf	??_APP_UPDATE
  4035  0009  0804               	movf	4,w
  4036  000A  00AD               	movwf	??_APP_UPDATE+1
  4037  000B  080A               	movf	10,w
  4038  000C  00AE               	movwf	??_APP_UPDATE+2
  4039  000D  120A  158A  2C9F   	ljmp	_APP_UPDATE
  4040                           
  4041                           	psect	text23
  4042  0A6F                     __ptext23:	
  4043 ;; *************** function i1_timer0_reload *****************
  4044 ;; Defined at:
  4045 ;;		line 31 in file "TIMER0.c"
  4046 ;; Parameters:    Size  Location     Type
  4047 ;;  val             1    wreg     unsigned char 
  4048 ;; Auto vars:     Size  Location     Type
  4049 ;;  val             1    1[COMMON] unsigned char 
  4050 ;; Return value:  Size  Location     Type
  4051 ;;                  1    wreg      void 
  4052 ;; Registers used:
  4053 ;;		wreg
  4054 ;; Tracked objects:
  4055 ;;		On entry : 0/0
  4056 ;;		On exit  : 0/0
  4057 ;;		Unchanged: 0/0
  4058 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4059 ;;      Params:         0       0       0       0       0
  4060 ;;      Locals:         1       0       0       0       0
  4061 ;;      Temps:          1       0       0       0       0
  4062 ;;      Totals:         2       0       0       0       0
  4063 ;;Total ram usage:        2 bytes
  4064 ;; Hardware stack levels used:    1
  4065 ;; This function calls:
  4066 ;;		Nothing
  4067 ;; This function is called by:
  4068 ;;		_APP_UPDATE
  4069 ;; This function uses a non-reentrant model
  4070 ;;
  4071                           
  4072                           
  4073                           ;psect for function i1_timer0_reload
  4074  0A6F                     i1_timer0_reload:	
  4075                           
  4076                           ;incstack = 0
  4077                           ; Regs used in i1_timer0_reload: [wreg]
  4078                           ;i1timer0_reload@val stored from wreg
  4079  0A6F  00F1               	movwf	i1timer0_reload@val
  4080                           
  4081                           ;TIMER0.c: 33:     ((*((volatile tRegister *)(0x01))).Reg) = val;
  4082  0A70  0871               	movf	i1timer0_reload@val,w
  4083  0A71  00F0               	movwf	??i1_timer0_reload
  4084  0A72  0870               	movf	??i1_timer0_reload,w
  4085  0A73  1283               	bcf	3,5	;RP0=0, select bank0
  4086  0A74  1303               	bcf	3,6	;RP1=0, select bank0
  4087  0A75  0081               	movwf	1	;volatile
  4088  0A76  0008               	return
  4089  0A77                     __end_ofi1_timer0_reload:	
  4090                           
  4091                           	psect	text24
  4092  0666                     __ptext24:	
  4093 ;; *************** function _time_update *****************
  4094 ;; Defined at:
  4095 ;;		line 60 in file "TIME.c"
  4096 ;; Parameters:    Size  Location     Type
  4097 ;;		None
  4098 ;; Auto vars:     Size  Location     Type
  4099 ;;  index           1   12[COMMON] unsigned char 
  4100 ;; Return value:  Size  Location     Type
  4101 ;;                  1    wreg      void 
  4102 ;; Registers used:
  4103 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  4104 ;; Tracked objects:
  4105 ;;		On entry : 0/0
  4106 ;;		On exit  : 0/0
  4107 ;;		Unchanged: 0/0
  4108 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4109 ;;      Params:         0       0       0       0       0
  4110 ;;      Locals:         1       0       0       0       0
  4111 ;;      Temps:          2       0       0       0       0
  4112 ;;      Totals:         3       0       0       0       0
  4113 ;;Total ram usage:        3 bytes
  4114 ;; Hardware stack levels used:    1
  4115 ;; Hardware stack levels required when called:    2
  4116 ;; This function calls:
  4117 ;;		_sw_minus_handler
  4118 ;;		_sw_plus_handler
  4119 ;;		_sw_setting_handler
  4120 ;;		_switch_getState
  4121 ;;		_update_current_time
  4122 ;; This function is called by:
  4123 ;;		_APP_UPDATE
  4124 ;; This function uses a non-reentrant model
  4125 ;;
  4126                           
  4127                           
  4128                           ;psect for function _time_update
  4129  0666                     _time_update:	
  4130                           
  4131                           ;TIME.c: 62:     static tByte current_period = (0);;TIME.c: 66:     current_period = cur
      +                          rent_period + (5);
  4132                           
  4133                           ;incstack = 0
  4134                           ; Regs used in _time_update: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  4135  0666  1283               	bcf	3,5	;RP0=0, select bank0
  4136  0667  1303               	bcf	3,6	;RP1=0, select bank0
  4137  0668  084F               	movf	time_update@current_period,w
  4138  0669  3E05               	addlw	5
  4139  066A  00FA               	movwf	??_time_update
  4140  066B  087A               	movf	??_time_update,w
  4141  066C  00CF               	movwf	time_update@current_period
  4142                           
  4143                           ;TIME.c: 68:     current_sec_period = current_sec_period + (5);
  4144  066D  1683               	bsf	3,5	;RP0=1, select bank1
  4145  066E  1303               	bcf	3,6	;RP1=0, select bank1
  4146  066F  083C               	movf	_current_sec_period^(0+128),w
  4147  0670  3E05               	addlw	5
  4148  0671  00BC               	movwf	_current_sec_period^(0+128)
  4149  0672  083D               	movf	(_current_sec_period+1)^(0+128),w
  4150  0673  1803               	skipnc
  4151  0674  3E01               	addlw	1
  4152  0675  3E00               	addlw	0
  4153  0676  00BD               	movwf	(_current_sec_period+1)^(0+128)
  4154                           
  4155                           ;TIME.c: 72:         if (current_period == (20)){
  4156  0677  3014               	movlw	20
  4157  0678  1283               	bcf	3,5	;RP0=0, select bank0
  4158  0679  1303               	bcf	3,6	;RP1=0, select bank0
  4159  067A  064F               	xorwf	time_update@current_period,w
  4160  067B  1D03               	btfss	3,2
  4161  067C  0008               	return
  4162                           
  4163                           ;TIME.c: 76:             current_period = (0);
  4164  067D  01CF               	clrf	time_update@current_period
  4165                           
  4166                           ;TIME.c: 80:             tByte index = 0;
  4167  067E  01FC               	clrf	time_update@index
  4168                           
  4169                           ;TIME.c: 82:             for(index = sw_plus; index < (3); index++){
  4170  067F  01FC               	clrf	time_update@index
  4171  0680  2EBF               	goto	i1l2505
  4172  0681                     i1l2487:	
  4173                           
  4174                           ;TIME.c: 88:                         ((switch_getState(sw_plus) == sw_prepressed) && (cu
      +                          rrent_mode != MODE_NORMAL)) ? sw_plus_handler() : 0 ;
  4175  0681  3000               	movlw	0
  4176  0682  120A  158A  22EE  120A  118A  	fcall	_switch_getState
  4177  0687  3A01               	xorlw	1
  4178  0688  1D03               	skipz
  4179  0689  2EB7               	goto	i1l2507
  4180  068A  1283               	bcf	3,5	;RP0=0, select bank0
  4181  068B  1303               	bcf	3,6	;RP1=0, select bank0
  4182  068C  0850               	movf	_current_mode,w
  4183  068D  1903               	btfsc	3,2
  4184  068E  2EB7               	goto	i1l2507
  4185  068F  120A  158A  258F  120A  118A  	fcall	_sw_plus_handler
  4186  0694  2EB7               	goto	i1l2507
  4187  0695                     i1l2493:	
  4188                           
  4189                           ;TIME.c: 95:                         ((switch_getState(sw_minus) == sw_prepressed) && (c
      +                          urrent_mode != MODE_NORMAL)) ? sw_minus_handler() : 0 ;
  4190  0695  3001               	movlw	1
  4191  0696  120A  158A  22EE  120A  118A  	fcall	_switch_getState
  4192  069B  3A01               	xorlw	1
  4193  069C  1D03               	skipz
  4194  069D  2EB7               	goto	i1l2507
  4195  069E  1283               	bcf	3,5	;RP0=0, select bank0
  4196  069F  1303               	bcf	3,6	;RP1=0, select bank0
  4197  06A0  0850               	movf	_current_mode,w
  4198  06A1  1903               	btfsc	3,2
  4199  06A2  2EB7               	goto	i1l2507
  4200  06A3  120A  158A  2477  120A  118A  	fcall	_sw_minus_handler
  4201  06A8  2EB7               	goto	i1l2507
  4202  06A9                     i1l2499:	
  4203                           
  4204                           ;TIME.c: 102:                         (switch_getState(sw_setting) == sw_prepressed) ? s
      +                          w_setting_handler() : 0 ;
  4205  06A9  3002               	movlw	2
  4206  06AA  120A  158A  22EE  120A  118A  	fcall	_switch_getState
  4207  06AF  3A01               	xorlw	1
  4208  06B0  1D03               	skipz
  4209  06B1  2EB7               	goto	i1l2507
  4210  06B2  120A  158A  242B  120A  118A  	fcall	_sw_setting_handler
  4211  06B7                     i1l2507:	
  4212                           
  4213                           ;TIME.c: 111:             }
  4214  06B7  3001               	movlw	1
  4215  06B8  00FA               	movwf	??_time_update
  4216  06B9  087A               	movf	??_time_update,w
  4217  06BA  07FC               	addwf	time_update@index,f
  4218  06BB  3003               	movlw	3
  4219  06BC  027C               	subwf	time_update@index,w
  4220  06BD  1803               	btfsc	3,0
  4221  06BE  2ED3               	goto	i1l2511
  4222  06BF                     i1l2505:	
  4223  06BF  087C               	movf	time_update@index,w
  4224  06C0  00FA               	movwf	??_time_update
  4225  06C1  01FB               	clrf	??_time_update+1
  4226                           
  4227                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  4228                           ; Switch size 1, requested type "simple"
  4229                           ; Number of cases is 1, Range of values is 0 to 0
  4230                           ; switch strategies available:
  4231                           ; Name         Instructions Cycles
  4232                           ; simple_byte            4     3 (average)
  4233                           ; direct_byte           11     8 (fixed)
  4234                           ; jumptable            260     6 (fixed)
  4235                           ;	Chosen strategy is simple_byte
  4236  06C2  087B               	movf	??_time_update+1,w
  4237  06C3  3A00               	xorlw	0	; case 0
  4238  06C4  1903               	skipnz
  4239  06C5  2EC7               	goto	i1l3177
  4240  06C6  2EB7               	goto	i1l2507
  4241  06C7                     i1l3177:	
  4242                           
  4243                           ; Switch size 1, requested type "simple"
  4244                           ; Number of cases is 3, Range of values is 0 to 2
  4245                           ; switch strategies available:
  4246                           ; Name         Instructions Cycles
  4247                           ; simple_byte           10     6 (average)
  4248                           ; direct_byte           17     8 (fixed)
  4249                           ; jumptable            260     6 (fixed)
  4250                           ;	Chosen strategy is simple_byte
  4251  06C7  087A               	movf	??_time_update,w
  4252  06C8  3A00               	xorlw	0	; case 0
  4253  06C9  1903               	skipnz
  4254  06CA  2E81               	goto	i1l2487
  4255  06CB  3A01               	xorlw	1	; case 1
  4256  06CC  1903               	skipnz
  4257  06CD  2E95               	goto	i1l2493
  4258  06CE  3A03               	xorlw	3	; case 2
  4259  06CF  1903               	skipnz
  4260  06D0  2EA9               	goto	i1l2499
  4261  06D1  2EB7               	goto	i1l2507
  4262  06D2  2EB7               	goto	i1l2507
  4263  06D3                     i1l2511:	
  4264                           
  4265                           ;TIME.c: 115:                     update_current_time();
  4266  06D3  120A  158A  2552   	fcall	_update_current_time
  4267                           
  4268                           ;TIME.c: 117:         }else {
  4269  06D6  0008               	return
  4270  06D7                     __end_of_time_update:	
  4271                           
  4272                           	psect	text25
  4273  0D52                     __ptext25:	
  4274 ;; *************** function _update_current_time *****************
  4275 ;; Defined at:
  4276 ;;		line 194 in file "TIME.c"
  4277 ;; Parameters:    Size  Location     Type
  4278 ;;		None
  4279 ;; Auto vars:     Size  Location     Type
  4280 ;;		None
  4281 ;; Return value:  Size  Location     Type
  4282 ;;                  1    wreg      void 
  4283 ;; Registers used:
  4284 ;;		wreg, status,2, status,0, pclath, cstack
  4285 ;; Tracked objects:
  4286 ;;		On entry : 0/0
  4287 ;;		On exit  : 0/0
  4288 ;;		Unchanged: 0/0
  4289 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4290 ;;      Params:         0       0       0       0       0
  4291 ;;      Locals:         0       0       0       0       0
  4292 ;;      Temps:          3       0       0       0       0
  4293 ;;      Totals:         3       0       0       0       0
  4294 ;;Total ram usage:        3 bytes
  4295 ;; Hardware stack levels used:    1
  4296 ;; Hardware stack levels required when called:    1
  4297 ;; This function calls:
  4298 ;;		i1___awmod
  4299 ;; This function is called by:
  4300 ;;		_time_update
  4301 ;; This function uses a non-reentrant model
  4302 ;;
  4303                           
  4304                           
  4305                           ;psect for function _update_current_time
  4306  0D52                     _update_current_time:	
  4307                           
  4308                           ;TIME.c: 196:     if( ( current_mode == MODE_NORMAL ) && ( current_sec_period >= (1000) 
      +                          )){
  4309                           
  4310                           ;incstack = 0
  4311                           ; Regs used in _update_current_time: [wreg+status,2+status,0+pclath+cstack]
  4312  0D52  1283               	bcf	3,5	;RP0=0, select bank0
  4313  0D53  1303               	bcf	3,6	;RP1=0, select bank0
  4314  0D54  0850               	movf	_current_mode,w
  4315  0D55  1D03               	btfss	3,2
  4316  0D56  0008               	return
  4317  0D57  3003               	movlw	3
  4318  0D58  1683               	bsf	3,5	;RP0=1, select bank1
  4319  0D59  1303               	bcf	3,6	;RP1=0, select bank1
  4320  0D5A  023D               	subwf	(_current_sec_period+1)^(0+128),w
  4321  0D5B  30E8               	movlw	232
  4322  0D5C  1903               	skipnz
  4323  0D5D  023C               	subwf	_current_sec_period^(0+128),w
  4324  0D5E  1C03               	skipc
  4325  0D5F  0008               	return
  4326                           
  4327                           ;TIME.c: 197:         current_sec_period = (0);
  4328  0D60  01BC               	clrf	_current_sec_period^(0+128)
  4329  0D61  01BD               	clrf	(_current_sec_period+1)^(0+128)
  4330                           
  4331                           ;TIME.c: 198:         current_time.secounds++;
  4332  0D62  3001               	movlw	1
  4333  0D63  00F7               	movwf	??_update_current_time
  4334  0D64  0877               	movf	??_update_current_time,w
  4335  0D65  1283               	bcf	3,5	;RP0=0, select bank0
  4336  0D66  1303               	bcf	3,6	;RP1=0, select bank0
  4337  0D67  07CB               	addwf	_current_time,f
  4338                           
  4339                           ;TIME.c: 200:         if(current_time.secounds == (60)){
  4340  0D68  303C               	movlw	60
  4341  0D69  064B               	xorwf	_current_time,w
  4342  0D6A  1D03               	btfss	3,2
  4343  0D6B  0008               	return
  4344                           
  4345                           ;TIME.c: 201:             current_time.secounds = (0);
  4346  0D6C  01CB               	clrf	_current_time
  4347                           
  4348                           ;TIME.c: 202:             current_time.minutes++;
  4349  0D6D  3001               	movlw	1
  4350  0D6E  00F7               	movwf	??_update_current_time
  4351  0D6F  0877               	movf	??_update_current_time,w
  4352  0D70  07CC               	addwf	_current_time+1,f
  4353                           
  4354                           ;TIME.c: 203:             if(current_time.minutes == (60)){
  4355  0D71  303C               	movlw	60
  4356  0D72  064C               	xorwf	_current_time+1,w
  4357  0D73  1D03               	btfss	3,2
  4358  0D74  2D7A               	goto	i1l2177
  4359                           
  4360                           ;TIME.c: 204:                 current_time.minutes = (0);
  4361  0D75  01CC               	clrf	_current_time+1
  4362                           
  4363                           ;TIME.c: 205:                 current_time.hours++;
  4364  0D76  3001               	movlw	1
  4365  0D77  00F7               	movwf	??_update_current_time
  4366  0D78  0877               	movf	??_update_current_time,w
  4367  0D79  07CD               	addwf	_current_time+2,f
  4368  0D7A                     i1l2177:	
  4369                           ;TIME.c: 206:             }else { }
  4370                           
  4371                           
  4372                           ;TIME.c: 208:             current_time.hours = current_time.hours % (24);
  4373  0D7A  3018               	movlw	24
  4374  0D7B  00F0               	movwf	i1___awmod@divisor
  4375  0D7C  3000               	movlw	0
  4376  0D7D  00F1               	movwf	i1___awmod@divisor+1
  4377  0D7E  084D               	movf	_current_time+2,w
  4378  0D7F  00F7               	movwf	??_update_current_time
  4379  0D80  01F8               	clrf	??_update_current_time+1
  4380  0D81  0877               	movf	??_update_current_time,w
  4381  0D82  00F2               	movwf	i1___awmod@dividend
  4382  0D83  0878               	movf	??_update_current_time+1,w
  4383  0D84  00F3               	movwf	i1___awmod@dividend+1
  4384  0D85  120A  158A  2656   	fcall	i1___awmod
  4385  0D88  0870               	movf	?i1___awmod,w
  4386  0D89  00F9               	movwf	??_update_current_time+2
  4387  0D8A  0879               	movf	??_update_current_time+2,w
  4388  0D8B  1283               	bcf	3,5	;RP0=0, select bank0
  4389  0D8C  1303               	bcf	3,6	;RP1=0, select bank0
  4390  0D8D  00CD               	movwf	_current_time+2
  4391                           
  4392                           ;TIME.c: 209:         }else { }
  4393  0D8E  0008               	return
  4394  0D8F                     __end_of_update_current_time:	
  4395                           
  4396                           	psect	text26
  4397  0AEE                     __ptext26:	
  4398 ;; *************** function _switch_getState *****************
  4399 ;; Defined at:
  4400 ;;		line 50 in file "SWITCH.c"
  4401 ;; Parameters:    Size  Location     Type
  4402 ;;  sw              1    wreg     enum E866
  4403 ;; Auto vars:     Size  Location     Type
  4404 ;;  sw              1    2[COMMON] enum E866
  4405 ;;  ret             1    3[COMMON] enum E871
  4406 ;; Return value:  Size  Location     Type
  4407 ;;                  1    wreg      enum E871
  4408 ;; Registers used:
  4409 ;;		wreg, fsr0l, fsr0h, status,2, status,0
  4410 ;; Tracked objects:
  4411 ;;		On entry : 0/0
  4412 ;;		On exit  : 0/0
  4413 ;;		Unchanged: 0/0
  4414 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4415 ;;      Params:         0       0       0       0       0
  4416 ;;      Locals:         2       0       0       0       0
  4417 ;;      Temps:          2       0       0       0       0
  4418 ;;      Totals:         4       0       0       0       0
  4419 ;;Total ram usage:        4 bytes
  4420 ;; Hardware stack levels used:    1
  4421 ;; This function calls:
  4422 ;;		Nothing
  4423 ;; This function is called by:
  4424 ;;		_time_update
  4425 ;; This function uses a non-reentrant model
  4426 ;;
  4427                           
  4428                           
  4429                           ;psect for function _switch_getState
  4430  0AEE                     _switch_getState:	
  4431                           
  4432                           ;incstack = 0
  4433                           ; Regs used in _switch_getState: [wreg-fsr0h+status,2+status,0]
  4434                           ;switch_getState@sw stored from wreg
  4435  0AEE  00F2               	movwf	switch_getState@sw
  4436                           
  4437                           ;SWITCH.c: 52:     tSw_State ret;;SWITCH.c: 54:     ret = switches_data[sw].state;
  4438  0AEF  0872               	movf	switch_getState@sw,w
  4439  0AF0  00F0               	movwf	??_switch_getState
  4440  0AF1  3002               	movlw	2
  4441  0AF2                     u165_25:	
  4442  0AF2  1003               	clrc
  4443  0AF3  0DF0               	rlf	??_switch_getState,f
  4444  0AF4  3EFF               	addlw	-1
  4445  0AF5  1D03               	skipz
  4446  0AF6  2AF2               	goto	u165_25
  4447  0AF7  1003               	clrc
  4448  0AF8  0D70               	rlf	??_switch_getState,w
  4449  0AF9  3EA7               	addlw	(low ((_switches_data| 0+7)))& (0+255)
  4450  0AFA  0084               	movwf	4
  4451  0AFB  1383               	bcf	3,7	;select IRP bank1
  4452  0AFC  0800               	movf	0,w
  4453  0AFD  00F1               	movwf	??_switch_getState+1
  4454  0AFE  0871               	movf	??_switch_getState+1,w
  4455  0AFF  00F3               	movwf	switch_getState@ret
  4456                           
  4457                           ;SWITCH.c: 56:     return ret;
  4458  0B00  0873               	movf	switch_getState@ret,w
  4459  0B01  0008               	return
  4460  0B02                     __end_of_switch_getState:	
  4461                           
  4462                           	psect	text27
  4463  0C2B                     __ptext27:	
  4464 ;; *************** function _sw_setting_handler *****************
  4465 ;; Defined at:
  4466 ;;		line 161 in file "TIME.c"
  4467 ;; Parameters:    Size  Location     Type
  4468 ;;		None
  4469 ;; Auto vars:     Size  Location     Type
  4470 ;;		None
  4471 ;; Return value:  Size  Location     Type
  4472 ;;                  1    wreg      void 
  4473 ;; Registers used:
  4474 ;;		wreg, fsr0l, fsr0h, status,2, status,0
  4475 ;; Tracked objects:
  4476 ;;		On entry : 0/0
  4477 ;;		On exit  : 0/0
  4478 ;;		Unchanged: 0/0
  4479 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4480 ;;      Params:         0       0       0       0       0
  4481 ;;      Locals:         0       0       0       0       0
  4482 ;;      Temps:          2       0       0       0       0
  4483 ;;      Totals:         2       0       0       0       0
  4484 ;;Total ram usage:        2 bytes
  4485 ;; Hardware stack levels used:    1
  4486 ;; This function calls:
  4487 ;;		Nothing
  4488 ;; This function is called by:
  4489 ;;		_time_update
  4490 ;; This function uses a non-reentrant model
  4491 ;;
  4492                           
  4493                           
  4494                           ;psect for function _sw_setting_handler
  4495  0C2B                     _sw_setting_handler:	
  4496                           
  4497                           ;TIME.c: 163:     switch(current_mode){
  4498                           
  4499                           ;incstack = 0
  4500                           ; Regs used in _sw_setting_handler: [wreg-fsr0h+status,2+status,0]
  4501  0C2B  2C3B               	goto	i1l2151
  4502  0C2C                     i1l2145:	
  4503                           
  4504                           ;TIME.c: 167:             current_mode = MODE_ADJUST_HOURS;
  4505  0C2C  3002               	movlw	2
  4506  0C2D  00F0               	movwf	??_sw_setting_handler
  4507  0C2E  0870               	movf	??_sw_setting_handler,w
  4508  0C2F  00D0               	movwf	_current_mode
  4509                           
  4510                           ;TIME.c: 169:             break;
  4511  0C30  0008               	return
  4512  0C31                     i1l218:	
  4513                           ;TIME.c: 171:         case MODE_ADJUST_HOURS :
  4514                           
  4515                           
  4516                           ;TIME.c: 173:             current_mode = MODE_ADJUST_MINUTES;
  4517  0C31  01D0               	clrf	_current_mode
  4518  0C32  0AD0               	incf	_current_mode,f
  4519                           
  4520                           ;TIME.c: 175:             break;
  4521  0C33  0008               	return
  4522  0C34                     i1l2147:	
  4523                           
  4524                           ;TIME.c: 179:             current_mode = MODE_NORMAL;
  4525  0C34  01D0               	clrf	_current_mode
  4526                           
  4527                           ;TIME.c: 181:             current_time.secounds = (0);
  4528  0C35  01CB               	clrf	_current_time
  4529                           
  4530                           ;TIME.c: 183:             current_sec_period = (0);
  4531  0C36  1683               	bsf	3,5	;RP0=1, select bank1
  4532  0C37  1303               	bcf	3,6	;RP1=0, select bank1
  4533  0C38  01BC               	clrf	_current_sec_period^(0+128)
  4534  0C39  01BD               	clrf	(_current_sec_period+1)^(0+128)
  4535                           
  4536                           ;TIME.c: 185:             break;
  4537  0C3A  0008               	return
  4538  0C3B                     i1l2151:	
  4539  0C3B  1283               	bcf	3,5	;RP0=0, select bank0
  4540  0C3C  1303               	bcf	3,6	;RP1=0, select bank0
  4541  0C3D  0850               	movf	_current_mode,w
  4542  0C3E  00F0               	movwf	??_sw_setting_handler
  4543  0C3F  01F1               	clrf	??_sw_setting_handler+1
  4544                           
  4545                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  4546                           ; Switch size 1, requested type "simple"
  4547                           ; Number of cases is 1, Range of values is 0 to 0
  4548                           ; switch strategies available:
  4549                           ; Name         Instructions Cycles
  4550                           ; simple_byte            4     3 (average)
  4551                           ; direct_byte           11     8 (fixed)
  4552                           ; jumptable            260     6 (fixed)
  4553                           ;	Chosen strategy is simple_byte
  4554  0C40  0871               	movf	??_sw_setting_handler+1,w
  4555  0C41  3A00               	xorlw	0	; case 0
  4556  0C42  1903               	skipnz
  4557  0C43  2C45               	goto	i1l3179
  4558  0C44  2C50               	goto	i1l221
  4559  0C45                     i1l3179:	
  4560                           
  4561                           ; Switch size 1, requested type "simple"
  4562                           ; Number of cases is 3, Range of values is 0 to 2
  4563                           ; switch strategies available:
  4564                           ; Name         Instructions Cycles
  4565                           ; simple_byte           10     6 (average)
  4566                           ; direct_byte           17     8 (fixed)
  4567                           ; jumptable            260     6 (fixed)
  4568                           ;	Chosen strategy is simple_byte
  4569  0C45  0870               	movf	??_sw_setting_handler,w
  4570  0C46  3A00               	xorlw	0	; case 0
  4571  0C47  1903               	skipnz
  4572  0C48  2C2C               	goto	i1l2145
  4573  0C49  3A01               	xorlw	1	; case 1
  4574  0C4A  1903               	skipnz
  4575  0C4B  2C34               	goto	i1l2147
  4576  0C4C  3A03               	xorlw	3	; case 2
  4577  0C4D  1903               	skipnz
  4578  0C4E  2C31               	goto	i1l218
  4579  0C4F  2C50               	goto	i1l221
  4580  0C50                     i1l221:	
  4581  0C50  0008               	return
  4582  0C51                     __end_of_sw_setting_handler:	
  4583                           
  4584                           	psect	text28
  4585  0D8F                     __ptext28:	
  4586 ;; *************** function _sw_plus_handler *****************
  4587 ;; Defined at:
  4588 ;;		line 125 in file "TIME.c"
  4589 ;; Parameters:    Size  Location     Type
  4590 ;;		None
  4591 ;; Auto vars:     Size  Location     Type
  4592 ;;		None
  4593 ;; Return value:  Size  Location     Type
  4594 ;;                  1    wreg      void 
  4595 ;; Registers used:
  4596 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  4597 ;; Tracked objects:
  4598 ;;		On entry : 0/0
  4599 ;;		On exit  : 0/0
  4600 ;;		Unchanged: 0/0
  4601 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4602 ;;      Params:         0       0       0       0       0
  4603 ;;      Locals:         0       0       0       0       0
  4604 ;;      Temps:          2       0       0       0       0
  4605 ;;      Totals:         2       0       0       0       0
  4606 ;;Total ram usage:        2 bytes
  4607 ;; Hardware stack levels used:    1
  4608 ;; Hardware stack levels required when called:    1
  4609 ;; This function calls:
  4610 ;;		i1___awmod
  4611 ;; This function is called by:
  4612 ;;		_time_update
  4613 ;; This function uses a non-reentrant model
  4614 ;;
  4615                           
  4616                           
  4617                           ;psect for function _sw_plus_handler
  4618  0D8F                     _sw_plus_handler:	
  4619                           
  4620                           ;TIME.c: 128:     switch(current_mode){
  4621                           
  4622                           ;incstack = 0
  4623                           ; Regs used in _sw_plus_handler: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  4624  0D8F  2DBA               	goto	i1l2119
  4625  0D90                     i1l2113:	
  4626                           
  4627                           ;TIME.c: 131:             current_time.hours = (current_time.hours + 1) % (24);
  4628  0D90  3018               	movlw	24
  4629  0D91  00F0               	movwf	i1___awmod@divisor
  4630  0D92  3000               	movlw	0
  4631  0D93  00F1               	movwf	i1___awmod@divisor+1
  4632  0D94  084D               	movf	_current_time+2,w
  4633  0D95  3E01               	addlw	1
  4634  0D96  00F2               	movwf	i1___awmod@dividend
  4635  0D97  3000               	movlw	0
  4636  0D98  1803               	skipnc
  4637  0D99  3001               	movlw	1
  4638  0D9A  00F3               	movwf	i1___awmod@dividend+1
  4639  0D9B  120A  158A  2656   	fcall	i1___awmod
  4640  0D9E  0870               	movf	?i1___awmod,w
  4641  0D9F  00F7               	movwf	??_sw_plus_handler
  4642  0DA0  0877               	movf	??_sw_plus_handler,w
  4643  0DA1  1283               	bcf	3,5	;RP0=0, select bank0
  4644  0DA2  1303               	bcf	3,6	;RP1=0, select bank0
  4645  0DA3  00CD               	movwf	_current_time+2
  4646                           
  4647                           ;TIME.c: 132:             break;
  4648  0DA4  0008               	return
  4649  0DA5                     i1l2115:	
  4650                           
  4651                           ;TIME.c: 134:             current_time.minutes = (current_time.minutes + 1) % (60);
  4652  0DA5  303C               	movlw	60
  4653  0DA6  00F0               	movwf	i1___awmod@divisor
  4654  0DA7  3000               	movlw	0
  4655  0DA8  00F1               	movwf	i1___awmod@divisor+1
  4656  0DA9  084C               	movf	_current_time+1,w
  4657  0DAA  3E01               	addlw	1
  4658  0DAB  00F2               	movwf	i1___awmod@dividend
  4659  0DAC  3000               	movlw	0
  4660  0DAD  1803               	skipnc
  4661  0DAE  3001               	movlw	1
  4662  0DAF  00F3               	movwf	i1___awmod@dividend+1
  4663  0DB0  120A  158A  2656   	fcall	i1___awmod
  4664  0DB3  0870               	movf	?i1___awmod,w
  4665  0DB4  00F7               	movwf	??_sw_plus_handler
  4666  0DB5  0877               	movf	??_sw_plus_handler,w
  4667  0DB6  1283               	bcf	3,5	;RP0=0, select bank0
  4668  0DB7  1303               	bcf	3,6	;RP1=0, select bank0
  4669  0DB8  00CC               	movwf	_current_time+1
  4670                           
  4671                           ;TIME.c: 135:             break;
  4672  0DB9  0008               	return
  4673  0DBA                     i1l2119:	
  4674  0DBA  1283               	bcf	3,5	;RP0=0, select bank0
  4675  0DBB  1303               	bcf	3,6	;RP1=0, select bank0
  4676  0DBC  0850               	movf	_current_mode,w
  4677  0DBD  00F7               	movwf	??_sw_plus_handler
  4678  0DBE  01F8               	clrf	??_sw_plus_handler+1
  4679                           
  4680                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  4681                           ; Switch size 1, requested type "simple"
  4682                           ; Number of cases is 1, Range of values is 0 to 0
  4683                           ; switch strategies available:
  4684                           ; Name         Instructions Cycles
  4685                           ; simple_byte            4     3 (average)
  4686                           ; direct_byte           11     8 (fixed)
  4687                           ; jumptable            260     6 (fixed)
  4688                           ;	Chosen strategy is simple_byte
  4689  0DBF  0878               	movf	??_sw_plus_handler+1,w
  4690  0DC0  3A00               	xorlw	0	; case 0
  4691  0DC1  1903               	skipnz
  4692  0DC2  2DC4               	goto	i1l3181
  4693  0DC3  2DCC               	goto	i1l202
  4694  0DC4                     i1l3181:	
  4695                           
  4696                           ; Switch size 1, requested type "simple"
  4697                           ; Number of cases is 2, Range of values is 1 to 2
  4698                           ; switch strategies available:
  4699                           ; Name         Instructions Cycles
  4700                           ; simple_byte            7     4 (average)
  4701                           ; direct_byte           17    11 (fixed)
  4702                           ; jumptable            263     9 (fixed)
  4703                           ;	Chosen strategy is simple_byte
  4704  0DC4  0877               	movf	??_sw_plus_handler,w
  4705  0DC5  3A01               	xorlw	1	; case 1
  4706  0DC6  1903               	skipnz
  4707  0DC7  2DA5               	goto	i1l2115
  4708  0DC8  3A03               	xorlw	3	; case 2
  4709  0DC9  1903               	skipnz
  4710  0DCA  2D90               	goto	i1l2113
  4711  0DCB  2DCC               	goto	i1l202
  4712  0DCC                     i1l202:	
  4713  0DCC  0008               	return
  4714  0DCD                     __end_of_sw_plus_handler:	
  4715                           
  4716                           	psect	text29
  4717  0C77                     __ptext29:	
  4718 ;; *************** function _sw_minus_handler *****************
  4719 ;; Defined at:
  4720 ;;		line 142 in file "TIME.c"
  4721 ;; Parameters:    Size  Location     Type
  4722 ;;		None
  4723 ;; Auto vars:     Size  Location     Type
  4724 ;;		None
  4725 ;; Return value:  Size  Location     Type
  4726 ;;                  1    wreg      void 
  4727 ;; Registers used:
  4728 ;;		wreg, fsr0l, fsr0h, status,2, status,0
  4729 ;; Tracked objects:
  4730 ;;		On entry : 0/0
  4731 ;;		On exit  : 0/0
  4732 ;;		Unchanged: 0/0
  4733 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4734 ;;      Params:         0       0       0       0       0
  4735 ;;      Locals:         0       0       0       0       0
  4736 ;;      Temps:          2       0       0       0       0
  4737 ;;      Totals:         2       0       0       0       0
  4738 ;;Total ram usage:        2 bytes
  4739 ;; Hardware stack levels used:    1
  4740 ;; This function calls:
  4741 ;;		Nothing
  4742 ;; This function is called by:
  4743 ;;		_time_update
  4744 ;; This function uses a non-reentrant model
  4745 ;;
  4746                           
  4747                           
  4748                           ;psect for function _sw_minus_handler
  4749  0C77                     _sw_minus_handler:	
  4750                           
  4751                           ;TIME.c: 143:     switch(current_mode){
  4752                           
  4753                           ;incstack = 0
  4754                           ; Regs used in _sw_minus_handler: [wreg-fsr0h+status,2+status,0]
  4755  0C77  2C8C               	goto	i1l2137
  4756  0C78                     i1l2127:	
  4757                           
  4758                           ;TIME.c: 146:             current_time.hours--;
  4759  0C78  3001               	movlw	1
  4760  0C79  02CD               	subwf	_current_time+2,f
  4761                           
  4762                           ;TIME.c: 147:             if(current_time.hours == 255){current_time.hours = (24) - 1;}
  4763  0C7A  0A4D               	incf	_current_time+2,w
  4764  0C7B  1D03               	btfss	3,2
  4765  0C7C  0008               	return
  4766  0C7D  3017               	movlw	23
  4767  0C7E  00F0               	movwf	??_sw_minus_handler
  4768  0C7F  0870               	movf	??_sw_minus_handler,w
  4769  0C80  00CD               	movwf	_current_time+2
  4770  0C81  0008               	return
  4771  0C82                     i1l2131:	
  4772                           
  4773                           ;TIME.c: 151:             current_time.minutes--;
  4774  0C82  3001               	movlw	1
  4775  0C83  02CC               	subwf	_current_time+1,f
  4776                           
  4777                           ;TIME.c: 152:             if(current_time.minutes == 255 ){ current_time.minutes = (60) 
      +                          - 1;}
  4778  0C84  0A4C               	incf	_current_time+1,w
  4779  0C85  1D03               	btfss	3,2
  4780  0C86  0008               	return
  4781  0C87  303B               	movlw	59
  4782  0C88  00F0               	movwf	??_sw_minus_handler
  4783  0C89  0870               	movf	??_sw_minus_handler,w
  4784  0C8A  00CC               	movwf	_current_time+1
  4785  0C8B  0008               	return
  4786  0C8C                     i1l2137:	
  4787  0C8C  1283               	bcf	3,5	;RP0=0, select bank0
  4788  0C8D  1303               	bcf	3,6	;RP1=0, select bank0
  4789  0C8E  0850               	movf	_current_mode,w
  4790  0C8F  00F0               	movwf	??_sw_minus_handler
  4791  0C90  01F1               	clrf	??_sw_minus_handler+1
  4792                           
  4793                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  4794                           ; Switch size 1, requested type "simple"
  4795                           ; Number of cases is 1, Range of values is 0 to 0
  4796                           ; switch strategies available:
  4797                           ; Name         Instructions Cycles
  4798                           ; simple_byte            4     3 (average)
  4799                           ; direct_byte           11     8 (fixed)
  4800                           ; jumptable            260     6 (fixed)
  4801                           ;	Chosen strategy is simple_byte
  4802  0C91  0871               	movf	??_sw_minus_handler+1,w
  4803  0C92  3A00               	xorlw	0	; case 0
  4804  0C93  1903               	skipnz
  4805  0C94  2C96               	goto	i1l3183
  4806  0C95  2C9E               	goto	i1l212
  4807  0C96                     i1l3183:	
  4808                           
  4809                           ; Switch size 1, requested type "simple"
  4810                           ; Number of cases is 2, Range of values is 1 to 2
  4811                           ; switch strategies available:
  4812                           ; Name         Instructions Cycles
  4813                           ; simple_byte            7     4 (average)
  4814                           ; direct_byte           17    11 (fixed)
  4815                           ; jumptable            263     9 (fixed)
  4816                           ;	Chosen strategy is simple_byte
  4817  0C96  0870               	movf	??_sw_minus_handler,w
  4818  0C97  3A01               	xorlw	1	; case 1
  4819  0C98  1903               	skipnz
  4820  0C99  2C82               	goto	i1l2131
  4821  0C9A  3A03               	xorlw	3	; case 2
  4822  0C9B  1903               	skipnz
  4823  0C9C  2C78               	goto	i1l2127
  4824  0C9D  2C9E               	goto	i1l212
  4825  0C9E                     i1l212:	
  4826  0C9E  0008               	return
  4827  0C9F                     __end_of_sw_minus_handler:	
  4828                           
  4829                           	psect	text30
  4830  004B                     __ptext30:	
  4831 ;; *************** function _switch_update *****************
  4832 ;; Defined at:
  4833 ;;		line 64 in file "SWITCH.c"
  4834 ;; Parameters:    Size  Location     Type
  4835 ;;		None
  4836 ;; Auto vars:     Size  Location     Type
  4837 ;;  sw_index        1    8[COMMON] unsigned char 
  4838 ;;  sample_index    1    7[COMMON] unsigned char 
  4839 ;; Return value:  Size  Location     Type
  4840 ;;                  1    wreg      void 
  4841 ;; Registers used:
  4842 ;;		wreg, fsr0l, fsr0h, status,2, status,0
  4843 ;; Tracked objects:
  4844 ;;		On entry : 0/0
  4845 ;;		On exit  : 0/0
  4846 ;;		Unchanged: 0/0
  4847 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4848 ;;      Params:         0       0       0       0       0
  4849 ;;      Locals:         2       0       0       0       0
  4850 ;;      Temps:          7       0       0       0       0
  4851 ;;      Totals:         9       0       0       0       0
  4852 ;;Total ram usage:        9 bytes
  4853 ;; Hardware stack levels used:    1
  4854 ;; This function calls:
  4855 ;;		Nothing
  4856 ;; This function is called by:
  4857 ;;		_APP_UPDATE
  4858 ;; This function uses a non-reentrant model
  4859 ;;
  4860                           
  4861                           
  4862                           ;psect for function _switch_update
  4863  004B                     _switch_update:	
  4864                           
  4865                           ;SWITCH.c: 68:     tByte sample_index = 0;
  4866                           
  4867                           ;incstack = 0
  4868                           ; Regs used in _switch_update: [wreg-fsr0h+status,2+status,0]
  4869  004B  01F7               	clrf	switch_update@sample_index
  4870                           
  4871                           ;SWITCH.c: 69:     sw_update_counter = sw_update_counter + (5);
  4872  004C  1283               	bcf	3,5	;RP0=0, select bank0
  4873  004D  1303               	bcf	3,6	;RP1=0, select bank0
  4874  004E  0854               	movf	switch_update@sw_update_counter,w
  4875  004F  3E05               	addlw	5
  4876  0050  00F0               	movwf	??_switch_update
  4877  0051  0870               	movf	??_switch_update,w
  4878  0052  00D4               	movwf	switch_update@sw_update_counter
  4879                           
  4880                           ;SWITCH.c: 73:     if(sw_update_counter == (20)){
  4881  0053  3014               	movlw	20
  4882  0054  0654               	xorwf	switch_update@sw_update_counter,w
  4883  0055  1D03               	btfss	3,2
  4884  0056  0008               	return
  4885                           
  4886                           ;SWITCH.c: 75:         sw_update_counter = 0;
  4887  0057  01D4               	clrf	switch_update@sw_update_counter
  4888                           
  4889                           ;SWITCH.c: 77:         for(sw_index = sw_plus; sw_index < (3); sw_index++){
  4890  0058  01F8               	clrf	switch_update@sw_index
  4891  0059                     i1l2393:	
  4892                           
  4893                           ;SWITCH.c: 80:             for(sample_index = 0; sample_index < (2) - 1; sample_index++)
      +                          {
  4894  0059  01F7               	clrf	switch_update@sample_index
  4895  005A                     i1l2399:	
  4896                           
  4897                           ;SWITCH.c: 81:                 switches_data[sw_index].samples[sample_index] = switches_
      +                          data[sw_index].samples[sample_index + 1];
  4898  005A  0878               	movf	switch_update@sw_index,w
  4899  005B  00F0               	movwf	??_switch_update
  4900  005C  3003               	movlw	3
  4901  005D                     u217_25:	
  4902  005D  1003               	clrc
  4903  005E  0DF0               	rlf	??_switch_update,f
  4904  005F  3EFF               	addlw	-1
  4905  0060  1D03               	skipz
  4906  0061  285D               	goto	u217_25
  4907  0062  30A6               	movlw	(low ((_switches_data| 0+6)))& (0+255)
  4908  0063  0770               	addwf	??_switch_update,w
  4909  0064  00F1               	movwf	??_switch_update+1
  4910  0065  0877               	movf	switch_update@sample_index,w
  4911  0066  0771               	addwf	??_switch_update+1,w
  4912  0067  00F2               	movwf	??_switch_update+2
  4913  0068  0872               	movf	??_switch_update+2,w
  4914  0069  0084               	movwf	4
  4915  006A  1383               	bcf	3,7	;select IRP bank1
  4916  006B  0800               	movf	0,w
  4917  006C  00F3               	movwf	??_switch_update+3
  4918  006D  0878               	movf	switch_update@sw_index,w
  4919  006E  00F4               	movwf	??_switch_update+4
  4920  006F  3003               	movlw	3
  4921  0070                     u218_25:	
  4922  0070  1003               	clrc
  4923  0071  0DF4               	rlf	??_switch_update+4,f
  4924  0072  3EFF               	addlw	-1
  4925  0073  1D03               	skipz
  4926  0074  2870               	goto	u218_25
  4927  0075  30A5               	movlw	(low ((_switches_data| 0+5)))& (0+255)
  4928  0076  0774               	addwf	??_switch_update+4,w
  4929  0077  00F5               	movwf	??_switch_update+5
  4930  0078  0877               	movf	switch_update@sample_index,w
  4931  0079  0775               	addwf	??_switch_update+5,w
  4932  007A  00F6               	movwf	??_switch_update+6
  4933  007B  0876               	movf	??_switch_update+6,w
  4934  007C  0084               	movwf	4
  4935  007D  0873               	movf	??_switch_update+3,w
  4936  007E  0080               	movwf	0
  4937                           
  4938                           ;SWITCH.c: 82:             }
  4939  007F  3001               	movlw	1
  4940  0080  00F0               	movwf	??_switch_update
  4941  0081  0870               	movf	??_switch_update,w
  4942  0082  07F7               	addwf	switch_update@sample_index,f
  4943  0083  0877               	movf	switch_update@sample_index,w
  4944  0084  1903               	btfsc	3,2
  4945  0085  285A               	goto	i1l2399
  4946                           
  4947                           ;SWITCH.c: 85:             switches_data[sw_index].samples[(2) - 1] = ((*(switches_data[
      +                          sw_index].data_reg) >> switches_data[sw_index].pin_number) & (1));
  4948  0086  0878               	movf	switch_update@sw_index,w
  4949  0087  00F0               	movwf	??_switch_update
  4950  0088  3002               	movlw	2
  4951  0089                     u220_25:	
  4952  0089  1003               	clrc
  4953  008A  0DF0               	rlf	??_switch_update,f
  4954  008B  3EFF               	addlw	-1
  4955  008C  1D03               	skipz
  4956  008D  2889               	goto	u220_25
  4957  008E  1003               	clrc
  4958  008F  0D70               	rlf	??_switch_update,w
  4959  0090  3EA2               	addlw	(low ((_switches_data| 0+2)))& (0+255)
  4960  0091  0084               	movwf	4
  4961  0092  0800               	movf	0,w
  4962  0093  00F1               	movwf	??_switch_update+1
  4963  0094  0A84               	incf	4,f
  4964  0095  0800               	movf	0,w
  4965  0096  00F2               	movwf	??_switch_update+2
  4966  0097  0871               	movf	??_switch_update+1,w
  4967  0098  0084               	movwf	4
  4968  0099  1783               	bsf	3,7
  4969  009A  1C72               	btfss	??_switch_update+2,0
  4970  009B  1383               	bcf	3,7
  4971  009C  0800               	movf	0,w
  4972  009D  00F3               	movwf	??_switch_update+3
  4973  009E  0878               	movf	switch_update@sw_index,w
  4974  009F  00F4               	movwf	??_switch_update+4
  4975  00A0  3002               	movlw	2
  4976  00A1                     u221_25:	
  4977  00A1  1003               	clrc
  4978  00A2  0DF4               	rlf	??_switch_update+4,f
  4979  00A3  3EFF               	addlw	-1
  4980  00A4  1D03               	skipz
  4981  00A5  28A1               	goto	u221_25
  4982  00A6  1003               	clrc
  4983  00A7  0D74               	rlf	??_switch_update+4,w
  4984  00A8  3EA4               	addlw	(low ((_switches_data| 0+4)))& (0+255)
  4985  00A9  0084               	movwf	4
  4986  00AA  1383               	bcf	3,7	;select IRP bank1
  4987  00AB  0A00               	incf	0,w
  4988  00AC  28AF               	goto	u222_24
  4989  00AD                     u222_25:	
  4990  00AD  1003               	clrc
  4991  00AE  0CF3               	rrf	??_switch_update+3,f
  4992  00AF                     u222_24:	
  4993  00AF  3EFF               	addlw	-1
  4994  00B0  1D03               	skipz
  4995  00B1  28AD               	goto	u222_25
  4996  00B2  0873               	movf	??_switch_update+3,w
  4997  00B3  3901               	andlw	1
  4998  00B4  00F5               	movwf	??_switch_update+5
  4999  00B5  0878               	movf	switch_update@sw_index,w
  5000  00B6  00F6               	movwf	??_switch_update+6
  5001  00B7  3002               	movlw	2
  5002  00B8                     u223_25:	
  5003  00B8  1003               	clrc
  5004  00B9  0DF6               	rlf	??_switch_update+6,f
  5005  00BA  3EFF               	addlw	-1
  5006  00BB  1D03               	skipz
  5007  00BC  28B8               	goto	u223_25
  5008  00BD  1003               	clrc
  5009  00BE  0D76               	rlf	??_switch_update+6,w
  5010  00BF  3EA6               	addlw	(low ((_switches_data| 0+6)))& (0+255)
  5011  00C0  0084               	movwf	4
  5012  00C1  0875               	movf	??_switch_update+5,w
  5013  00C2  0080               	movwf	0
  5014                           
  5015                           ;SWITCH.c: 90:             if(switches_data[sw_index].state == sw_released &&
  5016  00C3  0878               	movf	switch_update@sw_index,w
  5017  00C4  00F0               	movwf	??_switch_update
  5018  00C5  3002               	movlw	2
  5019  00C6                     u224_25:	
  5020  00C6  1003               	clrc
  5021  00C7  0DF0               	rlf	??_switch_update,f
  5022  00C8  3EFF               	addlw	-1
  5023  00C9  1D03               	skipz
  5024  00CA  28C6               	goto	u224_25
  5025  00CB  1003               	clrc
  5026  00CC  0D70               	rlf	??_switch_update,w
  5027  00CD  3EA7               	addlw	(low ((_switches_data| 0+7)))& (0+255)
  5028  00CE  0084               	movwf	4
  5029  00CF  0800               	movf	0,w
  5030  00D0  1D03               	btfss	3,2
  5031  00D1  28FF               	goto	i1l2413
  5032  00D2  0878               	movf	switch_update@sw_index,w
  5033  00D3  00F0               	movwf	??_switch_update
  5034  00D4  3002               	movlw	2
  5035  00D5                     u226_25:	
  5036  00D5  1003               	clrc
  5037  00D6  0DF0               	rlf	??_switch_update,f
  5038  00D7  3EFF               	addlw	-1
  5039  00D8  1D03               	skipz
  5040  00D9  28D5               	goto	u226_25
  5041  00DA  1003               	clrc
  5042  00DB  0D70               	rlf	??_switch_update,w
  5043  00DC  3EA5               	addlw	(low ((_switches_data| 0+5)))& (0+255)
  5044  00DD  0084               	movwf	4
  5045  00DE  0800               	movf	0,w
  5046  00DF  1D03               	btfss	3,2
  5047  00E0  28FF               	goto	i1l2413
  5048  00E1  0878               	movf	switch_update@sw_index,w
  5049  00E2  00F0               	movwf	??_switch_update
  5050  00E3  3002               	movlw	2
  5051  00E4                     u228_25:	
  5052  00E4  1003               	clrc
  5053  00E5  0DF0               	rlf	??_switch_update,f
  5054  00E6  3EFF               	addlw	-1
  5055  00E7  1D03               	skipz
  5056  00E8  28E4               	goto	u228_25
  5057  00E9  1003               	clrc
  5058  00EA  0D70               	rlf	??_switch_update,w
  5059  00EB  3EA6               	addlw	(low ((_switches_data| 0+6)))& (0+255)
  5060  00EC  0084               	movwf	4
  5061  00ED  0800               	movf	0,w
  5062  00EE  1D03               	btfss	3,2
  5063  00EF  28FF               	goto	i1l2413
  5064                           
  5065                           ;SWITCH.c: 94:             {;SWITCH.c: 95:                 switches_data[sw_index].state
      +                           = sw_prepressed;
  5066  00F0  0878               	movf	switch_update@sw_index,w
  5067  00F1  00F0               	movwf	??_switch_update
  5068  00F2  3002               	movlw	2
  5069  00F3                     u230_25:	
  5070  00F3  1003               	clrc
  5071  00F4  0DF0               	rlf	??_switch_update,f
  5072  00F5  3EFF               	addlw	-1
  5073  00F6  1D03               	skipz
  5074  00F7  28F3               	goto	u230_25
  5075  00F8  1003               	clrc
  5076  00F9  0D70               	rlf	??_switch_update,w
  5077  00FA  3EA7               	addlw	(low ((_switches_data| 0+7)))& (0+255)
  5078  00FB  0084               	movwf	4
  5079  00FC  0180               	clrf	0
  5080  00FD  0A80               	incf	0,f
  5081                           
  5082                           ;SWITCH.c: 96:             }
  5083  00FE  2993               	goto	i1l2433
  5084  00FF                     i1l2413:	
  5085  00FF  0878               	movf	switch_update@sw_index,w
  5086  0100  00F0               	movwf	??_switch_update
  5087  0101  3002               	movlw	2
  5088  0102                     u231_25:	
  5089  0102  1003               	clrc
  5090  0103  0DF0               	rlf	??_switch_update,f
  5091  0104  3EFF               	addlw	-1
  5092  0105  1D03               	skipz
  5093  0106  2902               	goto	u231_25
  5094  0107  1003               	clrc
  5095  0108  0D70               	rlf	??_switch_update,w
  5096  0109  3EA7               	addlw	(low ((_switches_data| 0+7)))& (0+255)
  5097  010A  0084               	movwf	4
  5098  010B  0300               	decf	0,w
  5099  010C  1D03               	btfss	3,2
  5100  010D  2928               	goto	i1l2419
  5101  010E  0878               	movf	switch_update@sw_index,w
  5102  010F  00F0               	movwf	??_switch_update
  5103  0110  3002               	movlw	2
  5104  0111                     u233_25:	
  5105  0111  1003               	clrc
  5106  0112  0DF0               	rlf	??_switch_update,f
  5107  0113  3EFF               	addlw	-1
  5108  0114  1D03               	skipz
  5109  0115  2911               	goto	u233_25
  5110  0116  1003               	clrc
  5111  0117  0D70               	rlf	??_switch_update,w
  5112  0118  3EA6               	addlw	(low ((_switches_data| 0+6)))& (0+255)
  5113  0119  0084               	movwf	4
  5114  011A  0800               	movf	0,w
  5115  011B  1D03               	btfss	3,2
  5116  011C  2928               	goto	i1l2419
  5117                           
  5118                           ;SWITCH.c: 99:             {;SWITCH.c: 100:                 switches_data[sw_index].stat
      +                          e = sw_pressed;
  5119  011D  3002               	movlw	2
  5120  011E  00F0               	movwf	??_switch_update
  5121  011F  0878               	movf	switch_update@sw_index,w
  5122  0120  00F1               	movwf	??_switch_update+1
  5123  0121  3002               	movlw	2
  5124  0122                     u235_25:	
  5125  0122  1003               	clrc
  5126  0123  0DF1               	rlf	??_switch_update+1,f
  5127  0124  3EFF               	addlw	-1
  5128  0125  1D03               	skipz
  5129  0126  2922               	goto	u235_25
  5130  0127  2960               	goto	L1
  5131  0128                     i1l2419:	
  5132                           ;SWITCH.c: 101:             }
  5133                           
  5134  0128  0878               	movf	switch_update@sw_index,w
  5135  0129  00F0               	movwf	??_switch_update
  5136  012A  3002               	movlw	2
  5137  012B                     u236_25:	
  5138  012B  1003               	clrc
  5139  012C  0DF0               	rlf	??_switch_update,f
  5140  012D  3EFF               	addlw	-1
  5141  012E  1D03               	skipz
  5142  012F  292B               	goto	u236_25
  5143  0130  1003               	clrc
  5144  0131  0D70               	rlf	??_switch_update,w
  5145  0132  3EA7               	addlw	(low ((_switches_data| 0+7)))& (0+255)
  5146  0133  0084               	movwf	4
  5147  0134  3002               	movlw	2
  5148  0135  0600               	xorwf	0,w
  5149  0136  1D03               	btfss	3,2
  5150  0137  2967               	goto	i1l2427
  5151  0138  0878               	movf	switch_update@sw_index,w
  5152  0139  00F0               	movwf	??_switch_update
  5153  013A  3002               	movlw	2
  5154  013B                     u238_25:	
  5155  013B  1003               	clrc
  5156  013C  0DF0               	rlf	??_switch_update,f
  5157  013D  3EFF               	addlw	-1
  5158  013E  1D03               	skipz
  5159  013F  293B               	goto	u238_25
  5160  0140  1003               	clrc
  5161  0141  0D70               	rlf	??_switch_update,w
  5162  0142  3EA5               	addlw	(low ((_switches_data| 0+5)))& (0+255)
  5163  0143  0084               	movwf	4
  5164  0144  0300               	decf	0,w
  5165  0145  1D03               	btfss	3,2
  5166  0146  2967               	goto	i1l2427
  5167  0147  0878               	movf	switch_update@sw_index,w
  5168  0148  00F0               	movwf	??_switch_update
  5169  0149  3002               	movlw	2
  5170  014A                     u240_25:	
  5171  014A  1003               	clrc
  5172  014B  0DF0               	rlf	??_switch_update,f
  5173  014C  3EFF               	addlw	-1
  5174  014D  1D03               	skipz
  5175  014E  294A               	goto	u240_25
  5176  014F  1003               	clrc
  5177  0150  0D70               	rlf	??_switch_update,w
  5178  0151  3EA6               	addlw	(low ((_switches_data| 0+6)))& (0+255)
  5179  0152  0084               	movwf	4
  5180  0153  0300               	decf	0,w
  5181  0154  1D03               	btfss	3,2
  5182  0155  2967               	goto	i1l2427
  5183                           
  5184                           ;SWITCH.c: 107:                    {;SWITCH.c: 108:                         switches_dat
      +                          a[sw_index].state = sw_prereleased;
  5185  0156  3003               	movlw	3
  5186  0157  00F0               	movwf	??_switch_update
  5187  0158  0878               	movf	switch_update@sw_index,w
  5188  0159  00F1               	movwf	??_switch_update+1
  5189  015A  3002               	movlw	2
  5190  015B                     u242_25:	
  5191  015B  1003               	clrc
  5192  015C  0DF1               	rlf	??_switch_update+1,f
  5193  015D  3EFF               	addlw	-1
  5194  015E  1D03               	skipz
  5195  015F  295B               	goto	u242_25
  5196  0160                     L1:	
  5197  0160  1003               	clrc
  5198  0161  0D71               	rlf	??_switch_update+1,w
  5199  0162  3EA7               	addlw	(low ((_switches_data| 0+7)))& (0+255)
  5200  0163  0084               	movwf	4
  5201  0164  0870               	movf	??_switch_update,w
  5202  0165  0080               	movwf	0
  5203                           
  5204                           ;SWITCH.c: 109:                    }
  5205  0166  2993               	goto	i1l2433
  5206  0167                     i1l2427:	
  5207  0167  0878               	movf	switch_update@sw_index,w
  5208  0168  00F0               	movwf	??_switch_update
  5209  0169  3002               	movlw	2
  5210  016A                     u243_25:	
  5211  016A  1003               	clrc
  5212  016B  0DF0               	rlf	??_switch_update,f
  5213  016C  3EFF               	addlw	-1
  5214  016D  1D03               	skipz
  5215  016E  296A               	goto	u243_25
  5216  016F  1003               	clrc
  5217  0170  0D70               	rlf	??_switch_update,w
  5218  0171  3EA7               	addlw	(low ((_switches_data| 0+7)))& (0+255)
  5219  0172  0084               	movwf	4
  5220  0173  3003               	movlw	3
  5221  0174  0600               	xorwf	0,w
  5222  0175  1D03               	btfss	3,2
  5223  0176  2993               	goto	i1l2433
  5224  0177  0878               	movf	switch_update@sw_index,w
  5225  0178  00F0               	movwf	??_switch_update
  5226  0179  3002               	movlw	2
  5227  017A                     u245_25:	
  5228  017A  1003               	clrc
  5229  017B  0DF0               	rlf	??_switch_update,f
  5230  017C  3EFF               	addlw	-1
  5231  017D  1D03               	skipz
  5232  017E  297A               	goto	u245_25
  5233  017F  1003               	clrc
  5234  0180  0D70               	rlf	??_switch_update,w
  5235  0181  3EA6               	addlw	(low ((_switches_data| 0+6)))& (0+255)
  5236  0182  0084               	movwf	4
  5237  0183  0300               	decf	0,w
  5238  0184  1D03               	btfss	3,2
  5239  0185  2993               	goto	i1l2433
  5240                           
  5241                           ;SWITCH.c: 112:             {;SWITCH.c: 113:                 switches_data[sw_index].sta
      +                          te = sw_released;
  5242  0186  0878               	movf	switch_update@sw_index,w
  5243  0187  00F0               	movwf	??_switch_update
  5244  0188  3002               	movlw	2
  5245  0189                     u247_25:	
  5246  0189  1003               	clrc
  5247  018A  0DF0               	rlf	??_switch_update,f
  5248  018B  3EFF               	addlw	-1
  5249  018C  1D03               	skipz
  5250  018D  2989               	goto	u247_25
  5251  018E  1003               	clrc
  5252  018F  0D70               	rlf	??_switch_update,w
  5253  0190  3EA7               	addlw	(low ((_switches_data| 0+7)))& (0+255)
  5254  0191  0084               	movwf	4
  5255  0192  0180               	clrf	0
  5256  0193                     i1l2433:	
  5257                           ;SWITCH.c: 114:             }else { }
  5258                           
  5259                           
  5260                           ;SWITCH.c: 116:         }
  5261  0193  3001               	movlw	1
  5262  0194  00F0               	movwf	??_switch_update
  5263  0195  0870               	movf	??_switch_update,w
  5264  0196  07F8               	addwf	switch_update@sw_index,f
  5265  0197  3003               	movlw	3
  5266  0198  0278               	subwf	switch_update@sw_index,w
  5267  0199  1803               	btfsc	3,0
  5268  019A  0008               	return
  5269  019B  2859               	goto	i1l2393
  5270  019C                     __end_of_switch_update:	
  5271                           
  5272                           	psect	text31
  5273  0EA1                     __ptext31:	
  5274 ;; *************** function _ssd_update *****************
  5275 ;; Defined at:
  5276 ;;		line 65 in file "SSD.c"
  5277 ;; Parameters:    Size  Location     Type
  5278 ;;		None
  5279 ;; Auto vars:     Size  Location     Type
  5280 ;;  index           1   13[COMMON] unsigned char 
  5281 ;; Return value:  Size  Location     Type
  5282 ;;                  1    wreg      void 
  5283 ;; Registers used:
  5284 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  5285 ;; Tracked objects:
  5286 ;;		On entry : 0/0
  5287 ;;		On exit  : 0/0
  5288 ;;		Unchanged: 0/0
  5289 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5290 ;;      Params:         0       0       0       0       0
  5291 ;;      Locals:         2       0       0       0       0
  5292 ;;      Temps:          2       0       0       0       0
  5293 ;;      Totals:         4       0       0       0       0
  5294 ;;Total ram usage:        4 bytes
  5295 ;; Hardware stack levels used:    1
  5296 ;; Hardware stack levels required when called:    2
  5297 ;; This function calls:
  5298 ;;		_ssd_off
  5299 ;;		_ssd_on
  5300 ;;		i1___bmul
  5301 ;;		i1_ssd_display
  5302 ;; This function is called by:
  5303 ;;		_APP_UPDATE
  5304 ;; This function uses a non-reentrant model
  5305 ;;
  5306                           
  5307                           
  5308                           ;psect for function _ssd_update
  5309  0EA1                     _ssd_update:	
  5310                           
  5311                           ;SSD.c: 66:     static tByte ssd_update_counter = 0;;SSD.c: 68:     ssd_update_counter +
      +                          = (5);
  5312                           
  5313                           ;incstack = 0
  5314                           ; Regs used in _ssd_update: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  5315  0EA1  3005               	movlw	5
  5316  0EA2  00FA               	movwf	??_ssd_update
  5317  0EA3  087A               	movf	??_ssd_update,w
  5318  0EA4  1283               	bcf	3,5	;RP0=0, select bank0
  5319  0EA5  1303               	bcf	3,6	;RP1=0, select bank0
  5320  0EA6  07D1               	addwf	ssd_update@ssd_update_counter,f
  5321                           
  5322                           ;SSD.c: 70:     if (ssd_update_counter == (5)){
  5323  0EA7  3005               	movlw	5
  5324  0EA8  0651               	xorwf	ssd_update@ssd_update_counter,w
  5325  0EA9  1D03               	btfss	3,2
  5326  0EAA  0008               	return
  5327                           
  5328                           ;SSD.c: 71:         ssd_update_counter = 0;
  5329  0EAB  01D1               	clrf	ssd_update@ssd_update_counter
  5330                           
  5331                           ;SSD.c: 73:          tByte index = 0;
  5332  0EAC  01FD               	clrf	ssd_update@index
  5333                           
  5334                           ;SSD.c: 77:         for(index = ssd_minute_units; index < (4); index++){
  5335  0EAD  01FD               	clrf	ssd_update@index
  5336  0EAE                     i1l2467:	
  5337                           
  5338                           ;SSD.c: 78:             ssd_off(index);
  5339  0EAE  087D               	movf	ssd_update@index,w
  5340  0EAF  120A  118A  2744  120A  158A  	fcall	_ssd_off
  5341                           
  5342                           ;SSD.c: 79:         }
  5343  0EB4  3001               	movlw	1
  5344  0EB5  00FA               	movwf	??_ssd_update
  5345  0EB6  087A               	movf	??_ssd_update,w
  5346  0EB7  07FD               	addwf	ssd_update@index,f
  5347  0EB8  3004               	movlw	4
  5348  0EB9  027D               	subwf	ssd_update@index,w
  5349  0EBA  1C03               	skipc
  5350  0EBB  2EAE               	goto	i1l2467
  5351                           
  5352                           ;SSD.c: 82:         ssd_display(current_ssd,ssd_data[current_ssd].symbol);
  5353  0EBC  300A               	movlw	10
  5354  0EBD  00FA               	movwf	??_ssd_update
  5355  0EBE  087A               	movf	??_ssd_update,w
  5356  0EBF  00F0               	movwf	i1___bmul@multiplicand
  5357  0EC0  1283               	bcf	3,5	;RP0=0, select bank0
  5358  0EC1  1303               	bcf	3,6	;RP1=0, select bank0
  5359  0EC2  0853               	movf	_current_ssd,w
  5360  0EC3  120A  158A  22A8  120A  158A  	fcall	i1___bmul
  5361  0EC8  3E99               	addlw	(low ((_ssd_data| (0+256)+9)))& (0+255)
  5362  0EC9  0084               	movwf	4
  5363  0ECA  1783               	bsf	3,7	;select IRP bank3
  5364  0ECB  0800               	movf	0,w
  5365  0ECC  00FB               	movwf	??_ssd_update+1
  5366  0ECD  087B               	movf	??_ssd_update+1,w
  5367  0ECE  00FC               	movwf	_ssd_update$1597
  5368                           
  5369                           ;SSD.c: 82:         ssd_display(current_ssd,ssd_data[current_ssd].symbol);
  5370  0ECF  087C               	movf	_ssd_update$1597,w
  5371  0ED0  00FA               	movwf	??_ssd_update
  5372  0ED1  087A               	movf	??_ssd_update,w
  5373  0ED2  00F4               	movwf	i1ssd_display@symbol
  5374  0ED3  1283               	bcf	3,5	;RP0=0, select bank0
  5375  0ED4  1303               	bcf	3,6	;RP1=0, select bank0
  5376  0ED5  0853               	movf	_current_ssd,w
  5377  0ED6  120A  158A  24C7  120A  158A  	fcall	i1_ssd_display
  5378                           
  5379                           ;SSD.c: 87:         ssd_on(current_ssd);
  5380  0EDB  1283               	bcf	3,5	;RP0=0, select bank0
  5381  0EDC  1303               	bcf	3,6	;RP1=0, select bank0
  5382  0EDD  0853               	movf	_current_ssd,w
  5383  0EDE  120A  118A  26D7   	fcall	_ssd_on
  5384                           
  5385                           ;SSD.c: 91:         current_ssd++;
  5386  0EE1  3001               	movlw	1
  5387  0EE2  00FA               	movwf	??_ssd_update
  5388  0EE3  087A               	movf	??_ssd_update,w
  5389  0EE4  1283               	bcf	3,5	;RP0=0, select bank0
  5390  0EE5  1303               	bcf	3,6	;RP1=0, select bank0
  5391  0EE6  07D3               	addwf	_current_ssd,f
  5392                           
  5393                           ;SSD.c: 92:         current_ssd = current_ssd % (4);
  5394  0EE7  0853               	movf	_current_ssd,w
  5395  0EE8  3903               	andlw	3
  5396  0EE9  00FA               	movwf	??_ssd_update
  5397  0EEA  087A               	movf	??_ssd_update,w
  5398  0EEB  00D3               	movwf	_current_ssd
  5399                           
  5400                           ;SSD.c: 94:     }else {
  5401  0EEC  0008               	return
  5402  0EED                     __end_of_ssd_update:	
  5403                           
  5404                           	psect	text32
  5405  0CC7                     __ptext32:	
  5406 ;; *************** function i1_ssd_display *****************
  5407 ;; Defined at:
  5408 ;;		line 110 in file "SSD.c"
  5409 ;; Parameters:    Size  Location     Type
  5410 ;;  ssd             1    wreg     enum E15
  5411 ;;  symbol          1    4[COMMON] enum E2
  5412 ;; Auto vars:     Size  Location     Type
  5413 ;;  ssd             1    9[COMMON] enum E15
  5414 ;; Return value:  Size  Location     Type
  5415 ;;                  1    wreg      void 
  5416 ;; Registers used:
  5417 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  5418 ;; Tracked objects:
  5419 ;;		On entry : 0/0
  5420 ;;		On exit  : 0/0
  5421 ;;		Unchanged: 0/0
  5422 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5423 ;;      Params:         1       0       0       0       0
  5424 ;;      Locals:         1       0       0       0       0
  5425 ;;      Temps:          4       0       0       0       0
  5426 ;;      Totals:         6       0       0       0       0
  5427 ;;Total ram usage:        6 bytes
  5428 ;; Hardware stack levels used:    1
  5429 ;; Hardware stack levels required when called:    1
  5430 ;; This function calls:
  5431 ;;		i1___bmul
  5432 ;;		i1_dot_display
  5433 ;; This function is called by:
  5434 ;;		_ssd_update
  5435 ;; This function uses a non-reentrant model
  5436 ;;
  5437                           
  5438                           
  5439                           ;psect for function i1_ssd_display
  5440  0CC7                     i1_ssd_display:	
  5441                           
  5442                           ;incstack = 0
  5443                           ; Regs used in i1_ssd_display: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  5444                           ;i1ssd_display@ssd stored from wreg
  5445  0CC7  00F9               	movwf	i1ssd_display@ssd
  5446                           
  5447                           ;SSD.c: 111:     ((*(ssd_data[ssd].data_value_reg)) = (ssd_decoder[symbol]));
  5448  0CC8  0874               	movf	i1ssd_display@symbol,w
  5449  0CC9  3EB8               	addlw	(low (_ssd_decoder| (0+256)))& (0+255)
  5450  0CCA  0084               	movwf	4
  5451  0CCB  1783               	bsf	3,7	;select IRP bank3
  5452  0CCC  0800               	movf	0,w
  5453  0CCD  00F5               	movwf	??i1_ssd_display
  5454  0CCE  300A               	movlw	10
  5455  0CCF  00F6               	movwf	??i1_ssd_display+1
  5456  0CD0  0876               	movf	??i1_ssd_display+1,w
  5457  0CD1  00F0               	movwf	i1___bmul@multiplicand
  5458  0CD2  0879               	movf	i1ssd_display@ssd,w
  5459  0CD3  120A  158A  22A8  120A  158A  	fcall	i1___bmul
  5460  0CD8  3E92               	addlw	(low ((_ssd_data| (0+256)+2)))& (0+255)
  5461  0CD9  0084               	movwf	4
  5462  0CDA  1783               	bsf	3,7	;select IRP bank3
  5463  0CDB  0800               	movf	0,w
  5464  0CDC  00F7               	movwf	??i1_ssd_display+2
  5465  0CDD  0A84               	incf	4,f
  5466  0CDE  0800               	movf	0,w
  5467  0CDF  00F8               	movwf	??i1_ssd_display+3
  5468  0CE0  0877               	movf	??i1_ssd_display+2,w
  5469  0CE1  0084               	movwf	4
  5470  0CE2  1783               	bsf	3,7
  5471  0CE3  1C78               	btfss	??i1_ssd_display+3,0
  5472  0CE4  1383               	bcf	3,7
  5473  0CE5  0875               	movf	??i1_ssd_display,w
  5474  0CE6  0080               	movwf	0
  5475                           
  5476                           ;SSD.c: 112:     if(ssd == ssd_hour_units) {
  5477  0CE7  3002               	movlw	2
  5478  0CE8  0679               	xorwf	i1ssd_display@ssd,w
  5479  0CE9  1D03               	btfss	3,2
  5480  0CEA  0008               	return
  5481                           
  5482                           ;SSD.c: 113:         dot_display(dot_state);
  5483  0CEB  1283               	bcf	3,5	;RP0=0, select bank0
  5484  0CEC  1303               	bcf	3,6	;RP1=0, select bank0
  5485  0CED  0852               	movf	_dot_state,w
  5486  0CEE  120A  158A  2376   	fcall	i1_dot_display
  5487                           
  5488                           ;SSD.c: 114:     }else {
  5489  0CF1  0008               	return
  5490  0CF2                     __end_ofi1_ssd_display:	
  5491                           
  5492                           	psect	text33
  5493  0B76                     __ptext33:	
  5494 ;; *************** function i1_dot_display *****************
  5495 ;; Defined at:
  5496 ;;		line 134 in file "SSD.c"
  5497 ;; Parameters:    Size  Location     Type
  5498 ;;  state           1    wreg     enum E21
  5499 ;; Auto vars:     Size  Location     Type
  5500 ;;  state           1    2[COMMON] enum E21
  5501 ;; Return value:  Size  Location     Type
  5502 ;;                  1    wreg      void 
  5503 ;; Registers used:
  5504 ;;		wreg, fsr0l, fsr0h, status,2, status,0
  5505 ;; Tracked objects:
  5506 ;;		On entry : 0/0
  5507 ;;		On exit  : 0/0
  5508 ;;		Unchanged: 0/0
  5509 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5510 ;;      Params:         0       0       0       0       0
  5511 ;;      Locals:         1       0       0       0       0
  5512 ;;      Temps:          2       0       0       0       0
  5513 ;;      Totals:         3       0       0       0       0
  5514 ;;Total ram usage:        3 bytes
  5515 ;; Hardware stack levels used:    1
  5516 ;; This function calls:
  5517 ;;		Nothing
  5518 ;; This function is called by:
  5519 ;;		i1_ssd_display
  5520 ;; This function uses a non-reentrant model
  5521 ;;
  5522                           
  5523                           
  5524                           ;psect for function i1_dot_display
  5525  0B76                     i1_dot_display:	
  5526                           
  5527                           ;incstack = 0
  5528                           ; Regs used in i1_dot_display: [wreg-fsr0h+status,2+status,0]
  5529                           ;i1dot_display@state stored from wreg
  5530  0B76  00F2               	movwf	i1dot_display@state
  5531                           
  5532                           ;SSD.c: 135:     (((*(ssd_data[ssd_hour_units].data_value_reg)) = ((*(ssd_data[ssd_hour_
      +                          units].data_value_reg) & (~(1 << ((7))))) | (state << ((7))))));
  5533  0B77  0872               	movf	i1dot_display@state,w
  5534  0B78  00F0               	movwf	??i1_dot_display
  5535  0B79  3007               	movlw	7
  5536  0B7A                     u145_25:	
  5537  0B7A  1003               	clrc
  5538  0B7B  0DF0               	rlf	??i1_dot_display,f
  5539  0B7C  3EFF               	addlw	-1
  5540  0B7D  1D03               	skipz
  5541  0B7E  2B7A               	goto	u145_25
  5542  0B7F  1683               	bsf	3,5	;RP0=1, select bank3
  5543  0B80  1703               	bsf	3,6	;RP1=1, select bank3
  5544  0B81  0826               	movf	(low ((_ssd_data| (0+256)+22)))^(0+128),w
  5545  0B82  0084               	movwf	4
  5546  0B83  1783               	bsf	3,7
  5547  0B84  1C27               	btfss	((low ((_ssd_data| (0+256)+22))+1))^(0+128),0
  5548  0B85  1383               	bcf	3,7
  5549  0B86  0800               	movf	0,w
  5550  0B87  397F               	andlw	127
  5551  0B88  0470               	iorwf	??i1_dot_display,w
  5552  0B89  00F1               	movwf	??i1_dot_display+1
  5553  0B8A  0826               	movf	(low ((_ssd_data| (0+256)+22)))^(0+128),w
  5554  0B8B  0084               	movwf	4
  5555  0B8C  1783               	bsf	3,7
  5556  0B8D  1C27               	btfss	((low ((_ssd_data| (0+256)+22))+1))^(0+128),0
  5557  0B8E  1383               	bcf	3,7
  5558  0B8F  0871               	movf	??i1_dot_display+1,w
  5559  0B90  0080               	movwf	0
  5560  0B91  0008               	return
  5561  0B92                     __end_ofi1_dot_display:	
  5562                           
  5563                           	psect	text34
  5564  06D7                     __ptext34:	
  5565 ;; *************** function _ssd_on *****************
  5566 ;; Defined at:
  5567 ;;		line 119 in file "SSD.c"
  5568 ;; Parameters:    Size  Location     Type
  5569 ;;  ssd             1    wreg     enum E15
  5570 ;; Auto vars:     Size  Location     Type
  5571 ;;  ssd             1    4[COMMON] enum E15
  5572 ;; Return value:  Size  Location     Type
  5573 ;;                  1    wreg      void 
  5574 ;; Registers used:
  5575 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  5576 ;; Tracked objects:
  5577 ;;		On entry : 0/0
  5578 ;;		On exit  : 0/0
  5579 ;;		Unchanged: 0/0
  5580 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5581 ;;      Params:         0       0       0       0       0
  5582 ;;      Locals:         1       0       0       0       0
  5583 ;;      Temps:          0      12       0       0       0
  5584 ;;      Totals:         1      12       0       0       0
  5585 ;;Total ram usage:       13 bytes
  5586 ;; Hardware stack levels used:    1
  5587 ;; Hardware stack levels required when called:    1
  5588 ;; This function calls:
  5589 ;;		i1___bmul
  5590 ;; This function is called by:
  5591 ;;		_ssd_update
  5592 ;; This function uses a non-reentrant model
  5593 ;;
  5594                           
  5595                           
  5596                           ;psect for function _ssd_on
  5597  06D7                     _ssd_on:	
  5598                           
  5599                           ;incstack = 0
  5600                           ; Regs used in _ssd_on: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  5601                           ;ssd_on@ssd stored from wreg
  5602  06D7  00F4               	movwf	ssd_on@ssd
  5603                           
  5604                           ;SSD.c: 120:     (((*(ssd_data[ssd].ctrl_value_reg)) = ((*(ssd_data[ssd].ctrl_value_reg)
      +                           & (~(1 << ssd_data[ssd].ctrl_pin))) | (((1)) << ssd_data[ssd].ctrl_pin))));
  5605  06D8  3001               	movlw	1
  5606  06D9  1283               	bcf	3,5	;RP0=0, select bank0
  5607  06DA  1303               	bcf	3,6	;RP1=0, select bank0
  5608  06DB  00A0               	movwf	??_ssd_on
  5609  06DC  300A               	movlw	10
  5610  06DD  00A1               	movwf	??_ssd_on+1
  5611  06DE  0821               	movf	??_ssd_on+1,w
  5612  06DF  00F0               	movwf	i1___bmul@multiplicand
  5613  06E0  0874               	movf	ssd_on@ssd,w
  5614  06E1  120A  158A  22A8  120A  118A  	fcall	i1___bmul
  5615  06E6  3E98               	addlw	(low ((_ssd_data| (0+256)+8)))& (0+255)
  5616  06E7  0084               	movwf	4
  5617  06E8  1783               	bsf	3,7	;select IRP bank3
  5618  06E9  0A00               	incf	0,w
  5619  06EA  1283               	bcf	3,5	;RP0=0, select bank0
  5620  06EB  1303               	bcf	3,6	;RP1=0, select bank0
  5621  06EC  2EEF               	goto	u172_24
  5622  06ED                     u172_25:	
  5623  06ED  1003               	clrc
  5624  06EE  0DA0               	rlf	??_ssd_on,f
  5625  06EF                     u172_24:	
  5626  06EF  3EFF               	addlw	-1
  5627  06F0  1D03               	skipz
  5628  06F1  2EED               	goto	u172_25
  5629  06F2  300A               	movlw	10
  5630  06F3  00A2               	movwf	??_ssd_on+2
  5631  06F4  0822               	movf	??_ssd_on+2,w
  5632  06F5  00F0               	movwf	i1___bmul@multiplicand
  5633  06F6  0874               	movf	ssd_on@ssd,w
  5634  06F7  120A  158A  22A8  120A  118A  	fcall	i1___bmul
  5635  06FC  3E96               	addlw	(low ((_ssd_data| (0+256)+6)))& (0+255)
  5636  06FD  0084               	movwf	4
  5637  06FE  1783               	bsf	3,7	;select IRP bank3
  5638  06FF  0800               	movf	0,w
  5639  0700  1283               	bcf	3,5	;RP0=0, select bank0
  5640  0701  1303               	bcf	3,6	;RP1=0, select bank0
  5641  0702  00A3               	movwf	??_ssd_on+3
  5642  0703  0A84               	incf	4,f
  5643  0704  0800               	movf	0,w
  5644  0705  00A4               	movwf	??_ssd_on+4
  5645  0706  0823               	movf	??_ssd_on+3,w
  5646  0707  0084               	movwf	4
  5647  0708  1783               	bsf	3,7
  5648  0709  1C24               	btfss	??_ssd_on+4,0
  5649  070A  1383               	bcf	3,7
  5650  070B  0800               	movf	0,w
  5651  070C  00A5               	movwf	??_ssd_on+5
  5652  070D  3001               	movlw	1
  5653  070E  00A6               	movwf	??_ssd_on+6
  5654  070F  300A               	movlw	10
  5655  0710  00A7               	movwf	??_ssd_on+7
  5656  0711  0827               	movf	??_ssd_on+7,w
  5657  0712  00F0               	movwf	i1___bmul@multiplicand
  5658  0713  0874               	movf	ssd_on@ssd,w
  5659  0714  120A  158A  22A8  120A  118A  	fcall	i1___bmul
  5660  0719  3E98               	addlw	(low ((_ssd_data| (0+256)+8)))& (0+255)
  5661  071A  0084               	movwf	4
  5662  071B  1783               	bsf	3,7	;select IRP bank3
  5663  071C  0A00               	incf	0,w
  5664  071D  1283               	bcf	3,5	;RP0=0, select bank0
  5665  071E  1303               	bcf	3,6	;RP1=0, select bank0
  5666  071F  2F22               	goto	u173_24
  5667  0720                     u173_25:	
  5668  0720  1003               	clrc
  5669  0721  0DA6               	rlf	??_ssd_on+6,f
  5670  0722                     u173_24:	
  5671  0722  3EFF               	addlw	-1
  5672  0723  1D03               	skipz
  5673  0724  2F20               	goto	u173_25
  5674  0725  0826               	movf	??_ssd_on+6,w
  5675  0726  3AFF               	xorlw	255
  5676  0727  0525               	andwf	??_ssd_on+5,w
  5677  0728  0420               	iorwf	??_ssd_on,w
  5678  0729  00A8               	movwf	??_ssd_on+8
  5679  072A  300A               	movlw	10
  5680  072B  00A9               	movwf	??_ssd_on+9
  5681  072C  0829               	movf	??_ssd_on+9,w
  5682  072D  00F0               	movwf	i1___bmul@multiplicand
  5683  072E  0874               	movf	ssd_on@ssd,w
  5684  072F  120A  158A  22A8   	fcall	i1___bmul
  5685  0732  3E96               	addlw	(low ((_ssd_data| (0+256)+6)))& (0+255)
  5686  0733  0084               	movwf	4
  5687  0734  1783               	bsf	3,7	;select IRP bank3
  5688  0735  0800               	movf	0,w
  5689  0736  1283               	bcf	3,5	;RP0=0, select bank0
  5690  0737  1303               	bcf	3,6	;RP1=0, select bank0
  5691  0738  00AA               	movwf	??_ssd_on+10
  5692  0739  0A84               	incf	4,f
  5693  073A  0800               	movf	0,w
  5694  073B  00AB               	movwf	??_ssd_on+11
  5695  073C  082A               	movf	??_ssd_on+10,w
  5696  073D  0084               	movwf	4
  5697  073E  1783               	bsf	3,7
  5698  073F  1C2B               	btfss	??_ssd_on+11,0
  5699  0740  1383               	bcf	3,7
  5700  0741  0828               	movf	??_ssd_on+8,w
  5701  0742  0080               	movwf	0
  5702  0743  0008               	return
  5703  0744                     __end_of_ssd_on:	
  5704                           
  5705                           	psect	text35
  5706  0744                     __ptext35:	
  5707 ;; *************** function _ssd_off *****************
  5708 ;; Defined at:
  5709 ;;		line 123 in file "SSD.c"
  5710 ;; Parameters:    Size  Location     Type
  5711 ;;  ssd             1    wreg     enum E15
  5712 ;; Auto vars:     Size  Location     Type
  5713 ;;  ssd             1    4[COMMON] enum E15
  5714 ;; Return value:  Size  Location     Type
  5715 ;;                  1    wreg      void 
  5716 ;; Registers used:
  5717 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  5718 ;; Tracked objects:
  5719 ;;		On entry : 0/0
  5720 ;;		On exit  : 0/0
  5721 ;;		Unchanged: 0/0
  5722 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5723 ;;      Params:         0       0       0       0       0
  5724 ;;      Locals:         1       0       0       0       0
  5725 ;;      Temps:          0      12       0       0       0
  5726 ;;      Totals:         1      12       0       0       0
  5727 ;;Total ram usage:       13 bytes
  5728 ;; Hardware stack levels used:    1
  5729 ;; Hardware stack levels required when called:    1
  5730 ;; This function calls:
  5731 ;;		i1___bmul
  5732 ;; This function is called by:
  5733 ;;		_ssd_update
  5734 ;; This function uses a non-reentrant model
  5735 ;;
  5736                           
  5737                           
  5738                           ;psect for function _ssd_off
  5739  0744                     _ssd_off:	
  5740                           
  5741                           ;incstack = 0
  5742                           ; Regs used in _ssd_off: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  5743                           ;ssd_off@ssd stored from wreg
  5744  0744  00F4               	movwf	ssd_off@ssd
  5745                           
  5746                           ;SSD.c: 124:     (((*(ssd_data[ssd].ctrl_value_reg)) = ((*(ssd_data[ssd].ctrl_value_reg)
      +                           & (~(1 << ssd_data[ssd].ctrl_pin))) | (((0)) << ssd_data[ssd].ctrl_pin))));
  5747  0745  3000               	movlw	0
  5748  0746  1283               	bcf	3,5	;RP0=0, select bank0
  5749  0747  1303               	bcf	3,6	;RP1=0, select bank0
  5750  0748  00A0               	movwf	??_ssd_off
  5751  0749  300A               	movlw	10
  5752  074A  00A1               	movwf	??_ssd_off+1
  5753  074B  0821               	movf	??_ssd_off+1,w
  5754  074C  00F0               	movwf	i1___bmul@multiplicand
  5755  074D  0874               	movf	ssd_off@ssd,w
  5756  074E  120A  158A  22A8  120A  118A  	fcall	i1___bmul
  5757  0753  3E98               	addlw	(low ((_ssd_data| (0+256)+8)))& (0+255)
  5758  0754  0084               	movwf	4
  5759  0755  1783               	bsf	3,7	;select IRP bank3
  5760  0756  0A00               	incf	0,w
  5761  0757  1283               	bcf	3,5	;RP0=0, select bank0
  5762  0758  1303               	bcf	3,6	;RP1=0, select bank0
  5763  0759  2F5C               	goto	u170_24
  5764  075A                     u170_25:	
  5765  075A  1003               	clrc
  5766  075B  0DA0               	rlf	??_ssd_off,f
  5767  075C                     u170_24:	
  5768  075C  3EFF               	addlw	-1
  5769  075D  1D03               	skipz
  5770  075E  2F5A               	goto	u170_25
  5771  075F  300A               	movlw	10
  5772  0760  00A2               	movwf	??_ssd_off+2
  5773  0761  0822               	movf	??_ssd_off+2,w
  5774  0762  00F0               	movwf	i1___bmul@multiplicand
  5775  0763  0874               	movf	ssd_off@ssd,w
  5776  0764  120A  158A  22A8  120A  118A  	fcall	i1___bmul
  5777  0769  3E96               	addlw	(low ((_ssd_data| (0+256)+6)))& (0+255)
  5778  076A  0084               	movwf	4
  5779  076B  1783               	bsf	3,7	;select IRP bank3
  5780  076C  0800               	movf	0,w
  5781  076D  1283               	bcf	3,5	;RP0=0, select bank0
  5782  076E  1303               	bcf	3,6	;RP1=0, select bank0
  5783  076F  00A3               	movwf	??_ssd_off+3
  5784  0770  0A84               	incf	4,f
  5785  0771  0800               	movf	0,w
  5786  0772  00A4               	movwf	??_ssd_off+4
  5787  0773  0823               	movf	??_ssd_off+3,w
  5788  0774  0084               	movwf	4
  5789  0775  1783               	bsf	3,7
  5790  0776  1C24               	btfss	??_ssd_off+4,0
  5791  0777  1383               	bcf	3,7
  5792  0778  0800               	movf	0,w
  5793  0779  00A5               	movwf	??_ssd_off+5
  5794  077A  3001               	movlw	1
  5795  077B  00A6               	movwf	??_ssd_off+6
  5796  077C  300A               	movlw	10
  5797  077D  00A7               	movwf	??_ssd_off+7
  5798  077E  0827               	movf	??_ssd_off+7,w
  5799  077F  00F0               	movwf	i1___bmul@multiplicand
  5800  0780  0874               	movf	ssd_off@ssd,w
  5801  0781  120A  158A  22A8  120A  118A  	fcall	i1___bmul
  5802  0786  3E98               	addlw	(low ((_ssd_data| (0+256)+8)))& (0+255)
  5803  0787  0084               	movwf	4
  5804  0788  1783               	bsf	3,7	;select IRP bank3
  5805  0789  0A00               	incf	0,w
  5806  078A  1283               	bcf	3,5	;RP0=0, select bank0
  5807  078B  1303               	bcf	3,6	;RP1=0, select bank0
  5808  078C  2F8F               	goto	u171_24
  5809  078D                     u171_25:	
  5810  078D  1003               	clrc
  5811  078E  0DA6               	rlf	??_ssd_off+6,f
  5812  078F                     u171_24:	
  5813  078F  3EFF               	addlw	-1
  5814  0790  1D03               	skipz
  5815  0791  2F8D               	goto	u171_25
  5816  0792  0826               	movf	??_ssd_off+6,w
  5817  0793  3AFF               	xorlw	255
  5818  0794  0525               	andwf	??_ssd_off+5,w
  5819  0795  0420               	iorwf	??_ssd_off,w
  5820  0796  00A8               	movwf	??_ssd_off+8
  5821  0797  300A               	movlw	10
  5822  0798  00A9               	movwf	??_ssd_off+9
  5823  0799  0829               	movf	??_ssd_off+9,w
  5824  079A  00F0               	movwf	i1___bmul@multiplicand
  5825  079B  0874               	movf	ssd_off@ssd,w
  5826  079C  120A  158A  22A8   	fcall	i1___bmul
  5827  079F  3E96               	addlw	(low ((_ssd_data| (0+256)+6)))& (0+255)
  5828  07A0  0084               	movwf	4
  5829  07A1  1783               	bsf	3,7	;select IRP bank3
  5830  07A2  0800               	movf	0,w
  5831  07A3  1283               	bcf	3,5	;RP0=0, select bank0
  5832  07A4  1303               	bcf	3,6	;RP1=0, select bank0
  5833  07A5  00AA               	movwf	??_ssd_off+10
  5834  07A6  0A84               	incf	4,f
  5835  07A7  0800               	movf	0,w
  5836  07A8  00AB               	movwf	??_ssd_off+11
  5837  07A9  082A               	movf	??_ssd_off+10,w
  5838  07AA  0084               	movwf	4
  5839  07AB  1783               	bsf	3,7
  5840  07AC  1C2B               	btfss	??_ssd_off+11,0
  5841  07AD  1383               	bcf	3,7
  5842  07AE  0828               	movf	??_ssd_off+8,w
  5843  07AF  0080               	movwf	0
  5844  07B0  0008               	return
  5845  07B1                     __end_of_ssd_off:	
  5846                           
  5847                           	psect	text36
  5848  0E0C                     __ptext36:	
  5849 ;; *************** function _display_update *****************
  5850 ;; Defined at:
  5851 ;;		line 34 in file "DISPLAY.c"
  5852 ;; Parameters:    Size  Location     Type
  5853 ;;		None
  5854 ;; Auto vars:     Size  Location     Type
  5855 ;;		None
  5856 ;; Return value:  Size  Location     Type
  5857 ;;                  1    wreg      void 
  5858 ;; Registers used:
  5859 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  5860 ;; Tracked objects:
  5861 ;;		On entry : 0/0
  5862 ;;		On exit  : 0/0
  5863 ;;		Unchanged: 0/0
  5864 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5865 ;;      Params:         0       0       0       0       0
  5866 ;;      Locals:         0       0       0       0       0
  5867 ;;      Temps:          0       2       0       0       0
  5868 ;;      Totals:         0       2       0       0       0
  5869 ;;Total ram usage:        2 bytes
  5870 ;; Hardware stack levels used:    1
  5871 ;; Hardware stack levels required when called:    3
  5872 ;; This function calls:
  5873 ;;		_adjust_hours_mode_display
  5874 ;;		_adjust_minutes_mode_display
  5875 ;;		_get_mode
  5876 ;;		_normal_mode_display
  5877 ;;		i1_get_time
  5878 ;; This function is called by:
  5879 ;;		_APP_UPDATE
  5880 ;; This function uses a non-reentrant model
  5881 ;;
  5882                           
  5883                           
  5884                           ;psect for function _display_update
  5885  0E0C                     _display_update:	
  5886                           
  5887                           ;DISPLAY.c: 36:     static tByte current_disp_period = (0);;DISPLAY.c: 39:     current_d
      +                          isp_period += (5);
  5888                           
  5889                           ;incstack = 0
  5890 ;; hardware stack exceeded
  5891                           ; Regs used in _display_update: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  5892  0E0C  3005               	movlw	5
  5893  0E0D  1283               	bcf	3,5	;RP0=0, select bank0
  5894  0E0E  1303               	bcf	3,6	;RP1=0, select bank0
  5895  0E0F  00A3               	movwf	??_display_update
  5896  0E10  0823               	movf	??_display_update,w
  5897  0E11  07CE               	addwf	display_update@current_disp_period,f
  5898                           
  5899                           ;DISPLAY.c: 40:     dot_blink_counter += (5);
  5900  0E12  3005               	movlw	5
  5901  0E13  1683               	bsf	3,5	;RP0=1, select bank1
  5902  0E14  1303               	bcf	3,6	;RP1=0, select bank1
  5903  0E15  07BA               	addwf	_dot_blink_counter^(0+128),f
  5904  0E16  1803               	skipnc
  5905  0E17  0ABB               	incf	(_dot_blink_counter+1)^(0+128),f
  5906  0E18  3000               	movlw	0
  5907  0E19  07BB               	addwf	(_dot_blink_counter+1)^(0+128),f
  5908                           
  5909                           ;DISPLAY.c: 41:     mode_blink_counter += (5);
  5910  0E1A  3005               	movlw	5
  5911  0E1B  07B8               	addwf	_mode_blink_counter^(0+128),f
  5912  0E1C  1803               	skipnc
  5913  0E1D  0AB9               	incf	(_mode_blink_counter+1)^(0+128),f
  5914  0E1E  3000               	movlw	0
  5915  0E1F  07B9               	addwf	(_mode_blink_counter+1)^(0+128),f
  5916                           
  5917                           ;DISPLAY.c: 43:     if(current_disp_period < (20)){
  5918  0E20  3014               	movlw	20
  5919  0E21  1283               	bcf	3,5	;RP0=0, select bank0
  5920  0E22  1303               	bcf	3,6	;RP1=0, select bank0
  5921  0E23  024E               	subwf	display_update@current_disp_period,w
  5922  0E24  1C03               	btfss	3,0
  5923  0E25  0008               	return
  5924                           
  5925                           ;DISPLAY.c: 47:     current_disp_period = (0);
  5926  0E26  01CE               	clrf	display_update@current_disp_period
  5927                           
  5928                           ;DISPLAY.c: 50:     get_time(&display_time);
  5929  0E27  3055               	movlw	(low (_display_time| 0))& (0+255)
  5930  0E28  120A  158A  232C  120A  158A  	fcall	i1_get_time
  5931                           
  5932                           ;DISPLAY.c: 51:     get_mode(&display_mode);
  5933  0E2D  3058               	movlw	(low (_display_mode| 0))& (0+255)
  5934  0E2E  120A  158A  228F  120A  158A  	fcall	_get_mode
  5935                           
  5936                           ;DISPLAY.c: 54:     switch(display_mode){
  5937  0E33  2E40               	goto	i1l2541
  5938  0E34                     i1l2533:	
  5939                           
  5940                           ;DISPLAY.c: 58:             normal_mode_display();
  5941  0E34  120A  118A  253B   	fcall	_normal_mode_display
  5942                           
  5943                           ;DISPLAY.c: 60:             break;
  5944  0E37  0008               	return
  5945  0E38                     i1l2535:	
  5946                           
  5947                           ;DISPLAY.c: 64:             adjust_hours_mode_display();
  5948  0E38  120A  118A  23F9   	fcall	_adjust_hours_mode_display
  5949                           
  5950                           ;DISPLAY.c: 66:             break;
  5951  0E3B  0008               	return
  5952  0E3C                     i1l2537:	
  5953                           
  5954                           ;DISPLAY.c: 70:             adjust_minutes_mode_display();
  5955  0E3C  120A  118A  2352   	fcall	_adjust_minutes_mode_display
  5956                           
  5957                           ;DISPLAY.c: 72:         break;
  5958  0E3F  0008               	return
  5959  0E40                     i1l2541:	
  5960  0E40  1283               	bcf	3,5	;RP0=0, select bank0
  5961  0E41  1303               	bcf	3,6	;RP1=0, select bank0
  5962  0E42  0858               	movf	_display_mode,w
  5963  0E43  00A3               	movwf	??_display_update
  5964  0E44  01A4               	clrf	??_display_update+1
  5965                           
  5966                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  5967                           ; Switch size 1, requested type "simple"
  5968                           ; Number of cases is 1, Range of values is 0 to 0
  5969                           ; switch strategies available:
  5970                           ; Name         Instructions Cycles
  5971                           ; simple_byte            4     3 (average)
  5972                           ; direct_byte           11     8 (fixed)
  5973                           ; jumptable            260     6 (fixed)
  5974                           ;	Chosen strategy is simple_byte
  5975  0E45  0824               	movf	??_display_update+1,w
  5976  0E46  3A00               	xorlw	0	; case 0
  5977  0E47  1903               	skipnz
  5978  0E48  2E4A               	goto	i1l3185
  5979  0E49  2E55               	goto	i1l267
  5980  0E4A                     i1l3185:	
  5981                           
  5982                           ; Switch size 1, requested type "simple"
  5983                           ; Number of cases is 3, Range of values is 0 to 2
  5984                           ; switch strategies available:
  5985                           ; Name         Instructions Cycles
  5986                           ; simple_byte           10     6 (average)
  5987                           ; direct_byte           17     8 (fixed)
  5988                           ; jumptable            260     6 (fixed)
  5989                           ;	Chosen strategy is simple_byte
  5990  0E4A  0823               	movf	??_display_update,w
  5991  0E4B  3A00               	xorlw	0	; case 0
  5992  0E4C  1903               	skipnz
  5993  0E4D  2E34               	goto	i1l2533
  5994  0E4E  3A01               	xorlw	1	; case 1
  5995  0E4F  1903               	skipnz
  5996  0E50  2E3C               	goto	i1l2537
  5997  0E51  3A03               	xorlw	3	; case 2
  5998  0E52  1903               	skipnz
  5999  0E53  2E38               	goto	i1l2535
  6000  0E54  2E55               	goto	i1l267
  6001  0E55                     i1l267:	
  6002  0E55  0008               	return
  6003  0E56                     __end_of_display_update:	
  6004                           
  6005                           	psect	text37
  6006  0B2C                     __ptext37:	
  6007 ;; *************** function i1_get_time *****************
  6008 ;; Defined at:
  6009 ;;		line 43 in file "TIME.c"
  6010 ;; Parameters:    Size  Location     Type
  6011 ;;  time            1    wreg     PTR struct .
  6012 ;;		 -> display_time(3), 
  6013 ;; Auto vars:     Size  Location     Type
  6014 ;;  time            1    1[COMMON] PTR struct .
  6015 ;;		 -> display_time(3), 
  6016 ;; Return value:  Size  Location     Type
  6017 ;;                  1    wreg      void 
  6018 ;; Registers used:
  6019 ;;		wreg, fsr0l, fsr0h, status,2, status,0
  6020 ;; Tracked objects:
  6021 ;;		On entry : 0/0
  6022 ;;		On exit  : 0/0
  6023 ;;		Unchanged: 0/0
  6024 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  6025 ;;      Params:         0       0       0       0       0
  6026 ;;      Locals:         1       0       0       0       0
  6027 ;;      Temps:          1       0       0       0       0
  6028 ;;      Totals:         2       0       0       0       0
  6029 ;;Total ram usage:        2 bytes
  6030 ;; Hardware stack levels used:    1
  6031 ;; This function calls:
  6032 ;;		Nothing
  6033 ;; This function is called by:
  6034 ;;		_display_update
  6035 ;; This function uses a non-reentrant model
  6036 ;;
  6037                           
  6038                           
  6039                           ;psect for function i1_get_time
  6040  0B2C                     i1_get_time:	
  6041                           
  6042                           ;incstack = 0
  6043                           ; Regs used in i1_get_time: [wreg-fsr0h+status,2+status,0]
  6044                           ;i1get_time@time stored from wreg
  6045  0B2C  00F1               	movwf	i1get_time@time
  6046                           
  6047                           ;TIME.c: 47:     time->secounds = current_time.secounds;
  6048  0B2D  1283               	bcf	3,5	;RP0=0, select bank0
  6049  0B2E  1303               	bcf	3,6	;RP1=0, select bank0
  6050  0B2F  084B               	movf	_current_time,w
  6051  0B30  00F0               	movwf	??i1_get_time
  6052  0B31  0871               	movf	i1get_time@time,w
  6053  0B32  0084               	movwf	4
  6054  0B33  0870               	movf	??i1_get_time,w
  6055  0B34  1383               	bcf	3,7	;select IRP bank0
  6056  0B35  0080               	movwf	0
  6057                           
  6058                           ;TIME.c: 49:     time->minutes = current_time.minutes;
  6059  0B36  084C               	movf	_current_time+1,w
  6060  0B37  00F0               	movwf	??i1_get_time
  6061  0B38  0A71               	incf	i1get_time@time,w
  6062  0B39  0084               	movwf	4
  6063  0B3A  0870               	movf	??i1_get_time,w
  6064  0B3B  0080               	movwf	0
  6065                           
  6066                           ;TIME.c: 51:     time->hours = current_time.hours;
  6067  0B3C  084D               	movf	_current_time+2,w
  6068  0B3D  00F0               	movwf	??i1_get_time
  6069  0B3E  0871               	movf	i1get_time@time,w
  6070  0B3F  3E02               	addlw	2
  6071  0B40  0084               	movwf	4
  6072  0B41  0870               	movf	??i1_get_time,w
  6073  0B42  0080               	movwf	0
  6074  0B43  0008               	return
  6075  0B44                     __end_ofi1_get_time:	
  6076                           
  6077                           	psect	text38
  6078  053B                     __ptext38:	
  6079 ;; *************** function _normal_mode_display *****************
  6080 ;; Defined at:
  6081 ;;		line 80 in file "DISPLAY.c"
  6082 ;; Parameters:    Size  Location     Type
  6083 ;;		None
  6084 ;; Auto vars:     Size  Location     Type
  6085 ;;		None
  6086 ;; Return value:  Size  Location     Type
  6087 ;;                  1    wreg      void 
  6088 ;; Registers used:
  6089 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  6090 ;; Tracked objects:
  6091 ;;		On entry : 0/0
  6092 ;;		On exit  : 0/0
  6093 ;;		Unchanged: 0/0
  6094 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  6095 ;;      Params:         0       0       0       0       0
  6096 ;;      Locals:         0       0       0       0       0
  6097 ;;      Temps:          0       3       0       0       0
  6098 ;;      Totals:         0       3       0       0       0
  6099 ;;Total ram usage:        3 bytes
  6100 ;; Hardware stack levels used:    1
  6101 ;; Hardware stack levels required when called:    2
  6102 ;; This function calls:
  6103 ;;		_ssdDot_getState
  6104 ;;		i1___awdiv
  6105 ;;		i1___awmod
  6106 ;;		i1_ssdDot_setState
  6107 ;;		i1_ssd_setSymbol
  6108 ;; This function is called by:
  6109 ;;		_display_update
  6110 ;; This function uses a non-reentrant model
  6111 ;;
  6112                           
  6113                           
  6114                           ;psect for function _normal_mode_display
  6115  053B                     _normal_mode_display:	
  6116                           
  6117                           ;DISPLAY.c: 81:     ssd_setSymbol(ssd_minute_units , display_time.minutes % 10);
  6118                           
  6119                           ;incstack = 0
  6120 ;; hardware stack exceeded
  6121                           ; Regs used in _normal_mode_display: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  6122  053B  300A               	movlw	10
  6123  053C  00F0               	movwf	i1___awmod@divisor
  6124  053D  3000               	movlw	0
  6125  053E  00F1               	movwf	i1___awmod@divisor+1
  6126  053F  1283               	bcf	3,5	;RP0=0, select bank0
  6127  0540  1303               	bcf	3,6	;RP1=0, select bank0
  6128  0541  0856               	movf	_display_time+1,w
  6129  0542  00A0               	movwf	??_normal_mode_display
  6130  0543  01A1               	clrf	??_normal_mode_display+1
  6131  0544  0820               	movf	??_normal_mode_display,w
  6132  0545  00F2               	movwf	i1___awmod@dividend
  6133  0546  0821               	movf	??_normal_mode_display+1,w
  6134  0547  00F3               	movwf	i1___awmod@dividend+1
  6135  0548  120A  158A  2656  120A  118A  	fcall	i1___awmod
  6136  054D  0870               	movf	?i1___awmod,w
  6137  054E  1283               	bcf	3,5	;RP0=0, select bank0
  6138  054F  1303               	bcf	3,6	;RP1=0, select bank0
  6139  0550  00A2               	movwf	??_normal_mode_display+2
  6140  0551  0822               	movf	??_normal_mode_display+2,w
  6141  0552  00F9               	movwf	i1ssd_setSymbol@symbol
  6142  0553  3000               	movlw	0
  6143  0554  120A  158A  22B9  120A  118A  	fcall	i1_ssd_setSymbol
  6144                           
  6145                           ;DISPLAY.c: 82:     ssd_setSymbol(ssd_minute_tens , display_time.minutes / 10);
  6146  0559  300A               	movlw	10
  6147  055A  00F0               	movwf	i1___awdiv@divisor
  6148  055B  3000               	movlw	0
  6149  055C  00F1               	movwf	i1___awdiv@divisor+1
  6150  055D  1283               	bcf	3,5	;RP0=0, select bank0
  6151  055E  1303               	bcf	3,6	;RP1=0, select bank0
  6152  055F  0856               	movf	_display_time+1,w
  6153  0560  00A0               	movwf	??_normal_mode_display
  6154  0561  01A1               	clrf	??_normal_mode_display+1
  6155  0562  0820               	movf	??_normal_mode_display,w
  6156  0563  00F2               	movwf	i1___awdiv@dividend
  6157  0564  0821               	movf	??_normal_mode_display+1,w
  6158  0565  00F3               	movwf	i1___awdiv@dividend+1
  6159  0566  120A  158A  26ED  120A  118A  	fcall	i1___awdiv
  6160  056B  0870               	movf	?i1___awdiv,w
  6161  056C  1283               	bcf	3,5	;RP0=0, select bank0
  6162  056D  1303               	bcf	3,6	;RP1=0, select bank0
  6163  056E  00A2               	movwf	??_normal_mode_display+2
  6164  056F  0822               	movf	??_normal_mode_display+2,w
  6165  0570  00F9               	movwf	i1ssd_setSymbol@symbol
  6166  0571  3001               	movlw	1
  6167  0572  120A  158A  22B9  120A  118A  	fcall	i1_ssd_setSymbol
  6168                           
  6169                           ;DISPLAY.c: 83:     ssd_setSymbol(ssd_hour_units , display_time.hours % 10);
  6170  0577  300A               	movlw	10
  6171  0578  00F0               	movwf	i1___awmod@divisor
  6172  0579  3000               	movlw	0
  6173  057A  00F1               	movwf	i1___awmod@divisor+1
  6174  057B  1283               	bcf	3,5	;RP0=0, select bank0
  6175  057C  1303               	bcf	3,6	;RP1=0, select bank0
  6176  057D  0857               	movf	_display_time+2,w
  6177  057E  00A0               	movwf	??_normal_mode_display
  6178  057F  01A1               	clrf	??_normal_mode_display+1
  6179  0580  0820               	movf	??_normal_mode_display,w
  6180  0581  00F2               	movwf	i1___awmod@dividend
  6181  0582  0821               	movf	??_normal_mode_display+1,w
  6182  0583  00F3               	movwf	i1___awmod@dividend+1
  6183  0584  120A  158A  2656  120A  118A  	fcall	i1___awmod
  6184  0589  0870               	movf	?i1___awmod,w
  6185  058A  1283               	bcf	3,5	;RP0=0, select bank0
  6186  058B  1303               	bcf	3,6	;RP1=0, select bank0
  6187  058C  00A2               	movwf	??_normal_mode_display+2
  6188  058D  0822               	movf	??_normal_mode_display+2,w
  6189  058E  00F9               	movwf	i1ssd_setSymbol@symbol
  6190  058F  3002               	movlw	2
  6191  0590  120A  158A  22B9  120A  118A  	fcall	i1_ssd_setSymbol
  6192                           
  6193                           ;DISPLAY.c: 84:     ssd_setSymbol(ssd_hour_tens , display_time.hours / 10);
  6194  0595  300A               	movlw	10
  6195  0596  00F0               	movwf	i1___awdiv@divisor
  6196  0597  3000               	movlw	0
  6197  0598  00F1               	movwf	i1___awdiv@divisor+1
  6198  0599  1283               	bcf	3,5	;RP0=0, select bank0
  6199  059A  1303               	bcf	3,6	;RP1=0, select bank0
  6200  059B  0857               	movf	_display_time+2,w
  6201  059C  00A0               	movwf	??_normal_mode_display
  6202  059D  01A1               	clrf	??_normal_mode_display+1
  6203  059E  0820               	movf	??_normal_mode_display,w
  6204  059F  00F2               	movwf	i1___awdiv@dividend
  6205  05A0  0821               	movf	??_normal_mode_display+1,w
  6206  05A1  00F3               	movwf	i1___awdiv@dividend+1
  6207  05A2  120A  158A  26ED  120A  118A  	fcall	i1___awdiv
  6208  05A7  0870               	movf	?i1___awdiv,w
  6209  05A8  1283               	bcf	3,5	;RP0=0, select bank0
  6210  05A9  1303               	bcf	3,6	;RP1=0, select bank0
  6211  05AA  00A2               	movwf	??_normal_mode_display+2
  6212  05AB  0822               	movf	??_normal_mode_display+2,w
  6213  05AC  00F9               	movwf	i1ssd_setSymbol@symbol
  6214  05AD  3003               	movlw	3
  6215  05AE  120A  158A  22B9  120A  118A  	fcall	i1_ssd_setSymbol
  6216                           
  6217                           ;DISPLAY.c: 85:     if(dot_blink_counter == (1000)){
  6218  05B3  30E8               	movlw	232
  6219  05B4  1683               	bsf	3,5	;RP0=1, select bank1
  6220  05B5  1303               	bcf	3,6	;RP1=0, select bank1
  6221  05B6  063A               	xorwf	_dot_blink_counter^(0+128),w
  6222  05B7  3003               	movlw	3
  6223  05B8  1903               	skipnz
  6224  05B9  063B               	xorwf	(_dot_blink_counter+1)^(0+128),w
  6225  05BA  1D03               	btfss	3,2
  6226  05BB  2DCC               	goto	i1l2187
  6227                           
  6228                           ;DISPLAY.c: 86:         dot_blink_counter = (0);
  6229  05BC  01BA               	clrf	_dot_blink_counter^(0+128)
  6230  05BD  01BB               	clrf	(_dot_blink_counter+1)^(0+128)
  6231                           
  6232                           ;DISPLAY.c: 87:         ssdDot_setState(!ssdDot_getState());
  6233  05BE  120A  158A  225C  120A  118A  	fcall	_ssdDot_getState
  6234  05C3  3A00               	xorlw	0
  6235  05C4  1D03               	btfss	3,2
  6236  05C5  2DC8               	goto	u181_20
  6237  05C6  3001               	movlw	1
  6238  05C7  2DC9               	goto	u182_20
  6239  05C8                     u181_20:	
  6240  05C8  3000               	movlw	0
  6241  05C9                     u182_20:	
  6242  05C9  120A  158A  2267   	fcall	i1_ssdDot_setState
  6243  05CC                     i1l2187:	
  6244                           
  6245                           ;DISPLAY.c: 89:     mode_blink_counter = (0);
  6246  05CC  1683               	bsf	3,5	;RP0=1, select bank1
  6247  05CD  1303               	bcf	3,6	;RP1=0, select bank1
  6248  05CE  01B8               	clrf	_mode_blink_counter^(0+128)
  6249  05CF  01B9               	clrf	(_mode_blink_counter+1)^(0+128)
  6250  05D0  0008               	return
  6251  05D1                     __end_of_normal_mode_display:	
  6252                           
  6253                           	psect	text39
  6254  0A5C                     __ptext39:	
  6255 ;; *************** function _ssdDot_getState *****************
  6256 ;; Defined at:
  6257 ;;		line 130 in file "SSD.c"
  6258 ;; Parameters:    Size  Location     Type
  6259 ;;		None
  6260 ;; Auto vars:     Size  Location     Type
  6261 ;;		None
  6262 ;; Return value:  Size  Location     Type
  6263 ;;                  1    wreg      enum E21
  6264 ;; Registers used:
  6265 ;;		wreg
  6266 ;; Tracked objects:
  6267 ;;		On entry : 0/0
  6268 ;;		On exit  : 0/0
  6269 ;;		Unchanged: 0/0
  6270 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  6271 ;;      Params:         0       0       0       0       0
  6272 ;;      Locals:         0       0       0       0       0
  6273 ;;      Temps:          0       0       0       0       0
  6274 ;;      Totals:         0       0       0       0       0
  6275 ;;Total ram usage:        0 bytes
  6276 ;; Hardware stack levels used:    1
  6277 ;; This function calls:
  6278 ;;		Nothing
  6279 ;; This function is called by:
  6280 ;;		_normal_mode_display
  6281 ;; This function uses a non-reentrant model
  6282 ;;
  6283                           
  6284                           
  6285                           ;psect for function _ssdDot_getState
  6286  0A5C                     _ssdDot_getState:	
  6287                           
  6288                           ;SSD.c: 131:     return dot_state;
  6289                           
  6290                           ;incstack = 0
  6291                           ; Regs used in _ssdDot_getState: [wreg]
  6292  0A5C  1283               	bcf	3,5	;RP0=0, select bank0
  6293  0A5D  1303               	bcf	3,6	;RP1=0, select bank0
  6294  0A5E  0852               	movf	_dot_state,w
  6295  0A5F  0008               	return
  6296  0A60                     __end_of_ssdDot_getState:	
  6297                           
  6298                           	psect	text40
  6299  0A8F                     __ptext40:	
  6300 ;; *************** function _get_mode *****************
  6301 ;; Defined at:
  6302 ;;		line 54 in file "TIME.c"
  6303 ;; Parameters:    Size  Location     Type
  6304 ;;  mode            1    wreg     PTR enum E871
  6305 ;;		 -> display_mode(1), 
  6306 ;; Auto vars:     Size  Location     Type
  6307 ;;  mode            1    1[COMMON] PTR enum E871
  6308 ;;		 -> display_mode(1), 
  6309 ;; Return value:  Size  Location     Type
  6310 ;;                  1    wreg      void 
  6311 ;; Registers used:
  6312 ;;		wreg, fsr0l, fsr0h
  6313 ;; Tracked objects:
  6314 ;;		On entry : 0/0
  6315 ;;		On exit  : 0/0
  6316 ;;		Unchanged: 0/0
  6317 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  6318 ;;      Params:         0       0       0       0       0
  6319 ;;      Locals:         1       0       0       0       0
  6320 ;;      Temps:          1       0       0       0       0
  6321 ;;      Totals:         2       0       0       0       0
  6322 ;;Total ram usage:        2 bytes
  6323 ;; Hardware stack levels used:    1
  6324 ;; This function calls:
  6325 ;;		Nothing
  6326 ;; This function is called by:
  6327 ;;		_display_update
  6328 ;; This function uses a non-reentrant model
  6329 ;;
  6330                           
  6331                           
  6332                           ;psect for function _get_mode
  6333  0A8F                     _get_mode:	
  6334                           
  6335                           ;incstack = 0
  6336                           ; Regs used in _get_mode: [wregfsr0]
  6337                           ;get_mode@mode stored from wreg
  6338  0A8F  00F1               	movwf	get_mode@mode
  6339                           
  6340                           ;TIME.c: 58:     *(mode) = current_mode;
  6341  0A90  1283               	bcf	3,5	;RP0=0, select bank0
  6342  0A91  1303               	bcf	3,6	;RP1=0, select bank0
  6343  0A92  0850               	movf	_current_mode,w
  6344  0A93  00F0               	movwf	??_get_mode
  6345  0A94  0871               	movf	get_mode@mode,w
  6346  0A95  0084               	movwf	4
  6347  0A96  0870               	movf	??_get_mode,w
  6348  0A97  1383               	bcf	3,7	;select IRP bank0
  6349  0A98  0080               	movwf	0
  6350  0A99  0008               	return
  6351  0A9A                     __end_of_get_mode:	
  6352                           
  6353                           	psect	text41
  6354  0352                     __ptext41:	
  6355 ;; *************** function _adjust_minutes_mode_display *****************
  6356 ;; Defined at:
  6357 ;;		line 110 in file "DISPLAY.c"
  6358 ;; Parameters:    Size  Location     Type
  6359 ;;		None
  6360 ;; Auto vars:     Size  Location     Type
  6361 ;;		None
  6362 ;; Return value:  Size  Location     Type
  6363 ;;                  1    wreg      void 
  6364 ;; Registers used:
  6365 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  6366 ;; Tracked objects:
  6367 ;;		On entry : 0/0
  6368 ;;		On exit  : 0/0
  6369 ;;		Unchanged: 0/0
  6370 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  6371 ;;      Params:         0       0       0       0       0
  6372 ;;      Locals:         0       0       0       0       0
  6373 ;;      Temps:          0       3       0       0       0
  6374 ;;      Totals:         0       3       0       0       0
  6375 ;;Total ram usage:        3 bytes
  6376 ;; Hardware stack levels used:    1
  6377 ;; Hardware stack levels required when called:    2
  6378 ;; This function calls:
  6379 ;;		_ssd_getSymbol
  6380 ;;		i1___awdiv
  6381 ;;		i1___awmod
  6382 ;;		i1_ssdDot_setState
  6383 ;;		i1_ssd_setSymbol
  6384 ;; This function is called by:
  6385 ;;		_display_update
  6386 ;; This function uses a non-reentrant model
  6387 ;;
  6388                           
  6389                           
  6390                           ;psect for function _adjust_minutes_mode_display
  6391  0352                     _adjust_minutes_mode_display:	
  6392                           
  6393                           ;DISPLAY.c: 112:     ssd_setSymbol(ssd_hour_units , display_time.hours % 10);
  6394                           
  6395                           ;incstack = 0
  6396 ;; hardware stack exceeded
  6397                           ; Regs used in _adjust_minutes_mode_display: [wreg-fsr0h+status,2+status,0+pclath+cstack
      +                          ]
  6398  0352  300A               	movlw	10
  6399  0353  00F0               	movwf	i1___awmod@divisor
  6400  0354  3000               	movlw	0
  6401  0355  00F1               	movwf	i1___awmod@divisor+1
  6402  0356  1283               	bcf	3,5	;RP0=0, select bank0
  6403  0357  1303               	bcf	3,6	;RP1=0, select bank0
  6404  0358  0857               	movf	_display_time+2,w
  6405  0359  00A0               	movwf	??_adjust_minutes_mode_display
  6406  035A  01A1               	clrf	??_adjust_minutes_mode_display+1
  6407  035B  0820               	movf	??_adjust_minutes_mode_display,w
  6408  035C  00F2               	movwf	i1___awmod@dividend
  6409  035D  0821               	movf	??_adjust_minutes_mode_display+1,w
  6410  035E  00F3               	movwf	i1___awmod@dividend+1
  6411  035F  120A  158A  2656  120A  118A  	fcall	i1___awmod
  6412  0364  0870               	movf	?i1___awmod,w
  6413  0365  1283               	bcf	3,5	;RP0=0, select bank0
  6414  0366  1303               	bcf	3,6	;RP1=0, select bank0
  6415  0367  00A2               	movwf	??_adjust_minutes_mode_display+2
  6416  0368  0822               	movf	??_adjust_minutes_mode_display+2,w
  6417  0369  00F9               	movwf	i1ssd_setSymbol@symbol
  6418  036A  3002               	movlw	2
  6419  036B  120A  158A  22B9  120A  118A  	fcall	i1_ssd_setSymbol
  6420                           
  6421                           ;DISPLAY.c: 113:     ssd_setSymbol(ssd_hour_tens , display_time.hours / 10);
  6422  0370  300A               	movlw	10
  6423  0371  00F0               	movwf	i1___awdiv@divisor
  6424  0372  3000               	movlw	0
  6425  0373  00F1               	movwf	i1___awdiv@divisor+1
  6426  0374  1283               	bcf	3,5	;RP0=0, select bank0
  6427  0375  1303               	bcf	3,6	;RP1=0, select bank0
  6428  0376  0857               	movf	_display_time+2,w
  6429  0377  00A0               	movwf	??_adjust_minutes_mode_display
  6430  0378  01A1               	clrf	??_adjust_minutes_mode_display+1
  6431  0379  0820               	movf	??_adjust_minutes_mode_display,w
  6432  037A  00F2               	movwf	i1___awdiv@dividend
  6433  037B  0821               	movf	??_adjust_minutes_mode_display+1,w
  6434  037C  00F3               	movwf	i1___awdiv@dividend+1
  6435  037D  120A  158A  26ED  120A  118A  	fcall	i1___awdiv
  6436  0382  0870               	movf	?i1___awdiv,w
  6437  0383  1283               	bcf	3,5	;RP0=0, select bank0
  6438  0384  1303               	bcf	3,6	;RP1=0, select bank0
  6439  0385  00A2               	movwf	??_adjust_minutes_mode_display+2
  6440  0386  0822               	movf	??_adjust_minutes_mode_display+2,w
  6441  0387  00F9               	movwf	i1ssd_setSymbol@symbol
  6442  0388  3003               	movlw	3
  6443  0389  120A  158A  22B9  120A  118A  	fcall	i1_ssd_setSymbol
  6444                           
  6445                           ;DISPLAY.c: 114:     ssdDot_setState(DOT_OFF);
  6446  038E  3000               	movlw	0
  6447  038F  120A  158A  2267  120A  118A  	fcall	i1_ssdDot_setState
  6448                           
  6449                           ;DISPLAY.c: 116:     if(mode_blink_counter == (500)){
  6450  0394  30F4               	movlw	244
  6451  0395  1683               	bsf	3,5	;RP0=1, select bank1
  6452  0396  1303               	bcf	3,6	;RP1=0, select bank1
  6453  0397  0638               	xorwf	_mode_blink_counter^(0+128),w
  6454  0398  1D03               	skipz
  6455  0399  2BF4               	goto	i1l2219
  6456  039A  0339               	decf	(_mode_blink_counter+1)^(0+128),w
  6457  039B  1D03               	btfss	3,2
  6458  039C  2BF4               	goto	i1l2219
  6459                           
  6460                           ;DISPLAY.c: 117:         mode_blink_counter = (0);
  6461  039D  01B8               	clrf	_mode_blink_counter^(0+128)
  6462  039E  01B9               	clrf	(_mode_blink_counter+1)^(0+128)
  6463                           
  6464                           ;DISPLAY.c: 118:         if(ssd_getSymbol(ssd_minute_units) == SSD_NULL){
  6465  039F  3000               	movlw	0
  6466  03A0  120A  158A  229A  120A  118A  	fcall	_ssd_getSymbol
  6467  03A5  3A0A               	xorlw	10
  6468  03A6  1D03               	skipz
  6469  03A7  2BDE               	goto	i1l2217
  6470                           
  6471                           ;DISPLAY.c: 119:             ssd_setSymbol(ssd_minute_units , display_time.minutes % 10)
      +                          ;
  6472  03A8  300A               	movlw	10
  6473  03A9  00F0               	movwf	i1___awmod@divisor
  6474  03AA  3000               	movlw	0
  6475  03AB  00F1               	movwf	i1___awmod@divisor+1
  6476  03AC  1283               	bcf	3,5	;RP0=0, select bank0
  6477  03AD  1303               	bcf	3,6	;RP1=0, select bank0
  6478  03AE  0856               	movf	_display_time+1,w
  6479  03AF  00A0               	movwf	??_adjust_minutes_mode_display
  6480  03B0  01A1               	clrf	??_adjust_minutes_mode_display+1
  6481  03B1  0820               	movf	??_adjust_minutes_mode_display,w
  6482  03B2  00F2               	movwf	i1___awmod@dividend
  6483  03B3  0821               	movf	??_adjust_minutes_mode_display+1,w
  6484  03B4  00F3               	movwf	i1___awmod@dividend+1
  6485  03B5  120A  158A  2656  120A  118A  	fcall	i1___awmod
  6486  03BA  0870               	movf	?i1___awmod,w
  6487  03BB  1283               	bcf	3,5	;RP0=0, select bank0
  6488  03BC  1303               	bcf	3,6	;RP1=0, select bank0
  6489  03BD  00A2               	movwf	??_adjust_minutes_mode_display+2
  6490  03BE  0822               	movf	??_adjust_minutes_mode_display+2,w
  6491  03BF  00F9               	movwf	i1ssd_setSymbol@symbol
  6492  03C0  3000               	movlw	0
  6493  03C1  120A  158A  22B9  120A  118A  	fcall	i1_ssd_setSymbol
  6494                           
  6495                           ;DISPLAY.c: 120:             ssd_setSymbol(ssd_minute_tens , display_time.minutes / 10);
  6496  03C6  300A               	movlw	10
  6497  03C7  00F0               	movwf	i1___awdiv@divisor
  6498  03C8  3000               	movlw	0
  6499  03C9  00F1               	movwf	i1___awdiv@divisor+1
  6500  03CA  1283               	bcf	3,5	;RP0=0, select bank0
  6501  03CB  1303               	bcf	3,6	;RP1=0, select bank0
  6502  03CC  0856               	movf	_display_time+1,w
  6503  03CD  00A0               	movwf	??_adjust_minutes_mode_display
  6504  03CE  01A1               	clrf	??_adjust_minutes_mode_display+1
  6505  03CF  0820               	movf	??_adjust_minutes_mode_display,w
  6506  03D0  00F2               	movwf	i1___awdiv@dividend
  6507  03D1  0821               	movf	??_adjust_minutes_mode_display+1,w
  6508  03D2  00F3               	movwf	i1___awdiv@dividend+1
  6509  03D3  120A  158A  26ED  120A  118A  	fcall	i1___awdiv
  6510  03D8  0870               	movf	?i1___awdiv,w
  6511  03D9  1283               	bcf	3,5	;RP0=0, select bank0
  6512  03DA  1303               	bcf	3,6	;RP1=0, select bank0
  6513  03DB  00A2               	movwf	??_adjust_minutes_mode_display+2
  6514  03DC  0822               	movf	??_adjust_minutes_mode_display+2,w
  6515  03DD  2BEF               	goto	L2
  6516  03DE                     i1l2217:	
  6517                           ;DISPLAY.c: 121:         }else {
  6518                           
  6519                           
  6520                           ;DISPLAY.c: 122:             ssd_setSymbol(ssd_minute_units , SSD_NULL);
  6521  03DE  300A               	movlw	10
  6522  03DF  1283               	bcf	3,5	;RP0=0, select bank0
  6523  03E0  1303               	bcf	3,6	;RP1=0, select bank0
  6524  03E1  00A0               	movwf	??_adjust_minutes_mode_display
  6525  03E2  0820               	movf	??_adjust_minutes_mode_display,w
  6526  03E3  00F9               	movwf	i1ssd_setSymbol@symbol
  6527  03E4  3000               	movlw	0
  6528  03E5  120A  158A  22B9  120A  118A  	fcall	i1_ssd_setSymbol
  6529                           
  6530                           ;DISPLAY.c: 123:             ssd_setSymbol(ssd_minute_tens , SSD_NULL);
  6531  03EA  300A               	movlw	10
  6532  03EB  1283               	bcf	3,5	;RP0=0, select bank0
  6533  03EC  1303               	bcf	3,6	;RP1=0, select bank0
  6534  03ED  00A0               	movwf	??_adjust_minutes_mode_display
  6535  03EE  0820               	movf	??_adjust_minutes_mode_display,w
  6536  03EF                     L2:	
  6537  03EF  00F9               	movwf	i1ssd_setSymbol@symbol
  6538  03F0  3001               	movlw	1
  6539  03F1  120A  158A  22B9   	fcall	i1_ssd_setSymbol
  6540  03F4                     i1l2219:	
  6541                           
  6542                           ;DISPLAY.c: 127:     dot_blink_counter = (0);
  6543  03F4  1683               	bsf	3,5	;RP0=1, select bank1
  6544  03F5  1303               	bcf	3,6	;RP1=0, select bank1
  6545  03F6  01BA               	clrf	_dot_blink_counter^(0+128)
  6546  03F7  01BB               	clrf	(_dot_blink_counter+1)^(0+128)
  6547  03F8  0008               	return
  6548  03F9                     __end_of_adjust_minutes_mode_display:	
  6549                           
  6550                           	psect	text42
  6551  03F9                     __ptext42:	
  6552 ;; *************** function _adjust_hours_mode_display *****************
  6553 ;; Defined at:
  6554 ;;		line 92 in file "DISPLAY.c"
  6555 ;; Parameters:    Size  Location     Type
  6556 ;;		None
  6557 ;; Auto vars:     Size  Location     Type
  6558 ;;		None
  6559 ;; Return value:  Size  Location     Type
  6560 ;;                  1    wreg      void 
  6561 ;; Registers used:
  6562 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  6563 ;; Tracked objects:
  6564 ;;		On entry : 0/0
  6565 ;;		On exit  : 0/0
  6566 ;;		Unchanged: 0/0
  6567 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  6568 ;;      Params:         0       0       0       0       0
  6569 ;;      Locals:         0       0       0       0       0
  6570 ;;      Temps:          0       3       0       0       0
  6571 ;;      Totals:         0       3       0       0       0
  6572 ;;Total ram usage:        3 bytes
  6573 ;; Hardware stack levels used:    1
  6574 ;; Hardware stack levels required when called:    2
  6575 ;; This function calls:
  6576 ;;		_ssd_getSymbol
  6577 ;;		i1___awdiv
  6578 ;;		i1___awmod
  6579 ;;		i1_ssdDot_setState
  6580 ;;		i1_ssd_setSymbol
  6581 ;; This function is called by:
  6582 ;;		_display_update
  6583 ;; This function uses a non-reentrant model
  6584 ;;
  6585                           
  6586                           
  6587                           ;psect for function _adjust_hours_mode_display
  6588  03F9                     _adjust_hours_mode_display:	
  6589                           
  6590                           ;DISPLAY.c: 93:     ssd_setSymbol(ssd_minute_units , display_time.minutes % 10);
  6591                           
  6592                           ;incstack = 0
  6593 ;; hardware stack exceeded
  6594                           ; Regs used in _adjust_hours_mode_display: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  6595  03F9  300A               	movlw	10
  6596  03FA  00F0               	movwf	i1___awmod@divisor
  6597  03FB  3000               	movlw	0
  6598  03FC  00F1               	movwf	i1___awmod@divisor+1
  6599  03FD  1283               	bcf	3,5	;RP0=0, select bank0
  6600  03FE  1303               	bcf	3,6	;RP1=0, select bank0
  6601  03FF  0856               	movf	_display_time+1,w
  6602  0400  00A0               	movwf	??_adjust_hours_mode_display
  6603  0401  01A1               	clrf	??_adjust_hours_mode_display+1
  6604  0402  0820               	movf	??_adjust_hours_mode_display,w
  6605  0403  00F2               	movwf	i1___awmod@dividend
  6606  0404  0821               	movf	??_adjust_hours_mode_display+1,w
  6607  0405  00F3               	movwf	i1___awmod@dividend+1
  6608  0406  120A  158A  2656  120A  118A  	fcall	i1___awmod
  6609  040B  0870               	movf	?i1___awmod,w
  6610  040C  1283               	bcf	3,5	;RP0=0, select bank0
  6611  040D  1303               	bcf	3,6	;RP1=0, select bank0
  6612  040E  00A2               	movwf	??_adjust_hours_mode_display+2
  6613  040F  0822               	movf	??_adjust_hours_mode_display+2,w
  6614  0410  00F9               	movwf	i1ssd_setSymbol@symbol
  6615  0411  3000               	movlw	0
  6616  0412  120A  158A  22B9  120A  118A  	fcall	i1_ssd_setSymbol
  6617                           
  6618                           ;DISPLAY.c: 94:     ssd_setSymbol(ssd_minute_tens , display_time.minutes / 10);
  6619  0417  300A               	movlw	10
  6620  0418  00F0               	movwf	i1___awdiv@divisor
  6621  0419  3000               	movlw	0
  6622  041A  00F1               	movwf	i1___awdiv@divisor+1
  6623  041B  1283               	bcf	3,5	;RP0=0, select bank0
  6624  041C  1303               	bcf	3,6	;RP1=0, select bank0
  6625  041D  0856               	movf	_display_time+1,w
  6626  041E  00A0               	movwf	??_adjust_hours_mode_display
  6627  041F  01A1               	clrf	??_adjust_hours_mode_display+1
  6628  0420  0820               	movf	??_adjust_hours_mode_display,w
  6629  0421  00F2               	movwf	i1___awdiv@dividend
  6630  0422  0821               	movf	??_adjust_hours_mode_display+1,w
  6631  0423  00F3               	movwf	i1___awdiv@dividend+1
  6632  0424  120A  158A  26ED  120A  118A  	fcall	i1___awdiv
  6633  0429  0870               	movf	?i1___awdiv,w
  6634  042A  1283               	bcf	3,5	;RP0=0, select bank0
  6635  042B  1303               	bcf	3,6	;RP1=0, select bank0
  6636  042C  00A2               	movwf	??_adjust_hours_mode_display+2
  6637  042D  0822               	movf	??_adjust_hours_mode_display+2,w
  6638  042E  00F9               	movwf	i1ssd_setSymbol@symbol
  6639  042F  3001               	movlw	1
  6640  0430  120A  158A  22B9  120A  118A  	fcall	i1_ssd_setSymbol
  6641                           
  6642                           ;DISPLAY.c: 95:     ssdDot_setState(DOT_OFF);
  6643  0435  3000               	movlw	0
  6644  0436  120A  158A  2267  120A  118A  	fcall	i1_ssdDot_setState
  6645                           
  6646                           ;DISPLAY.c: 97:     if(mode_blink_counter == (500)){
  6647  043B  30F4               	movlw	244
  6648  043C  1683               	bsf	3,5	;RP0=1, select bank1
  6649  043D  1303               	bcf	3,6	;RP1=0, select bank1
  6650  043E  0638               	xorwf	_mode_blink_counter^(0+128),w
  6651  043F  1D03               	skipz
  6652  0440  2C9B               	goto	i1l2203
  6653  0441  0339               	decf	(_mode_blink_counter+1)^(0+128),w
  6654  0442  1D03               	btfss	3,2
  6655  0443  2C9B               	goto	i1l2203
  6656                           
  6657                           ;DISPLAY.c: 98:         mode_blink_counter = (0);
  6658  0444  01B8               	clrf	_mode_blink_counter^(0+128)
  6659  0445  01B9               	clrf	(_mode_blink_counter+1)^(0+128)
  6660                           
  6661                           ;DISPLAY.c: 99:         if(ssd_getSymbol(ssd_hour_units) == SSD_NULL){
  6662  0446  3002               	movlw	2
  6663  0447  120A  158A  229A  120A  118A  	fcall	_ssd_getSymbol
  6664  044C  3A0A               	xorlw	10
  6665  044D  1D03               	skipz
  6666  044E  2C85               	goto	i1l2201
  6667                           
  6668                           ;DISPLAY.c: 100:             ssd_setSymbol(ssd_hour_units , display_time.hours % 10);
  6669  044F  300A               	movlw	10
  6670  0450  00F0               	movwf	i1___awmod@divisor
  6671  0451  3000               	movlw	0
  6672  0452  00F1               	movwf	i1___awmod@divisor+1
  6673  0453  1283               	bcf	3,5	;RP0=0, select bank0
  6674  0454  1303               	bcf	3,6	;RP1=0, select bank0
  6675  0455  0857               	movf	_display_time+2,w
  6676  0456  00A0               	movwf	??_adjust_hours_mode_display
  6677  0457  01A1               	clrf	??_adjust_hours_mode_display+1
  6678  0458  0820               	movf	??_adjust_hours_mode_display,w
  6679  0459  00F2               	movwf	i1___awmod@dividend
  6680  045A  0821               	movf	??_adjust_hours_mode_display+1,w
  6681  045B  00F3               	movwf	i1___awmod@dividend+1
  6682  045C  120A  158A  2656  120A  118A  	fcall	i1___awmod
  6683  0461  0870               	movf	?i1___awmod,w
  6684  0462  1283               	bcf	3,5	;RP0=0, select bank0
  6685  0463  1303               	bcf	3,6	;RP1=0, select bank0
  6686  0464  00A2               	movwf	??_adjust_hours_mode_display+2
  6687  0465  0822               	movf	??_adjust_hours_mode_display+2,w
  6688  0466  00F9               	movwf	i1ssd_setSymbol@symbol
  6689  0467  3002               	movlw	2
  6690  0468  120A  158A  22B9  120A  118A  	fcall	i1_ssd_setSymbol
  6691                           
  6692                           ;DISPLAY.c: 101:             ssd_setSymbol(ssd_hour_tens , display_time.hours / 10);
  6693  046D  300A               	movlw	10
  6694  046E  00F0               	movwf	i1___awdiv@divisor
  6695  046F  3000               	movlw	0
  6696  0470  00F1               	movwf	i1___awdiv@divisor+1
  6697  0471  1283               	bcf	3,5	;RP0=0, select bank0
  6698  0472  1303               	bcf	3,6	;RP1=0, select bank0
  6699  0473  0857               	movf	_display_time+2,w
  6700  0474  00A0               	movwf	??_adjust_hours_mode_display
  6701  0475  01A1               	clrf	??_adjust_hours_mode_display+1
  6702  0476  0820               	movf	??_adjust_hours_mode_display,w
  6703  0477  00F2               	movwf	i1___awdiv@dividend
  6704  0478  0821               	movf	??_adjust_hours_mode_display+1,w
  6705  0479  00F3               	movwf	i1___awdiv@dividend+1
  6706  047A  120A  158A  26ED  120A  118A  	fcall	i1___awdiv
  6707  047F  0870               	movf	?i1___awdiv,w
  6708  0480  1283               	bcf	3,5	;RP0=0, select bank0
  6709  0481  1303               	bcf	3,6	;RP1=0, select bank0
  6710  0482  00A2               	movwf	??_adjust_hours_mode_display+2
  6711  0483  0822               	movf	??_adjust_hours_mode_display+2,w
  6712  0484  2C96               	goto	L3
  6713  0485                     i1l2201:	
  6714                           ;DISPLAY.c: 102:         }else {
  6715                           
  6716                           
  6717                           ;DISPLAY.c: 103:             ssd_setSymbol(ssd_hour_units , SSD_NULL);
  6718  0485  300A               	movlw	10
  6719  0486  1283               	bcf	3,5	;RP0=0, select bank0
  6720  0487  1303               	bcf	3,6	;RP1=0, select bank0
  6721  0488  00A0               	movwf	??_adjust_hours_mode_display
  6722  0489  0820               	movf	??_adjust_hours_mode_display,w
  6723  048A  00F9               	movwf	i1ssd_setSymbol@symbol
  6724  048B  3002               	movlw	2
  6725  048C  120A  158A  22B9  120A  118A  	fcall	i1_ssd_setSymbol
  6726                           
  6727                           ;DISPLAY.c: 104:             ssd_setSymbol(ssd_hour_tens , SSD_NULL);
  6728  0491  300A               	movlw	10
  6729  0492  1283               	bcf	3,5	;RP0=0, select bank0
  6730  0493  1303               	bcf	3,6	;RP1=0, select bank0
  6731  0494  00A0               	movwf	??_adjust_hours_mode_display
  6732  0495  0820               	movf	??_adjust_hours_mode_display,w
  6733  0496                     L3:	
  6734  0496  00F9               	movwf	i1ssd_setSymbol@symbol
  6735  0497  3003               	movlw	3
  6736  0498  120A  158A  22B9   	fcall	i1_ssd_setSymbol
  6737  049B                     i1l2203:	
  6738                           
  6739                           ;DISPLAY.c: 107:     dot_blink_counter = (0);
  6740  049B  1683               	bsf	3,5	;RP0=1, select bank1
  6741  049C  1303               	bcf	3,6	;RP1=0, select bank1
  6742  049D  01BA               	clrf	_dot_blink_counter^(0+128)
  6743  049E  01BB               	clrf	(_dot_blink_counter+1)^(0+128)
  6744  049F  0008               	return
  6745  04A0                     __end_of_adjust_hours_mode_display:	
  6746                           
  6747                           	psect	text43
  6748  0AB9                     __ptext43:	
  6749 ;; *************** function i1_ssd_setSymbol *****************
  6750 ;; Defined at:
  6751 ;;		line 58 in file "SSD.c"
  6752 ;; Parameters:    Size  Location     Type
  6753 ;;  ssd             1    wreg     enum E15
  6754 ;;  symbol          1    9[COMMON] enum E2
  6755 ;; Auto vars:     Size  Location     Type
  6756 ;;  ssd             1   12[COMMON] enum E15
  6757 ;; Return value:  Size  Location     Type
  6758 ;;                  1    wreg      void 
  6759 ;; Registers used:
  6760 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  6761 ;; Tracked objects:
  6762 ;;		On entry : 0/0
  6763 ;;		On exit  : 0/0
  6764 ;;		Unchanged: 0/0
  6765 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  6766 ;;      Params:         1       0       0       0       0
  6767 ;;      Locals:         1       0       0       0       0
  6768 ;;      Temps:          2       0       0       0       0
  6769 ;;      Totals:         4       0       0       0       0
  6770 ;;Total ram usage:        4 bytes
  6771 ;; Hardware stack levels used:    1
  6772 ;; Hardware stack levels required when called:    1
  6773 ;; This function calls:
  6774 ;;		i1___bmul
  6775 ;; This function is called by:
  6776 ;;		_normal_mode_display
  6777 ;;		_adjust_hours_mode_display
  6778 ;;		_adjust_minutes_mode_display
  6779 ;; This function uses a non-reentrant model
  6780 ;;
  6781                           
  6782                           
  6783                           ;psect for function i1_ssd_setSymbol
  6784  0AB9                     i1_ssd_setSymbol:	
  6785                           
  6786                           ;incstack = 0
  6787 ;; hardware stack exceeded
  6788                           ; Regs used in i1_ssd_setSymbol: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  6789                           ;i1ssd_setSymbol@ssd stored from wreg
  6790  0AB9  00FC               	movwf	i1ssd_setSymbol@ssd
  6791                           
  6792                           ;SSD.c: 59:     ssd_data[ssd].symbol = symbol;
  6793  0ABA  0879               	movf	i1ssd_setSymbol@symbol,w
  6794  0ABB  00FA               	movwf	??i1_ssd_setSymbol
  6795  0ABC  300A               	movlw	10
  6796  0ABD  00FB               	movwf	??i1_ssd_setSymbol+1
  6797  0ABE  087B               	movf	??i1_ssd_setSymbol+1,w
  6798  0ABF  00F0               	movwf	i1___bmul@multiplicand
  6799  0AC0  087C               	movf	i1ssd_setSymbol@ssd,w
  6800  0AC1  120A  158A  22A8   	fcall	i1___bmul
  6801  0AC4  3E99               	addlw	(low ((_ssd_data| (0+256)+9)))& (0+255)
  6802  0AC5  0084               	movwf	4
  6803  0AC6  087A               	movf	??i1_ssd_setSymbol,w
  6804  0AC7  1783               	bsf	3,7	;select IRP bank3
  6805  0AC8  0080               	movwf	0
  6806  0AC9  0008               	return
  6807  0ACA                     __end_ofi1_ssd_setSymbol:	
  6808                           
  6809                           	psect	text44
  6810  0A67                     __ptext44:	
  6811 ;; *************** function i1_ssdDot_setState *****************
  6812 ;; Defined at:
  6813 ;;		line 127 in file "SSD.c"
  6814 ;; Parameters:    Size  Location     Type
  6815 ;;  state           1    wreg     enum E21
  6816 ;; Auto vars:     Size  Location     Type
  6817 ;;  state           1    1[COMMON] enum E21
  6818 ;; Return value:  Size  Location     Type
  6819 ;;                  1    wreg      void 
  6820 ;; Registers used:
  6821 ;;		wreg
  6822 ;; Tracked objects:
  6823 ;;		On entry : 0/0
  6824 ;;		On exit  : 0/0
  6825 ;;		Unchanged: 0/0
  6826 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  6827 ;;      Params:         0       0       0       0       0
  6828 ;;      Locals:         1       0       0       0       0
  6829 ;;      Temps:          1       0       0       0       0
  6830 ;;      Totals:         2       0       0       0       0
  6831 ;;Total ram usage:        2 bytes
  6832 ;; Hardware stack levels used:    1
  6833 ;; This function calls:
  6834 ;;		Nothing
  6835 ;; This function is called by:
  6836 ;;		_normal_mode_display
  6837 ;;		_adjust_hours_mode_display
  6838 ;;		_adjust_minutes_mode_display
  6839 ;; This function uses a non-reentrant model
  6840 ;;
  6841                           
  6842                           
  6843                           ;psect for function i1_ssdDot_setState
  6844  0A67                     i1_ssdDot_setState:	
  6845                           
  6846                           ;incstack = 0
  6847                           ; Regs used in i1_ssdDot_setState: [wreg]
  6848                           ;i1ssdDot_setState@state stored from wreg
  6849  0A67  00F1               	movwf	i1ssdDot_setState@state
  6850                           
  6851                           ;SSD.c: 128:     dot_state = state;
  6852  0A68  0871               	movf	i1ssdDot_setState@state,w
  6853  0A69  00F0               	movwf	??i1_ssdDot_setState
  6854  0A6A  0870               	movf	??i1_ssdDot_setState,w
  6855  0A6B  1283               	bcf	3,5	;RP0=0, select bank0
  6856  0A6C  1303               	bcf	3,6	;RP1=0, select bank0
  6857  0A6D  00D2               	movwf	_dot_state
  6858  0A6E  0008               	return
  6859  0A6F                     __end_ofi1_ssdDot_setState:	
  6860                           
  6861                           	psect	text45
  6862  0E56                     __ptext45:	
  6863 ;; *************** function i1___awmod *****************
  6864 ;; Defined at:
  6865 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\common\awmod.c"
  6866 ;; Parameters:    Size  Location     Type
  6867 ;;  divisor         2    0[COMMON] int 
  6868 ;;  dividend        2    2[COMMON] int 
  6869 ;; Auto vars:     Size  Location     Type
  6870 ;;  __awmod         1    6[COMMON] unsigned char 
  6871 ;;  __awmod         1    5[COMMON] unsigned char 
  6872 ;; Return value:  Size  Location     Type
  6873 ;;                  2    0[COMMON] int 
  6874 ;; Registers used:
  6875 ;;		wreg, status,2, status,0
  6876 ;; Tracked objects:
  6877 ;;		On entry : 0/0
  6878 ;;		On exit  : 0/0
  6879 ;;		Unchanged: 0/0
  6880 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  6881 ;;      Params:         4       0       0       0       0
  6882 ;;      Locals:         2       0       0       0       0
  6883 ;;      Temps:          1       0       0       0       0
  6884 ;;      Totals:         7       0       0       0       0
  6885 ;;Total ram usage:        7 bytes
  6886 ;; Hardware stack levels used:    1
  6887 ;; This function calls:
  6888 ;;		Nothing
  6889 ;; This function is called by:
  6890 ;;		_sw_plus_handler
  6891 ;;		_update_current_time
  6892 ;;		_normal_mode_display
  6893 ;;		_adjust_hours_mode_display
  6894 ;;		_adjust_minutes_mode_display
  6895 ;; This function uses a non-reentrant model
  6896 ;;
  6897                           
  6898                           
  6899                           ;psect for function i1___awmod
  6900  0E56                     i1___awmod:	
  6901                           
  6902                           ;incstack = 0
  6903                           ; Regs used in i1___awmod: [wreg+status,2+status,0]
  6904  0E56  01F6               	clrf	i1___awmod@sign
  6905  0E57  1FF3               	btfss	i1___awmod@dividend+1,7
  6906  0E58  2E60               	goto	i1l2017
  6907  0E59  09F2               	comf	i1___awmod@dividend,f
  6908  0E5A  09F3               	comf	i1___awmod@dividend+1,f
  6909  0E5B  0AF2               	incf	i1___awmod@dividend,f
  6910  0E5C  1903               	skipnz
  6911  0E5D  0AF3               	incf	i1___awmod@dividend+1,f
  6912  0E5E  01F6               	clrf	i1___awmod@sign
  6913  0E5F  0AF6               	incf	i1___awmod@sign,f
  6914  0E60                     i1l2017:	
  6915  0E60  1FF1               	btfss	i1___awmod@divisor+1,7
  6916  0E61  2E67               	goto	i1l2021
  6917  0E62  09F0               	comf	i1___awmod@divisor,f
  6918  0E63  09F1               	comf	i1___awmod@divisor+1,f
  6919  0E64  0AF0               	incf	i1___awmod@divisor,f
  6920  0E65  1903               	skipnz
  6921  0E66  0AF1               	incf	i1___awmod@divisor+1,f
  6922  0E67                     i1l2021:	
  6923  0E67  0870               	movf	i1___awmod@divisor,w
  6924  0E68  0471               	iorwf	i1___awmod@divisor+1,w
  6925  0E69  1903               	btfsc	3,2
  6926  0E6A  2E94               	goto	i1l2039
  6927  0E6B  01F5               	clrf	i1___awmod@counter
  6928  0E6C  0AF5               	incf	i1___awmod@counter,f
  6929  0E6D                     i1l2029:	
  6930  0E6D  1BF1               	btfsc	i1___awmod@divisor+1,7
  6931  0E6E  2E7B               	goto	i1l2031
  6932  0E6F  3001               	movlw	1
  6933  0E70                     u159_25:	
  6934  0E70  1003               	clrc
  6935  0E71  0DF0               	rlf	i1___awmod@divisor,f
  6936  0E72  0DF1               	rlf	i1___awmod@divisor+1,f
  6937  0E73  3EFF               	addlw	-1
  6938  0E74  1D03               	skipz
  6939  0E75  2E70               	goto	u159_25
  6940  0E76  3001               	movlw	1
  6941  0E77  00F4               	movwf	??i1___awmod
  6942  0E78  0874               	movf	??i1___awmod,w
  6943  0E79  07F5               	addwf	i1___awmod@counter,f
  6944  0E7A  2E6D               	goto	i1l2029
  6945  0E7B                     i1l2031:	
  6946  0E7B  0871               	movf	i1___awmod@divisor+1,w
  6947  0E7C  0273               	subwf	i1___awmod@dividend+1,w
  6948  0E7D  1D03               	skipz
  6949  0E7E  2E81               	goto	u161_25
  6950  0E7F  0870               	movf	i1___awmod@divisor,w
  6951  0E80  0272               	subwf	i1___awmod@dividend,w
  6952  0E81                     u161_25:	
  6953  0E81  1C03               	skipc
  6954  0E82  2E89               	goto	i1l2035
  6955  0E83  0870               	movf	i1___awmod@divisor,w
  6956  0E84  02F2               	subwf	i1___awmod@dividend,f
  6957  0E85  0871               	movf	i1___awmod@divisor+1,w
  6958  0E86  1C03               	skipc
  6959  0E87  03F3               	decf	i1___awmod@dividend+1,f
  6960  0E88  02F3               	subwf	i1___awmod@dividend+1,f
  6961  0E89                     i1l2035:	
  6962  0E89  3001               	movlw	1
  6963  0E8A                     u162_25:	
  6964  0E8A  1003               	clrc
  6965  0E8B  0CF1               	rrf	i1___awmod@divisor+1,f
  6966  0E8C  0CF0               	rrf	i1___awmod@divisor,f
  6967  0E8D  3EFF               	addlw	-1
  6968  0E8E  1D03               	skipz
  6969  0E8F  2E8A               	goto	u162_25
  6970  0E90  3001               	movlw	1
  6971  0E91  02F5               	subwf	i1___awmod@counter,f
  6972  0E92  1D03               	btfss	3,2
  6973  0E93  2E7B               	goto	i1l2031
  6974  0E94                     i1l2039:	
  6975  0E94  0876               	movf	i1___awmod@sign,w
  6976  0E95  1903               	btfsc	3,2
  6977  0E96  2E9C               	goto	i1l2043
  6978  0E97  09F2               	comf	i1___awmod@dividend,f
  6979  0E98  09F3               	comf	i1___awmod@dividend+1,f
  6980  0E99  0AF2               	incf	i1___awmod@dividend,f
  6981  0E9A  1903               	skipnz
  6982  0E9B  0AF3               	incf	i1___awmod@dividend+1,f
  6983  0E9C                     i1l2043:	
  6984  0E9C  0873               	movf	i1___awmod@dividend+1,w
  6985  0E9D  00F1               	movwf	?i1___awmod+1
  6986  0E9E  0872               	movf	i1___awmod@dividend,w
  6987  0E9F  00F0               	movwf	?i1___awmod
  6988  0EA0  0008               	return
  6989  0EA1                     __end_ofi1___awmod:	
  6990                           
  6991                           	psect	text46
  6992  0EED                     __ptext46:	
  6993 ;; *************** function i1___awdiv *****************
  6994 ;; Defined at:
  6995 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\common\awdiv.c"
  6996 ;; Parameters:    Size  Location     Type
  6997 ;;  divisor         2    0[COMMON] int 
  6998 ;;  dividend        2    2[COMMON] int 
  6999 ;; Auto vars:     Size  Location     Type
  7000 ;;  __awdiv         2    7[COMMON] int 
  7001 ;;  __awdiv         1    6[COMMON] unsigned char 
  7002 ;;  __awdiv         1    5[COMMON] unsigned char 
  7003 ;; Return value:  Size  Location     Type
  7004 ;;                  2    0[COMMON] int 
  7005 ;; Registers used:
  7006 ;;		wreg, status,2, status,0
  7007 ;; Tracked objects:
  7008 ;;		On entry : 0/0
  7009 ;;		On exit  : 0/0
  7010 ;;		Unchanged: 0/0
  7011 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  7012 ;;      Params:         4       0       0       0       0
  7013 ;;      Locals:         4       0       0       0       0
  7014 ;;      Temps:          1       0       0       0       0
  7015 ;;      Totals:         9       0       0       0       0
  7016 ;;Total ram usage:        9 bytes
  7017 ;; Hardware stack levels used:    1
  7018 ;; This function calls:
  7019 ;;		Nothing
  7020 ;; This function is called by:
  7021 ;;		_normal_mode_display
  7022 ;;		_adjust_hours_mode_display
  7023 ;;		_adjust_minutes_mode_display
  7024 ;; This function uses a non-reentrant model
  7025 ;;
  7026                           
  7027                           
  7028                           ;psect for function i1___awdiv
  7029  0EED                     i1___awdiv:	
  7030                           
  7031                           ;incstack = 0
  7032                           ; Regs used in i1___awdiv: [wreg+status,2+status,0]
  7033  0EED  01F6               	clrf	i1___awdiv@sign
  7034  0EEE  1FF1               	btfss	i1___awdiv@divisor+1,7
  7035  0EEF  2EF7               	goto	i1l1973
  7036  0EF0  09F0               	comf	i1___awdiv@divisor,f
  7037  0EF1  09F1               	comf	i1___awdiv@divisor+1,f
  7038  0EF2  0AF0               	incf	i1___awdiv@divisor,f
  7039  0EF3  1903               	skipnz
  7040  0EF4  0AF1               	incf	i1___awdiv@divisor+1,f
  7041  0EF5  01F6               	clrf	i1___awdiv@sign
  7042  0EF6  0AF6               	incf	i1___awdiv@sign,f
  7043  0EF7                     i1l1973:	
  7044  0EF7  1FF3               	btfss	i1___awdiv@dividend+1,7
  7045  0EF8  2F02               	goto	i1l1979
  7046  0EF9  09F2               	comf	i1___awdiv@dividend,f
  7047  0EFA  09F3               	comf	i1___awdiv@dividend+1,f
  7048  0EFB  0AF2               	incf	i1___awdiv@dividend,f
  7049  0EFC  1903               	skipnz
  7050  0EFD  0AF3               	incf	i1___awdiv@dividend+1,f
  7051  0EFE  3001               	movlw	1
  7052  0EFF  00F4               	movwf	??i1___awdiv
  7053  0F00  0874               	movf	??i1___awdiv,w
  7054  0F01  06F6               	xorwf	i1___awdiv@sign,f
  7055  0F02                     i1l1979:	
  7056  0F02  01F7               	clrf	i1___awdiv@quotient
  7057  0F03  01F8               	clrf	i1___awdiv@quotient+1
  7058  0F04  0870               	movf	i1___awdiv@divisor,w
  7059  0F05  0471               	iorwf	i1___awdiv@divisor+1,w
  7060  0F06  1903               	btfsc	3,2
  7061  0F07  2F39               	goto	i1l2001
  7062  0F08  01F5               	clrf	i1___awdiv@counter
  7063  0F09  0AF5               	incf	i1___awdiv@counter,f
  7064  0F0A                     i1l1989:	
  7065  0F0A  1BF1               	btfsc	i1___awdiv@divisor+1,7
  7066  0F0B  2F18               	goto	i1l1991
  7067  0F0C  3001               	movlw	1
  7068  0F0D                     u149_25:	
  7069  0F0D  1003               	clrc
  7070  0F0E  0DF0               	rlf	i1___awdiv@divisor,f
  7071  0F0F  0DF1               	rlf	i1___awdiv@divisor+1,f
  7072  0F10  3EFF               	addlw	-1
  7073  0F11  1D03               	skipz
  7074  0F12  2F0D               	goto	u149_25
  7075  0F13  3001               	movlw	1
  7076  0F14  00F4               	movwf	??i1___awdiv
  7077  0F15  0874               	movf	??i1___awdiv,w
  7078  0F16  07F5               	addwf	i1___awdiv@counter,f
  7079  0F17  2F0A               	goto	i1l1989
  7080  0F18                     i1l1991:	
  7081  0F18  3001               	movlw	1
  7082  0F19                     u151_25:	
  7083  0F19  1003               	clrc
  7084  0F1A  0DF7               	rlf	i1___awdiv@quotient,f
  7085  0F1B  0DF8               	rlf	i1___awdiv@quotient+1,f
  7086  0F1C  3EFF               	addlw	-1
  7087  0F1D  1D03               	skipz
  7088  0F1E  2F19               	goto	u151_25
  7089  0F1F  0871               	movf	i1___awdiv@divisor+1,w
  7090  0F20  0273               	subwf	i1___awdiv@dividend+1,w
  7091  0F21  1D03               	skipz
  7092  0F22  2F25               	goto	u152_25
  7093  0F23  0870               	movf	i1___awdiv@divisor,w
  7094  0F24  0272               	subwf	i1___awdiv@dividend,w
  7095  0F25                     u152_25:	
  7096  0F25  1C03               	skipc
  7097  0F26  2F2E               	goto	i1l1997
  7098  0F27  0870               	movf	i1___awdiv@divisor,w
  7099  0F28  02F2               	subwf	i1___awdiv@dividend,f
  7100  0F29  0871               	movf	i1___awdiv@divisor+1,w
  7101  0F2A  1C03               	skipc
  7102  0F2B  03F3               	decf	i1___awdiv@dividend+1,f
  7103  0F2C  02F3               	subwf	i1___awdiv@dividend+1,f
  7104  0F2D  1477               	bsf	i1___awdiv@quotient,0
  7105  0F2E                     i1l1997:	
  7106  0F2E  3001               	movlw	1
  7107  0F2F                     u153_25:	
  7108  0F2F  1003               	clrc
  7109  0F30  0CF1               	rrf	i1___awdiv@divisor+1,f
  7110  0F31  0CF0               	rrf	i1___awdiv@divisor,f
  7111  0F32  3EFF               	addlw	-1
  7112  0F33  1D03               	skipz
  7113  0F34  2F2F               	goto	u153_25
  7114  0F35  3001               	movlw	1
  7115  0F36  02F5               	subwf	i1___awdiv@counter,f
  7116  0F37  1D03               	btfss	3,2
  7117  0F38  2F18               	goto	i1l1991
  7118  0F39                     i1l2001:	
  7119  0F39  0876               	movf	i1___awdiv@sign,w
  7120  0F3A  1903               	btfsc	3,2
  7121  0F3B  2F41               	goto	i1l2005
  7122  0F3C  09F7               	comf	i1___awdiv@quotient,f
  7123  0F3D  09F8               	comf	i1___awdiv@quotient+1,f
  7124  0F3E  0AF7               	incf	i1___awdiv@quotient,f
  7125  0F3F  1903               	skipnz
  7126  0F40  0AF8               	incf	i1___awdiv@quotient+1,f
  7127  0F41                     i1l2005:	
  7128  0F41  0878               	movf	i1___awdiv@quotient+1,w
  7129  0F42  00F1               	movwf	?i1___awdiv+1
  7130  0F43  0877               	movf	i1___awdiv@quotient,w
  7131  0F44  00F0               	movwf	?i1___awdiv
  7132  0F45  0008               	return
  7133  0F46                     __end_ofi1___awdiv:	
  7134                           
  7135                           	psect	text47
  7136  0A9A                     __ptext47:	
  7137 ;; *************** function _ssd_getSymbol *****************
  7138 ;; Defined at:
  7139 ;;		line 61 in file "SSD.c"
  7140 ;; Parameters:    Size  Location     Type
  7141 ;;  ssd             1    wreg     enum E15
  7142 ;; Auto vars:     Size  Location     Type
  7143 ;;  ssd             1    5[COMMON] enum E15
  7144 ;; Return value:  Size  Location     Type
  7145 ;;                  1    wreg      enum E2
  7146 ;; Registers used:
  7147 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  7148 ;; Tracked objects:
  7149 ;;		On entry : 0/0
  7150 ;;		On exit  : 0/0
  7151 ;;		Unchanged: 0/0
  7152 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  7153 ;;      Params:         0       0       0       0       0
  7154 ;;      Locals:         1       0       0       0       0
  7155 ;;      Temps:          1       0       0       0       0
  7156 ;;      Totals:         2       0       0       0       0
  7157 ;;Total ram usage:        2 bytes
  7158 ;; Hardware stack levels used:    1
  7159 ;; Hardware stack levels required when called:    1
  7160 ;; This function calls:
  7161 ;;		i1___bmul
  7162 ;; This function is called by:
  7163 ;;		_adjust_hours_mode_display
  7164 ;;		_adjust_minutes_mode_display
  7165 ;; This function uses a non-reentrant model
  7166 ;;
  7167                           
  7168                           
  7169                           ;psect for function _ssd_getSymbol
  7170  0A9A                     _ssd_getSymbol:	
  7171                           
  7172                           ;incstack = 0
  7173 ;; hardware stack exceeded
  7174                           ; Regs used in _ssd_getSymbol: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  7175                           ;ssd_getSymbol@ssd stored from wreg
  7176  0A9A  00F5               	movwf	ssd_getSymbol@ssd
  7177                           
  7178                           ;SSD.c: 62:     return ssd_data[ssd].symbol;
  7179  0A9B  300A               	movlw	10
  7180  0A9C  00F4               	movwf	??_ssd_getSymbol
  7181  0A9D  0874               	movf	??_ssd_getSymbol,w
  7182  0A9E  00F0               	movwf	i1___bmul@multiplicand
  7183  0A9F  0875               	movf	ssd_getSymbol@ssd,w
  7184  0AA0  120A  158A  22A8   	fcall	i1___bmul
  7185  0AA3  3E99               	addlw	(low ((_ssd_data| (0+256)+9)))& (0+255)
  7186  0AA4  0084               	movwf	4
  7187  0AA5  1783               	bsf	3,7	;select IRP bank3
  7188  0AA6  0800               	movf	0,w
  7189  0AA7  0008               	return
  7190  0AA8                     __end_of_ssd_getSymbol:	
  7191                           
  7192                           	psect	text48
  7193  0AA8                     __ptext48:	
  7194 ;; *************** function i1___bmul *****************
  7195 ;; Defined at:
  7196 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\common\Umul8.c"
  7197 ;; Parameters:    Size  Location     Type
  7198 ;;  multiplier      1    wreg     unsigned char 
  7199 ;;  multiplicand    1    0[COMMON] unsigned char 
  7200 ;; Auto vars:     Size  Location     Type
  7201 ;;  multiplier      1    2[COMMON] unsigned char 
  7202 ;;  __bmul          1    3[COMMON] unsigned char 
  7203 ;; Return value:  Size  Location     Type
  7204 ;;                  1    wreg      unsigned char 
  7205 ;; Registers used:
  7206 ;;		wreg, status,2, status,0
  7207 ;; Tracked objects:
  7208 ;;		On entry : 0/0
  7209 ;;		On exit  : 0/0
  7210 ;;		Unchanged: 0/0
  7211 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  7212 ;;      Params:         1       0       0       0       0
  7213 ;;      Locals:         2       0       0       0       0
  7214 ;;      Temps:          1       0       0       0       0
  7215 ;;      Totals:         4       0       0       0       0
  7216 ;;Total ram usage:        4 bytes
  7217 ;; Hardware stack levels used:    1
  7218 ;; This function calls:
  7219 ;;		Nothing
  7220 ;; This function is called by:
  7221 ;;		_ssd_getSymbol
  7222 ;;		_ssd_update
  7223 ;;		_ssd_on
  7224 ;;		_ssd_off
  7225 ;;		i1_ssd_setSymbol
  7226 ;;		i1_ssd_display
  7227 ;; This function uses a non-reentrant model
  7228 ;;
  7229                           
  7230                           
  7231                           ;psect for function i1___bmul
  7232  0AA8                     i1___bmul:	
  7233                           
  7234                           ;incstack = 0
  7235                           ; Regs used in i1___bmul: [wreg+status,2+status,0]
  7236                           ;i1___bmul@multiplier stored from wreg
  7237  0AA8  00F2               	movwf	i1___bmul@multiplier
  7238  0AA9  01F3               	clrf	i1___bmul@product
  7239  0AAA                     i1l1923:	
  7240  0AAA  1C72               	btfss	i1___bmul@multiplier,0
  7241  0AAB  2AB0               	goto	i1l1927
  7242  0AAC  0870               	movf	i1___bmul@multiplicand,w
  7243  0AAD  00F1               	movwf	??i1___bmul
  7244  0AAE  0871               	movf	??i1___bmul,w
  7245  0AAF  07F3               	addwf	i1___bmul@product,f
  7246  0AB0                     i1l1927:	
  7247  0AB0  1003               	clrc
  7248  0AB1  0DF0               	rlf	i1___bmul@multiplicand,f
  7249  0AB2  1003               	clrc
  7250  0AB3  0CF2               	rrf	i1___bmul@multiplier,f
  7251  0AB4  0872               	movf	i1___bmul@multiplier,w
  7252  0AB5  1D03               	btfss	3,2
  7253  0AB6  2AAA               	goto	i1l1923
  7254  0AB7  0873               	movf	i1___bmul@product,w
  7255  0AB8  0008               	return
  7256  0AB9                     __end_ofi1___bmul:	
  7257  007E                     btemp	set	126	;btemp
  7258  007E                     wtemp0	set	126


Data Sizes:
    Strings     0
    Constant    0
    Data        51
    BSS         84
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14     14      14
    BANK0            80     43      57
    BANK1            80      0      60
    BANK3            96      0      61
    BANK2            96     40      40

Pointer List with Targets:

    get_mode@mode	PTR enum E871 size(1) Largest target is 1
		 -> display_mode(BANK0[1]), 

    get_time@time	PTR struct . size(1) Largest target is 3
		 -> display_time(BANK0[3]), 

    F940.ctrl_value_reg	PTR unsigned char  size(2) Largest target is 512
		 -> RAM(DATA[512]), 

    F940.ctrl_direction_reg	PTR unsigned char  size(2) Largest target is 512
		 -> RAM(DATA[512]), 

    F940.data_value_reg	PTR unsigned char  size(2) Largest target is 512
		 -> RAM(DATA[512]), 

    F940.data_direction_reg	PTR unsigned char  size(2) Largest target is 512
		 -> RAM(DATA[512]), 

    F939.ctrl_value_reg	PTR unsigned char  size(2) Largest target is 512
		 -> RAM(DATA[512]), 

    F939.ctrl_direction_reg	PTR unsigned char  size(2) Largest target is 512
		 -> RAM(DATA[512]), 

    F939.data_value_reg	PTR unsigned char  size(2) Largest target is 512
		 -> RAM(DATA[512]), 

    F939.data_direction_reg	PTR unsigned char  size(2) Largest target is 512
		 -> RAM(DATA[512]), 

    F938.ctrl_value_reg	PTR unsigned char  size(2) Largest target is 512
		 -> RAM(DATA[512]), 

    F938.ctrl_direction_reg	PTR unsigned char  size(2) Largest target is 512
		 -> RAM(DATA[512]), 

    F938.data_value_reg	PTR unsigned char  size(2) Largest target is 512
		 -> RAM(DATA[512]), 

    F938.data_direction_reg	PTR unsigned char  size(2) Largest target is 512
		 -> RAM(DATA[512]), 

    F937.ctrl_value_reg	PTR unsigned char  size(2) Largest target is 512
		 -> RAM(DATA[512]), 

    F937.ctrl_direction_reg	PTR unsigned char  size(2) Largest target is 512
		 -> RAM(DATA[512]), 

    F937.data_value_reg	PTR unsigned char  size(2) Largest target is 512
		 -> RAM(DATA[512]), 

    F937.data_direction_reg	PTR unsigned char  size(2) Largest target is 512
		 -> RAM(DATA[512]), 

    F936.ctrl_value_reg	PTR unsigned char  size(2) Largest target is 512
		 -> RAM(DATA[512]), 

    F936.ctrl_direction_reg	PTR unsigned char  size(2) Largest target is 512
		 -> RAM(DATA[512]), 

    F936.data_value_reg	PTR unsigned char  size(2) Largest target is 512
		 -> RAM(DATA[512]), 

    F936.data_direction_reg	PTR unsigned char  size(2) Largest target is 512
		 -> RAM(DATA[512]), 

    F935.ctrl_value_reg	PTR unsigned char  size(2) Largest target is 512
		 -> RAM(DATA[512]), 

    F935.ctrl_direction_reg	PTR unsigned char  size(2) Largest target is 512
		 -> RAM(DATA[512]), 

    F935.data_value_reg	PTR unsigned char  size(2) Largest target is 512
		 -> RAM(DATA[512]), 

    F935.data_direction_reg	PTR unsigned char  size(2) Largest target is 512
		 -> RAM(DATA[512]), 

    F934.ctrl_value_reg	PTR unsigned char  size(2) Largest target is 512
		 -> RAM(DATA[512]), 

    F934.ctrl_direction_reg	PTR unsigned char  size(2) Largest target is 512
		 -> RAM(DATA[512]), 

    F934.data_value_reg	PTR unsigned char  size(2) Largest target is 512
		 -> RAM(DATA[512]), 

    F934.data_direction_reg	PTR unsigned char  size(2) Largest target is 512
		 -> RAM(DATA[512]), 

    F933.ctrl_value_reg	PTR unsigned char  size(2) Largest target is 512
		 -> RAM(DATA[512]), 

    F933.ctrl_direction_reg	PTR unsigned char  size(2) Largest target is 512
		 -> RAM(DATA[512]), 

    F933.data_value_reg	PTR unsigned char  size(2) Largest target is 512
		 -> RAM(DATA[512]), 

    F933.data_direction_reg	PTR unsigned char  size(2) Largest target is 512
		 -> RAM(DATA[512]), 

    S173$ctrl_value_reg	PTR unsigned char  size(2) Largest target is 512
		 -> RAM(DATA[512]), 

    ssd_data.ctrl_value_reg	PTR unsigned char  size(2) Largest target is 512
		 -> RAM(DATA[512]), 

    S173$ctrl_direction_reg	PTR unsigned char  size(2) Largest target is 512
		 -> RAM(DATA[512]), 

    ssd_data.ctrl_direction_reg	PTR unsigned char  size(2) Largest target is 512
		 -> RAM(DATA[512]), 

    S173$data_value_reg	PTR unsigned char  size(2) Largest target is 512
		 -> RAM(DATA[512]), 

    ssd_data.data_value_reg	PTR unsigned char  size(2) Largest target is 512
		 -> RAM(DATA[512]), 

    S173$data_direction_reg	PTR unsigned char  size(2) Largest target is 512
		 -> RAM(DATA[512]), 

    ssd_data.data_direction_reg	PTR unsigned char  size(2) Largest target is 512
		 -> RAM(DATA[512]), 

    S27$data_reg	PTR volatile unsigned char  size(2) Largest target is 512
		 -> RAM(DATA[512]), 

    switches_data.data_reg	PTR volatile unsigned char  size(2) Largest target is 512
		 -> RAM(DATA[512]), 

    S27$ctrl_reg	PTR volatile unsigned char  size(2) Largest target is 512
		 -> RAM(DATA[512]), 

    switches_data.ctrl_reg	PTR volatile unsigned char  size(2) Largest target is 512
		 -> RAM(DATA[512]), 


Critical Paths under _main in COMMON

    None.

Critical Paths under _APP_UPDATE in COMMON

    _APP_UPDATE->_ssd_update
    _time_update->_update_current_time
    _update_current_time->i1___awmod
    _sw_plus_handler->i1___awmod
    _ssd_update->i1_ssd_display
    i1_ssd_display->i1___bmul
    _ssd_on->i1___bmul
    _ssd_off->i1___bmul
    _normal_mode_display->i1_ssd_setSymbol
    _adjust_minutes_mode_display->i1_ssd_setSymbol
    _adjust_hours_mode_display->i1_ssd_setSymbol
    i1_ssd_setSymbol->i1___awdiv
    _ssd_getSymbol->i1___bmul

Critical Paths under _main in BANK0

    _main->_display_init
    _timer0_init->_T0_counter_mode_state
    _timer0_init->_T0_timer_mode_state
    _timer0_init->_timer0_ovf_setState
    _timer0_init->_timer0_set_mode
    _timer0_init->_timer0_set_prescaller
    _switch_init->_switches_Schematic_init
    _display_init->_ssd_init
    _ssd_setSymbol->___awdiv
    _ssd_init->_ssd_display
    _ssd_display->___bmul

Critical Paths under _APP_UPDATE in BANK0

    _ssd_update->_ssd_off
    _ssd_update->_ssd_on
    _display_update->_adjust_hours_mode_display
    _display_update->_adjust_minutes_mode_display
    _display_update->_normal_mode_display

Critical Paths under _main in BANK1

    None.

Critical Paths under _APP_UPDATE in BANK1

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _APP_UPDATE in BANK3

    None.

Critical Paths under _main in BANK2

    _ssd_init->_ssd_schematic_init

Critical Paths under _APP_UPDATE in BANK2

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 0     0      0    6706
                _T0_timer_mode_state
                       _display_init
                        _switch_init
                          _time_init
                        _timer0_init
                      _timer0_reload
 ---------------------------------------------------------------------------------
 (1) _timer0_init                                          5     3      2     372
                                             18 BANK0      5     3      2
              _T0_counter_mode_state
                _T0_timer_mode_state
                _timer0_ovf_setState
                      _timer0_reload
                    _timer0_set_mode
              _timer0_set_prescaller
 ---------------------------------------------------------------------------------
 (2) _timer0_set_prescaller                                3     3      0      22
                                             15 BANK0      3     3      0
 ---------------------------------------------------------------------------------
 (2) _timer0_set_mode                                      3     3      0      22
                                             15 BANK0      3     3      0
 ---------------------------------------------------------------------------------
 (1) _timer0_reload                                        2     2      0      22
                                             15 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (2) _timer0_ovf_setState                                  3     3      0      22
                                             15 BANK0      3     3      0
 ---------------------------------------------------------------------------------
 (2) _T0_timer_mode_state                                  3     3      0      22
                                             15 BANK0      3     3      0
 ---------------------------------------------------------------------------------
 (2) _T0_counter_mode_state                                3     3      0      22
                                             15 BANK0      3     3      0
 ---------------------------------------------------------------------------------
 (1) _time_init                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _switch_init                                         14    14      0     201
                                             16 BANK0     14    14      0
            _switches_Schematic_init
 ---------------------------------------------------------------------------------
 (2) _switches_Schematic_init                              1     1      0       0
                                             15 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (1) _display_init                                         3     3      0    6089
                                             40 BANK0      3     3      0
                            ___awdiv
                            ___awmod
                           _get_time
                    _ssdDot_setState
                           _ssd_init
                      _ssd_setSymbol
 ---------------------------------------------------------------------------------
 (2) _ssd_setSymbol                                        4     3      1    1610
                                             24 BANK0      4     3      1
                            ___awdiv (ARG)
                            ___awmod (ARG)
                             ___bmul
 ---------------------------------------------------------------------------------
 (2) _ssd_init                                            15    15      0    1621
                                             25 BANK0     15    15      0
                             ___bmul
                        _ssd_display
                 _ssd_schematic_init
 ---------------------------------------------------------------------------------
 (3) _ssd_schematic_init                                  44    44      0     136
                                             15 BANK0      4     4      0
                                              0 BANK2     40    40      0
 ---------------------------------------------------------------------------------
 (3) _ssd_display                                          6     5      1     676
                                             19 BANK0      6     5      1
                             ___bmul
                        _dot_display
 ---------------------------------------------------------------------------------
 (4) _dot_display                                          3     3      0      22
                                             15 BANK0      3     3      0
 ---------------------------------------------------------------------------------
 (3) ___bmul                                               4     3      1     462
                                             15 BANK0      4     3      1
 ---------------------------------------------------------------------------------
 (2) _ssdDot_setState                                      2     2      0      22
                                             15 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (2) _get_time                                             2     2      0     132
                                             15 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (2) ___awmod                                              7     3      4    1500
                                             15 BANK0      7     3      4
 ---------------------------------------------------------------------------------
 (2) ___awdiv                                              9     5      4    1204
                                             15 BANK0      9     5      4
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 4
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (5) _APP_UPDATE                                           3     3      0   10999
                                             12 BANK0      3     3      0
                     _display_update
                         _ssd_update
                      _switch_update
                        _time_update
                    i1_timer0_reload
 ---------------------------------------------------------------------------------
 (6) i1_timer0_reload                                      2     2      0      22
                                              0 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 (6) _time_update                                          3     3      0    1642
                                             10 COMMON     3     3      0
                   _sw_minus_handler
                    _sw_plus_handler
                 _sw_setting_handler
                    _switch_getState
                _update_current_time
 ---------------------------------------------------------------------------------
 (7) _update_current_time                                  3     3      0     764
                                              7 COMMON     3     3      0
                          i1___awmod
 ---------------------------------------------------------------------------------
 (7) _switch_getState                                      4     4      0      45
                                              0 COMMON     4     4      0
 ---------------------------------------------------------------------------------
 (7) _sw_setting_handler                                   2     2      0       0
                                              0 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 (7) _sw_plus_handler                                      2     2      0     764
                                              7 COMMON     2     2      0
                          i1___awmod
 ---------------------------------------------------------------------------------
 (7) _sw_minus_handler                                     2     2      0       0
                                              0 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 (6) _switch_update                                        9     9      0     556
                                              0 COMMON     9     9      0
 ---------------------------------------------------------------------------------
 (6) _ssd_update                                           4     4      0    1560
                                             10 COMMON     4     4      0
                            _ssd_off
                             _ssd_on
                           i1___bmul
                      i1_ssd_display
 ---------------------------------------------------------------------------------
 (7) i1_ssd_display                                        6     5      1     410
                                              4 COMMON     6     5      1
                           i1___bmul
                      i1_dot_display
 ---------------------------------------------------------------------------------
 (8) i1_dot_display                                        3     3      0      22
                                              0 COMMON     3     3      0
 ---------------------------------------------------------------------------------
 (7) _ssd_on                                              13    13      0     384
                                              4 COMMON     1     1      0
                                              0 BANK0     12    12      0
                           i1___bmul
 ---------------------------------------------------------------------------------
 (7) _ssd_off                                             13    13      0     384
                                              4 COMMON     1     1      0
                                              0 BANK0     12    12      0
                           i1___bmul
 ---------------------------------------------------------------------------------
 (6) _display_update                                       2     2      0    7219
                                              3 BANK0      2     2      0
          _adjust_hours_mode_display
        _adjust_minutes_mode_display
                           _get_mode
                _normal_mode_display
                         i1_get_time
 ---------------------------------------------------------------------------------
 (7) i1_get_time                                           2     2      0      66
                                              0 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 (7) _normal_mode_display                                  3     3      0    2154
                                              0 BANK0      3     3      0
                    _ssdDot_getState
                          i1___awdiv
                          i1___awmod
                  i1_ssdDot_setState
                    i1_ssd_setSymbol
 ---------------------------------------------------------------------------------
 (8) _ssdDot_getState                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (7) _get_mode                                             2     2      0      55
                                              0 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 (7) _adjust_minutes_mode_display                          3     3      0    2472
                                              0 BANK0      3     3      0
                      _ssd_getSymbol
                          i1___awdiv
                          i1___awmod
                  i1_ssdDot_setState
                    i1_ssd_setSymbol
 ---------------------------------------------------------------------------------
 (7) _adjust_hours_mode_display                            3     3      0    2472
                                              0 BANK0      3     3      0
                      _ssd_getSymbol
                          i1___awdiv
                          i1___awmod
                  i1_ssdDot_setState
                    i1_ssd_setSymbol
 ---------------------------------------------------------------------------------
 (8) i1_ssd_setSymbol                                      4     3      1     756
                                              9 COMMON     4     3      1
                          i1___awdiv (ARG)
                          i1___awmod (ARG)
                           i1___bmul
 ---------------------------------------------------------------------------------
 (8) i1_ssdDot_setState                                    2     2      0      22
                                              0 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 (8) i1___awmod                                            7     3      4     764
                                              0 COMMON     7     3      4
 ---------------------------------------------------------------------------------
 (8) i1___awdiv                                            9     5      4     612
                                              0 COMMON     9     5      4
 ---------------------------------------------------------------------------------
 (8) _ssd_getSymbol                                        2     2      0     318
                                              4 COMMON     2     2      0
                           i1___bmul
 ---------------------------------------------------------------------------------
 (8) i1___bmul                                             4     3      1     296
                                              0 COMMON     4     3      1
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 8
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _T0_timer_mode_state
   _display_init
     ___awdiv
     ___awmod
     _get_time
     _ssdDot_setState
     _ssd_init
       ___bmul
       _ssd_display
         ___bmul
         _dot_display
       _ssd_schematic_init
     _ssd_setSymbol
       ___awdiv (ARG)
       ___awmod (ARG)
       ___bmul (ARG)
   _switch_init
     _switches_Schematic_init
   _time_init
   _timer0_init
     _T0_counter_mode_state
     _T0_timer_mode_state
     _timer0_ovf_setState
     _timer0_reload
     _timer0_set_mode
     _timer0_set_prescaller
   _timer0_reload

 _APP_UPDATE (ROOT)
   _display_update
     _adjust_hours_mode_display
       _ssd_getSymbol
         i1___bmul
       i1___awdiv
       i1___awmod
       i1_ssdDot_setState
       i1_ssd_setSymbol
         i1___awdiv (ARG)
         i1___awmod (ARG)
         i1___bmul (ARG)
     _adjust_minutes_mode_display
       _ssd_getSymbol
         i1___bmul
       i1___awdiv
       i1___awmod
       i1_ssdDot_setState
       i1_ssd_setSymbol
         i1___awdiv (ARG)
         i1___awmod (ARG)
         i1___bmul (ARG)
     _get_mode
     _normal_mode_display
       _ssdDot_getState
       i1___awdiv
       i1___awmod
       i1_ssdDot_setState
       i1_ssd_setSymbol
         i1___awdiv (ARG)
         i1___awmod (ARG)
         i1___bmul (ARG)
     i1_get_time
   _ssd_update
     _ssd_off
       i1___bmul
     _ssd_on
       i1___bmul
     i1___bmul
     i1_ssd_display
       i1___bmul
       i1_dot_display
   _switch_update
   _time_update
     _sw_minus_handler
     _sw_plus_handler
       i1___awmod
     _sw_setting_handler
     _switch_getState
     _update_current_time
       i1___awmod
   i1_timer0_reload

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BANK3               60      0      3D       9       63.5%
BITBANK3            60      0       0       8        0.0%
SFR3                 0      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
BANK2               60     28      28      11       41.7%
BITBANK2            60      0       0      10        0.0%
SFR2                 0      0       0       5        0.0%
BITSFR2              0      0       0       5        0.0%
BANK1               50      0      3C       7       75.0%
BITBANK1            50      0       0       6        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR1              0      0       0       2        0.0%
BANK0               50     2B      39       5       71.3%
BITBANK0            50      0       0       4        0.0%
SFR0                 0      0       0       1        0.0%
BITSFR0              0      0       0       1        0.0%
COMMON               E      E       E       1      100.0%
BITCOMMON            E      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
DATA                 0      0      E8      12        0.0%
ABS                  0      0      E8       3        0.0%
NULL                 0      0       0       0        0.0%
STACK                0      0       0       2        0.0%
EEDATA             100      0       0       0        0.0%


Microchip Technology PIC Macro Assembler V2.05 build -831301201 
Symbol Table                                                                                   Sun Aug 11 14:38:58 2019

                                   pc 0002          ?_adjust_minutes_mode_display 0070  
                      ___bmul@product 0031                           __CFG_CP$OFF 0000  
                                  l62 0D51                          ___awdiv@sign 0035  
                                  fsr 0004                                   l321 0BB3  
                                 l331 0B9A                                   l323 0BB7  
                                 l340 0FB3                                   l333 0BAE  
                                 l325 0BCB                                   l341 0FBA  
                                 l342 0FC1                                   l351 0BD0  
                                 l343 0FC8                                   l344 0FCF  
                                 l329 0B96                                   l361 0B63  
                                 l353 0BD4                                   l345 0FD6  
                                 l337 0FA5                                   l363 0B75  
                                 l355 0BE8                                   l339 0FAC  
                                 l347 0FFF                                   l359 0B60  
                       ?_display_init 0070                          __CFG_CPD$OFF 0000  
         __size_of_ssd_schematic_init 00B1                          ?_dot_display 0070  
                                 fsr0 0004                                   indf 0000  
                        ___awmod@sign 0035                __end_of_display_update 0E56  
                        __CFG_FOSC$HS 0000                        ?_ssd_setSymbol 0038  
                  i1dot_display@state 0072                            i1_get_time 0B2C  
             __end_ofi1_timer0_reload 0A77                          __CFG_LVP$OFF 0000  
                                l2301 0F89                                  l2305 0F94  
                                l2321 07BD                                  l2225 0FDD  
                                l2075 0BBB                                  l2309 0F9C  
                                l2333 07CA                                  l2325 07C4  
                                l2261 0B9E                                  l2237 0BD8  
                                l2335 07D8                                  l2343 07F1  
                                l2249 0B65                                  l2283 0F5D  
                                l2347 07F9                                  l2339 07E6  
                                l3171 0B6D                                  l2451 0DF5  
                                l2293 0F65                                  l2277 0F52  
                                l2373 063D                                  l3173 0BC3  
                                l3165 0DFF                                  l2453 0E07  
                                l2445 0DE7                                  l2295 0F73  
                                l3175 0BA6                                  l3167 0FE5  
                                l2447 0DEE                                  l1913 0AE5  
                                l3169 0BE0                                  l1909 0ADF  
           ??_switches_Schematic_init 002F                                  u2005 07CD  
                                u2025 07DE                                  u2105 060E  
                                u2114 061C                                  u2035 07E7  
                                u1315 0C0D                                  u2115 061A  
                                u2125 0627                                  u2135 0640  
                                u2155 065B                                  u2075 05E0  
                                u2084 05EE                                  u2085 05EC  
                                u2095 05F4                                  u2610 02AB  
                                u2620 02C1                                  u2630 02D6  
                                u2640 02ED                                  u2704 0214  
                                u1905 0F68                                  u2705 0212  
                                u2650 0302                                  u2714 024C  
                                u2715 024A                                  u2660 0319  
                                u2724 027F                                  u1925 0F74  
                                u2725 027D                                  u2670 032E  
                                u1935 0F80                                  u2680 0344  
                                u1945 0F8A                                  u2694 01E1  
                                u2695 01DF                                  i1l71 0CBC  
               __end_ofi1_ssd_display 0CF2           __end_of_timer0_ovf_setState 0B76  
                        __CFG_WRT$OFF 0000                                  _main 0D1F  
                  _current_sec_period 00BC                                  btemp 007E  
              ?_T0_counter_mode_state 0070                         __CFG_BOREN$ON 0000  
                                start 0010                          get_mode@mode 0071  
                   ___bmul@multiplier 0032               __end_of_ssdDot_getState 0A60  
                         _switch_init 05D1     display_update@current_disp_period 004E  
      __size_of_timer0_set_prescaller 005F         __end_of_timer0_set_prescaller 1000  
                      ??_display_init 0048                                 ?_main 0070  
                      i1___awdiv@sign 0076                       __end_of___awdiv 0FA1  
                       __CFG_WDTE$OFF 0000                       __end_of___awmod 07FE  
                     ___awdiv@divisor 002F                          get_time@time 0030  
                 __size_of_APP_UPDATE 0028                                 i1l202 0DCC  
                               i1l212 0C9E                                 i1l221 0C50  
                               i1l218 0C31                                 i1l267 0E55  
                     ___awdiv@counter 0034           __end_of_update_current_time 0D8F  
  __size_of_adjust_hours_mode_display 00A7               __end_of_ssdDot_setState 0A7F  
                  switch_getState@ret 0073                       ?_display_update 0070  
                       __CFG_PWRTE$ON 0000                       _timer0_set_mode 0BCC  
         __end_of_normal_mode_display 05D1                i1ssdDot_setState@state 0071  
                      i1___awmod@sign 0076                  timer0_ovf_setState@o 0031  
                     ??_ssd_getSymbol 0074            __end_of_sw_setting_handler 0C51  
                    __end_ofi1___bmul 0AB9                                 pclath 000A  
                     i1_ssd_setSymbol 0AB9                       __end_of_ssd_off 07B1  
                               status 0003                                 wtemp0 007E  
                  __size_ofi1___awdiv 0059                    __size_ofi1___awmod 004B  
                     __initialization 0013                          __end_of_main 0D52  
     __end_of_switches_Schematic_init 0C77                                ??_main 004B  
                     _switch_getState 0AEE                       ??_ssd_setSymbol 0039  
                      i1get_time@time 0071                           ?i1_get_time 0070  
   __end_of_adjust_hours_mode_display 04A0                  ssdDot_setState@state 0030  
                    ?i1_timer0_reload 0070                      ___awdiv@dividend 0031  
__size_of_adjust_minutes_mode_display 00A7                                i1l2001 0F39  
                              i1l2005 0F41                                i1l2021 0E67  
                              i1l2031 0E7B                                i1l2017 0E60  
                              i1l2201 0485                                i1l2113 0D90  
                              i1l2043 0E9C                                i1l2035 0E89  
                              i1l2203 049B                                i1l2131 0C82  
                              i1l2115 0DA5                                i1l2029 0E6D  
                              i1l2039 0E94                                i1l2127 0C78  
                              i1l2119 0DBA                                i1l2151 0C3B  
                              i1l2217 03DE                                i1l2137 0C8C  
                              i1l2145 0C2C                                i1l2219 03F4  
                              i1l2147 0C34                                i1l2413 00FF  
                              i1l2511 06D3                                i1l2433 0193  
                              i1l2177 0D7A                                i1l2505 06BF  
                              i1l2187 05CC                                i1l2427 0167  
                              i1l2419 0128                                i1l2507 06B7  
                              i1l2533 0E34                                i1l2541 0E40  
                              i1l3181 0DC4                                i1l2535 0E38  
                              i1l3183 0C96                                i1l3185 0E4A  
                              i1l2537 0E3C                                i1l2393 0059  
                              i1l3177 06C7                                i1l1923 0AAA  
                              i1l2467 0EAE                                i1l3179 0C45  
                              i1l2493 0695                                i1l1927 0AB0  
                              i1l2399 005A                                i1l2487 0681  
                              i1l2499 06A9                                i1l1973 0EF7  
                              i1l1991 0F18                                i1l1979 0F02  
                              i1l1997 0F2E                                i1l1989 0F0A  
                              u220_25 0089                                u221_25 00A1  
                              u222_24 00AF                                u230_25 00F3  
                              u222_25 00AD                                u151_25 0F19  
                              u231_25 0102                                u223_25 00B8  
                              u152_25 0F25                                u240_25 014A  
                              u224_25 00C6                                u153_25 0F2F  
                              u161_25 0E81                                u145_25 0B7A  
                              u233_25 0111                                u217_25 005D  
                              u170_24 075C                                u162_25 0E8A  
                              u170_25 075A                                u242_25 015B  
                              u226_25 00D5                                u218_25 0070  
                              u171_24 078F                                u171_25 078D  
                              u243_25 016A                                u235_25 0122  
                              u172_24 06EF                                u172_25 06ED  
                              u236_25 012B                                u228_25 00E4  
                              u181_20 05C8                                u173_24 0722  
                              u149_25 0F0D                                u173_25 0720  
                              u245_25 017A                                u165_25 0AF2  
                              u182_20 05C9                                u238_25 013B  
                              u159_25 0E70                                u247_25 0189  
              __size_of_switch_update 0151                __size_ofi1_dot_display 001C  
                    __end_of_get_mode 0A9A                      __end_of_get_time 0B5C  
                              ___bmul 0ADB                      ?_ssdDot_getState 0070  
                           ??___awdiv 0033                             ??___awmod 0033  
                        ?_timer0_init 0032                      ___awdiv@quotient 0036  
                     ___awmod@divisor 002F               __end_of_timer0_set_mode 0BE9  
                     ___awmod@counter 0034          __size_of_T0_timer_mode_state 001D  
                              _ssd_on 06D7                     __end_ofi1___awdiv 0F46  
                   __end_ofi1___awmod 0EA1                          ?_time_update 0070  
                    ?_ssdDot_setState 0070                                saved_w 007E  
                      ssd_display@ssd 0038                      __end_of_ssd_init 02A1  
             __end_ofi1_ssd_setSymbol 0ACA              __end_of_sw_minus_handler 0C9F  
                 i1ssd_display@symbol 0074                  __size_of_dot_display 0024  
                           ??_ssd_off 0020                          ?_ssd_display 0033  
                        ??_APP_UPDATE 002C               __end_of__initialization 0047  
                __end_of_display_init 053B          ssd_update@ssd_update_counter 0051  
                 ___bmul@multiplicand 002F                        __pcstackCOMMON 0070  
             __end_of_switch_getState 0B02                   ssd_setSymbol@symbol 0038  
                        __pidataBANK1 0BE9                          __pidataBANK3 0B17  
                 __size_ofi1_get_time 0018              __size_of_sw_plus_handler 003E  
                           ?i1___bmul 0070                    __end_of_APP_UPDATE 0CC7  
                       _switch_update 004B                         i1_dot_display 0B76  
                       _switches_data 00A0                 __end_of_timer0_reload 0A87  
                    i1___bmul@product 0073               ??_T0_counter_mode_state 002F  
                          __pbssBANK0 004B                            __pbssBANK1 00A0  
                          __pbssBANK3 0190                 switch_update@sw_index 0078  
                          __pmaintext 0D1F                               ?___bmul 002F  
                        ?_switch_init 0070                            __pintentry 0004  
          __end_of_ssd_schematic_init 0352                      ??_display_update 0023  
                          ??i1___bmul 0071                      ?_timer0_set_mode 0070  
                             ?_ssd_on 0070                    __size_of_time_init 0007  
                  i1___awdiv@dividend 0072                        ?_switch_update 0070  
                      ?i1_dot_display 0070                      ?i1_ssd_setSymbol 0079  
                  _mode_blink_counter 00B8                             ?_get_mode 0070  
                           ?_get_time 0070                  T0_timer_mode_state@s 0031  
               ssd_schematic_init@940 012E                 ssd_schematic_init@934 0110  
               ssd_schematic_init@936 011A                 ssd_schematic_init@938 0124  
                  i1___awdiv@quotient 0077          __size_of_timer0_ovf_setState 001A  
                  _sw_setting_handler 0C2B                      ?_switch_getState 0070  
                     __size_of___bmul 0013                             ?_ssd_init 0070  
                             ___awdiv 0F46                               ___awmod 07B1  
                 ?_sw_setting_handler 0070                  __size_of_timer0_init 003F  
                             __ptext1 0DCD                               __ptext2 0FA1  
                             __ptext3 0BCC                               __ptext4 0A7F  
                             __ptext5 0B5C                               __ptext6 0BAF  
                             __ptext7 0B92                               __ptext8 0A60  
                             __ptext9 05D1                __size_ofi1_ssd_display 002B  
                     __size_of_ssd_on 006D                 _timer0_set_prescaller 0FA1  
      switch_update@sw_update_counter 0054                     ??_sw_plus_handler 0077  
                    ___awmod@dividend 0031              ?_switches_Schematic_init 0070  
                 i1___bmul@multiplier 0072                          ??i1_get_time 0070  
                             _ssd_off 0744                  __size_of_time_update 0071  
                             clrloop0 0A88                            ??_get_mode 0070  
               __size_of_display_init 009B                            ??_get_time 002F  
                end_of_initialization 0047          __size_of_update_current_time 003D  
               __end_of_ssd_getSymbol 0AA8                  ??_sw_setting_handler 0070  
                 _T0_timer_mode_state 0BAF          __size_of_normal_mode_display 0096  
                __size_of_ssd_display 002D                     __end_of_time_init 0A67  
                   _dot_blink_counter 00BA   __end_of_adjust_minutes_mode_display 03F9  
         _adjust_minutes_mode_display 0352                            ??_ssd_init 0039  
                  __end_ofi1_get_time 0B44                  ?_T0_timer_mode_state 0070  
                     ??_switch_update 0070                       ??i1_dot_display 0070  
       ??_adjust_minutes_mode_display 0020                          _display_init 04A0  
                        _display_mode 0058                          _display_time 0055  
               __end_of_ssd_setSymbol 0B17                            _ssd_update 0EA1  
                           i1___awdiv 0EED                             i1___awmod 0E56  
                   ?_sw_minus_handler 0070            ?_adjust_hours_mode_display 0070  
                  ??_sw_minus_handler 0070                         i1_ssd_display 0CC7  
            __size_ofi1_timer0_reload 0008                      i1ssd_display@ssd 0079  
                         ssd_init@ssd 0047                      timer0_reload@val 0030  
                      __end_of___bmul 0AEE                 ??_T0_timer_mode_state 002F  
                   switch_getState@sw 0072                  __size_of_switch_init 0095  
              ?_timer0_set_prescaller 0070                      timer0_set_mode@m 0031  
            __size_of_ssdDot_getState 0004                         ??_dot_display 002F  
                      __end_of_ssd_on 0744                     __size_ofi1___bmul 0011  
                 start_initialization 0013                            ?i1___awdiv 0070  
                          ?i1___awmod 0070                     i1_ssdDot_setState 0A67  
                  ?i1_ssdDot_setState 0070                        ?i1_ssd_display 0074  
            __size_of_ssdDot_setState 0008        __size_of_T0_counter_mode_state 001D  
       __end_of_T0_counter_mode_state 0BAF                   ??i1_ssdDot_setState 0070  
                            ??___bmul 0030                            init_fetch0 0ACA  
                         __pdataBANK1 00BE                           __pdataBANK3 01B8  
                  i1___awmod@dividend 0072                              ??_ssd_on 0020  
           __end_ofi1_ssdDot_setState 0A6F             switch_update@sample_index 0077  
                           ___latbits 0002                           ?_ssd_update 0070  
                       __pcstackBANK0 0020                         __pcstackBANK2 0110  
                 _timer0_ovf_setState 0B5C                    _ssd_schematic_init 02A1  
                 __end_of_dot_display 0C2B                     __size_of_get_mode 000B  
                   __size_of_get_time 0018                   ?_ssd_schematic_init 0070  
                        _current_mode 0050                          _current_time 004B  
                    ssd_setSymbol@ssd 003B                  ?_timer0_ovf_setState 0070  
                     _sw_plus_handler 0D8F                              ?___awdiv 002F  
                            ?___awmod 002F                __size_of_timer0_reload 0008  
                   ??i1_timer0_reload 0070                   _update_current_time 0D52  
                   i1___awdiv@divisor 0070                     i1___awdiv@counter 0075  
                   __size_of_ssd_init 0105                   _normal_mode_display 053B  
                ??_ssd_schematic_init 002F                             _dot_state 0052  
                         ??i1___awdiv 0074                           ??i1___awmod 0074  
                            ?_ssd_off 0070              __size_of_timer0_set_mode 001D  
                     ??i1_ssd_display 0075                     ??_ssdDot_getState 0070  
                ?_update_current_time 0070                     interrupt_function 0004  
                ?_normal_mode_display 0070                    i1timer0_reload@val 0071  
            __size_ofi1_ssd_setSymbol 0011                             clear_ram0 0A87  
    __size_of_switches_Schematic_init 0026                 i1___bmul@multiplicand 0070  
               ??_timer0_ovf_setState 002F                     ??_ssdDot_setState 002F  
                    time_update@index 007C                 i1ssd_setSymbol@symbol 0079  
                 __size_of_ssd_update 004C                             _time_init 0A60  
                       ??_timer0_init 0034                              i1___bmul 0AA8  
              ssd_schematic_init@F933 00D2                ssd_schematic_init@F935 00C8  
              ssd_schematic_init@F937 00BE                ssd_schematic_init@F939 01C3  
            __size_of_switch_getState 0014                         ??_time_update 007A  
                         _dot_display 0C07            __size_ofi1_ssdDot_setState 0008  
                          ssd_off@ssd 0074               __size_of_display_update 004A  
                       _timer0_reload 0A7F                 ??_update_current_time 0077  
         ??_adjust_hours_mode_display 0020                         ??_ssd_display 0034  
               ??_normal_mode_display 0020           __size_of_sw_setting_handler 0026  
             __end_of_sw_plus_handler 0DCD             __size_of_sw_minus_handler 0028  
                          ?_time_init 0070               ??_timer0_set_prescaller 002F  
                   i1___awmod@divisor 0070                     i1___awmod@counter 0075  
                    __size_of___awdiv 005B                      __size_of___awmod 004D  
                    switch_init@index 003C                __size_of_ssd_getSymbol 000E  
                 __end_of_timer0_init 0E0C                 __end_of_switch_update 019C  
               __end_ofi1_dot_display 0B92                           _current_ssd 0053  
                      ?_timer0_reload 0070                              __ptext10 0C51  
                            __ptext11 04A0                              __ptext20 07B1  
                            __ptext12 0B02                              __ptext21 0F46  
                            __ptext13 019C                              __ptext30 004B  
                            __ptext22 0C9F                              __ptext14 02A1  
                            __ptext31 0EA1                              __ptext23 0A6F  
                            __ptext15 0CF2                              __ptext40 0A8F  
                            __ptext32 0CC7                              __ptext24 0666  
                            __ptext16 0C07                              __ptext41 0352  
                            __ptext33 0B76                              __ptext25 0D52  
                            __ptext17 0ADB                              __ptext42 03F9  
                            __ptext34 06D7                              __ptext26 0AEE  
                            __ptext18 0A77                              __ptext43 0AB9  
                            __ptext35 0744                              __ptext27 0C2B  
                            __ptext19 0B44                              __ptext44 0A67  
                            __ptext36 0E0C                              __ptext28 0D8F  
                            __ptext45 0E56                              __ptext37 0B2C  
                            __ptext29 0C77                              __ptext46 0EED  
                            __ptext38 053B                              __ptext47 0A9A  
                            __ptext39 0A5C                              __ptext48 0AA8  
                    __size_of_ssd_off 006D                    i1ssd_setSymbol@ssd 007C  
                            _get_mode 0A8F                              _get_time 0B44  
                 __end_of_time_update 06D7                      ssd_getSymbol@ssd 0075  
                    dot_display@state 0031                            _APP_UPDATE 0C9F  
                       switch_init@sw 003D                         __size_of_main 0033  
                   ??_timer0_set_mode 002F                   __end_of_ssd_display 0D1F  
         __end_of_T0_timer_mode_state 0BCC                     ssd_display@symbol 0033  
              __size_of_ssd_setSymbol 0015                         ??_switch_init 0030  
                            _ssd_data 0190                     ??i1_ssd_setSymbol 007A  
                            _ssd_init 019C             _adjust_hours_mode_display 03F9  
                           ssd_on@ssd 0074                          ??_ssd_update 007A  
                            init_ram0 0ACE                          timer0_init@m 0032  
                        timer0_init@o 0033                          timer0_init@p 0036  
                   ??_switch_getState 0070                              intlevel1 0000  
                       _ssd_getSymbol 0A9A               _switches_Schematic_init 0C51  
                     i1_timer0_reload 0A6F                      ?_sw_plus_handler 0070  
                     _ssd_update$1597 007C                 _T0_counter_mode_state 0B92  
                         ??_time_init 002F                    __end_of_ssd_update 0EED  
                         _timer0_init 0DCD                       _ssdDot_getState 0A5C  
           time_update@current_period 004F                   __end_of_switch_init 0666  
                         _time_update 0666                       ??_timer0_reload 002F  
                       _ssd_setSymbol 0B02                timer0_set_prescaller@p 0031  
                      _display_update 0E0C                       ssd_update@index 007D  
                         _ssd_decoder 01B8                       _ssdDot_setState 0A77  
                         _ssd_display 0CF2                        ?_ssd_getSymbol 0070  
                         ?_APP_UPDATE 0070                T0_counter_mode_state@s 0031  
                    _sw_minus_handler 0C77  
